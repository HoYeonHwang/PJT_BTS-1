-- MySQL dump 10.13  Distrib 8.0.21, for Win64 (x86_64)
--
-- Host: btsdb.czh6yt8bx4v6.ap-northeast-2.rds.amazonaws.com    Database: btsDB
-- ------------------------------------------------------
-- Server version	8.0.20

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
SET @MYSQLDUMP_TEMP_LOG_BIN = @@SESSION.SQL_LOG_BIN;
SET @@SESSION.SQL_LOG_BIN= 0;

--
-- GTID state at the beginning of the backup 
--

SET @@GLOBAL.GTID_PURGED=/*!80000 '+'*/ '';

--
-- Table structure for table `code`
--

DROP TABLE IF EXISTS `code`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `code` (
  `code_id` int NOT NULL AUTO_INCREMENT,
  `code_content` text NOT NULL,
  `code_date` datetime(6) NOT NULL,
  `code_lan` varchar(255) NOT NULL,
  `code_memory` varchar(255) NOT NULL,
  `code_time` varchar(255) NOT NULL,
  `pro_id` int DEFAULT NULL,
  `user_id` varchar(255) DEFAULT NULL,
  `room_id` int DEFAULT NULL,
  `code_result` varchar(255) NOT NULL,
  PRIMARY KEY (`code_id`),
  KEY `FK508awl0tukoqm5g9t13gvikxw` (`user_id`),
  KEY `FKik15709me53652b79601u9jdv` (`pro_id`),
  CONSTRAINT `FK508awl0tukoqm5g9t13gvikxw` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FKik15709me53652b79601u9jdv` FOREIGN KEY (`pro_id`) REFERENCES `problem` (`pro_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=69 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `code`
--

LOCK TABLES `code` WRITE;
/*!40000 ALTER TABLE `code` DISABLE KEYS */;
INSERT INTO `code` VALUES (24,'a=input()\r\nprint(\'가나다\')','2021-05-20 04:49:36.008000','python','27712kB','0.02s',21,'jihyeong',54,'성공'),(25,'a=input()\r\nb=1\r\nprint(\'가나다\')','2021-05-20 04:50:20.473000','python','27616kB','0.02s',21,'jihyeong',54,'성공'),(28,'from sys import stdin\r\ndx,dy=(-1,1,0,0),(0,0,-1,1)\r\n\r\nclass snake:\r\n    def __init__(self):\r\n        self.dir=3\r\n        self.body=[(0,0)]\r\n\r\ndef changeDir(curr,next):\r\n    if curr==0:\r\n        return 2 if next==\'L\' else 3\r\n    elif curr==1:\r\n        return 3 if next==\'L\' else 2\r\n    elif curr==2:\r\n        return 1 if next==\'L\' else 0\r\n    else:\r\n        return 0 if next==\'L\' else 1\r\n\r\nn,k=int(stdin.readline()),int(stdin.readline())\r\nmaps=[[0]*n for _ in range(n)]\r\n\r\nfor _ in range(k):\r\n    x,y=map(int, stdin.readline().split())\r\n    maps[x-1][y-1]=1\r\nmaps[0][0]=8\r\n\r\nl=int(stdin.readline())\r\ndirs=[False]*l\r\n\r\nfor i in range(l):\r\n    x,c=stdin.readline().split()\r\n    dirs[i]=(int(x),c)\r\n\r\ns=snake()\r\ntime=0\r\n\r\nwhile True:\r\n    time+=1\r\n    x,y=s.body[0]\r\n    nx,ny=x+dx[s.dir],y+dy[s.dir]\r\n\r\n    if nx<0 or ny<0 or nx>=n or ny>=n or maps[nx][ny]==8: # 벽 or 내몸\r\n        break\r\n\r\n    if maps[nx][ny]==0: # 빈칸\r\n        a,b=s.body.pop(-1)\r\n        maps[a][b]=0\r\n\r\n    maps[nx][ny] = 8\r\n    s.body = [(nx, ny)] + s.body\r\n\r\n    if dirs and dirs[0][0]==time:\r\n        s.dir=changeDir(s.dir,dirs[0][1])\r\n        dirs.pop(0)\r\n\r\nprint(time)','2021-05-20 06:32:25.864000','python','27656kB','0.02s',29,'dovvn',NULL,'성공'),(29,'from collections import deque\r\n\r\n\r\ndef change(d, c):\r\n    # 상(0) 우(1) 하(2) 좌(3)\r\n    # 동쪽 회전: 상(0) -> 우(1) -> 하(2) -> 좌(3) -> 상(0) : +1 방향\r\n    # 왼쪽 회전: 상(0) -> 좌(3) -> 하(2) -> 우(1) -> 상(0) : -1 방향\r\n    if c == \"L\":\r\n        d = (d - 1) % 4\r\n    else:\r\n        d = (d + 1) % 4\r\n    return d\r\n\r\n\r\n# 상 우 하 좌\r\ndy = [-1, 0, 1, 0]\r\ndx = [0, 1, 0, -1]\r\n\r\n\r\ndef start():\r\n    direction = 1  # 초기 방향\r\n    time = 1  # 시간\r\n    y, x = 0, 0  # 초기 뱀 위치\r\n    visited = deque([[y, x]])  # 방문 위치\r\n    arr[y][x] = 2\r\n    while True:\r\n        y, x = y + dy[direction], x + dx[direction]\r\n        if 0 <= y < N and 0 <= x < N and arr[y][x] != 2:\r\n            if not arr[y][x] == 1:  # 사과가 없는 경우\r\n                temp_y, temp_x = visited.popleft()\r\n                arr[temp_y][temp_x] = 0  # 꼬리 제거\r\n            arr[y][x] = 2\r\n            visited.append([y, x])\r\n            if time in times.keys():\r\n                direction = change(direction, times[time])\r\n            time += 1\r\n        else:  # 본인 몸에 부딪히거나, 벽에 부딪힌 경우\r\n            return time\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    # input\r\n    N = int(input())\r\n    K = int(input())\r\n    arr = [[0] * N for _ in range(N)]\r\n    for _ in range(K):\r\n        a, b = map(int, input().split())\r\n        arr[a - 1][b - 1] = 1  # 사과 저장\r\n    L = int(input())\r\n    times = {}\r\n    for i in range(L):\r\n        X, C = input().split()\r\n        times[int(X)] = C\r\n    print(start())','2021-05-20 06:39:32.650000','python','27712kB','0.01s',29,'hoyeon',NULL,'성공'),(30,'# 벽 또는 자기자신의 몸과 부딪히면 게임이 끝\r\nimport sys\r\ninput = sys.stdin.readline\r\n\r\n\r\ndef change_direction(move, count, direction):\r\n    if count in move.keys():\r\n        if direction == 0:\r\n            if move[count] == \'L\':\r\n                direction = 2\r\n            else:\r\n                direction = 3\r\n        elif direction == 1:\r\n            if move[count] == \'L\':\r\n                direction = 3\r\n            else:\r\n                direction = 2\r\n        elif direction == 2:\r\n            if move[count] == \'L\':\r\n                direction = 1\r\n            else:\r\n                direction = 0\r\n        elif direction == 3:\r\n            if move[count] == \'L\':\r\n                direction = 0\r\n            else:\r\n                direction = 1\r\n    return direction\r\n\r\n\r\n\r\n\r\n\r\nn = int(input())\r\narr = [[0] * n for _ in range(n)]\r\n\r\nk = int(input())\r\napples = []\r\nfor _ in range(k):\r\n    x, y = map(int, input().split())\r\n    arr[x-1][y-1] = 1\r\n\r\nl = int(input())\r\n\r\nmove = {}\r\n\r\nfor _ in range(l):\r\n    x, c = input().split()\r\n    x = int(x)\r\n    move[x] = c\r\n\r\n\r\n# 상 하 좌 우\r\ndx = [-1, 1, 0, 0]\r\ndy = [0, 0, -1, 1]\r\n\r\n\r\nsnake = [(0, 0)]\r\n\r\ndirection = 3\r\n\r\ncount = 1\r\nwhile True:\r\n    hx, hy = snake[0]\r\n    \r\n    nx = hx + dx[direction]\r\n    ny = hy + dy[direction]\r\n    \r\n    if (nx, ny) in snake[1:] or (nx < 0 or ny < 0 or nx >= n or ny >= n):\r\n        break\r\n\r\n    tx, ty = snake[-1]\r\n\r\n    # move\r\n    if len(snake) > 1:\r\n        for idx in range(len(snake)-1, 0, -1):\r\n            snake[idx] = snake[idx - 1]\r\n\r\n    # apple\r\n    if arr[nx][ny] == 1:\r\n        arr[nx][ny] = 0\r\n        snake.append((tx, ty))\r\n    snake[0] = (nx, ny)\r\n\r\n    direction = change_direction(move, count, direction)\r\n\r\n\r\n    count += 1\r\n\r\nprint(count)\r\n','2021-05-20 06:55:03.322000','python','27712kB','0.03s',29,'hyeji',NULL,'성공'),(31,'import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedList;\r\nimport java.util.Map;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n\r\n    static int N, K, L, X; //보드크기, 사과개수, 방향횟수, 초\r\n    static char C; //방향\r\n    static int[][] map;\r\n    static Map<Integer, Character> dirInfo; //초, 회전 방향\r\n    static Queue<Point> queue; //뱀 머리 저장\r\n    static int[] di = {-1, 0, 1, 0}; //상우하좌\r\n    static int[] dj = {0, 1, 0, -1};\r\n    static int hx = 1, hy = 1; //머리 위치\r\n    static int dir = 1; //이동 방향\r\n    static int Ans; //게임시간\r\n    \r\n    static class Point{\r\n        int x, y;\r\n        \r\n        Point(int x, int y){\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws NumberFormatException, IOException {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        N = Integer.parseInt(br.readLine());\r\n        K = Integer.parseInt(br.readLine());\r\n        \r\n        StringTokenizer st;\r\n        map = new int[N+1][N+1];\r\n        for(int i=0; i<K; i++) {\r\n            st = new StringTokenizer(br.readLine());\r\n            int x = Integer.parseInt(st.nextToken());\r\n            int y = Integer.parseInt(st.nextToken());\r\n            \r\n            map[x][y] = -2;//사과표시\r\n        }//End Apple Input\r\n        \r\n        L = Integer.parseInt(br.readLine());\r\n        dirInfo = new HashMap<>();\r\n        \r\n        for(int i=0; i<L; i++) {\r\n            st = new StringTokenizer(br.readLine());\r\n            \r\n            X = Integer.parseInt(st.nextToken());\r\n            C = st.nextToken().charAt(0);\r\n            dirInfo.put(X, C);\r\n        }//End dir Info\r\n        \r\n        queue = new LinkedList<>();\r\n        queue.add(new Point(1, 1)); //머리정보\r\n        map[1][1] = -1; //뱀 몸 표시\r\n        \r\n        while(true) {\r\n            Ans++; //시간증가\r\n            \r\n            //다음 방향 검사\r\n            int nhx = hx + di[dir];\r\n            int nhy = hy + dj[dir];\r\n            \r\n            if(nhx >= 1 && nhx<=N && nhy>=1 && nhy<=N && map[nhx][nhy] != -1) {\r\n                hx = nhx;\r\n                hy = nhy;\r\n                queue.add(new Point(nhx, nhy)); //머리 넣고\r\n                \r\n                //사과 있는지 체크\r\n                if(map[nhx][nhy] == -2) map[nhx][nhy] = -1; //사과 먹고 몸길이 증가\r\n                else { //꼬리 앞으로 이동\r\n                    map[nhx][nhy] = -1;\r\n                    Point tail = queue.poll();\r\n                    map[tail.x][tail.y] = 0;\r\n                }\r\n            }else { //벽 또는 자기자신과 부딪히면\r\n                System.out.println(Ans);\r\n                break; //종료\r\n            }\r\n            \r\n            //방향 회전 체크\r\n            if(dirInfo.containsKey(Ans)) {\r\n                int rotate = dirInfo.get(Ans);\r\n                if(rotate == \'L\') dir = (dir + 3) % 4; //반시계방향\r\n                else dir = (dir + 1) % 4; //시계방향\r\n            }\r\n        }//End game\r\n    }\r\n}','2021-05-20 06:56:27.239000','java','2184192kB','0.05s',29,'jihyeong',1,'성공'),(32,'dx,dy=(-1,1,0,0),(0,0,-1,1)\r\n\r\ndef constDir(x):\r\n    if x%2==0:\r\n        return x+1\r\n    return x-1\r\n\r\ndef perm(z,lim,beforeDir1,beforeDir2,dirs):\r\n    if z==lim:\r\n        bx,by,rx,ry=b_x,b_y,r_x,r_y\r\n        for dir in dirs:\r\n            bCnt, rCnt = 0, 0\r\n            while True:\r\n                n_bx,n_by=bx+dx[dir],by+dy[dir]\r\n                if board[n_bx][n_by]==\'#\':\r\n                    break\r\n                elif board[n_bx][n_by]==\'O\':\r\n                    return False\r\n                bx,by=n_bx,n_by\r\n                bCnt+=1\r\n            while True:\r\n                n_rx,n_ry=rx+dx[dir],ry+dy[dir]\r\n                if board[n_rx][n_ry]==\'#\':\r\n                    break\r\n                elif board[n_rx][n_ry]==\'O\':\r\n                    return True\r\n                rx,ry=n_rx,n_ry\r\n                rCnt+=1\r\n\r\n            if bx==rx and by==ry:\r\n                if bCnt<=rCnt:\r\n                    rx-=dx[dir]\r\n                    ry-=dy[dir]\r\n                else:\r\n                    bx-=dx[dir]\r\n                    by-=dy[dir]\r\n\r\n    else:\r\n        for i in range(4):\r\n            if i==beforeDir1 or i==beforeDir2:\r\n                continue\r\n            dirs.append(i)\r\n            if perm(z+1,lim,i,constDir(i),dirs):\r\n                return True\r\n            dirs.pop()\r\n\r\n    return False\r\n\r\ndef bfs():\r\n    def tilt(x,y,dir):\r\n        dist=0\r\n        while True:\r\n            nx,ny=x+dx[dir],y+dy[dir]\r\n            if board[nx][ny]==\'#\':\r\n                break\r\n            x,y=nx,ny\r\n            dist+=1\r\n            if board[nx][ny]==\'O\':\r\n                break\r\n        return (x,y,dist)\r\n\r\n    q=[(r_x,r_y,b_x,b_y,-1,0)]\r\n    visit=[[[[False]*m for _ in range(n)] for _ in range(m)] for _ in range(n)]\r\n    visit[r_x][r_y][b_x][b_y]=True\r\n\r\n    while q:\r\n        rx,ry,bx,by,beforeDir1,tiltCnt=q.pop()\r\n        beforeDir2=constDir(beforeDir1)\r\n        if tiltCnt>=10: break\r\n        for dir in range(4):\r\n            if dir==beforeDir1 or dir==beforeDir2:\r\n                continue\r\n            n_rx,n_ry,r_dist=tilt(rx,ry,dir)\r\n            n_bx,n_by,b_dist=tilt(bx,by,dir)\r\n            if visit[n_rx][n_ry][n_bx][n_by]:\r\n                continue\r\n            if board[n_bx][n_by]==\'O\':\r\n                continue\r\n            if board[n_rx][n_ry]==\'O\':\r\n                return tiltCnt+1\r\n            if n_rx==n_bx and n_ry==n_by:\r\n                if r_dist>b_dist:\r\n                    n_rx-=dx[dir]\r\n                    n_ry-=dy[dir]\r\n                else:\r\n                    n_bx-=dx[dir]\r\n                    n_by-=dy[dir]\r\n\r\n            q.append((n_rx,n_ry,n_bx,n_by,dir,tiltCnt+1))\r\n            visit[n_rx][n_ry][n_bx][n_by]=True\r\n    return -1\r\n\r\nn,m=map(int, input().split())\r\nboard=[list(input()) for _ in range(n)]\r\nb_x,b_y,r_x,r_y = -1,-1,-1,-1\r\nfor i in range(n):\r\n    for j in range(m):\r\n        if board[i][j]==\'B\':\r\n            b_x,b_y=i,j\r\n            board[i][j]=\'.\'\r\n        elif board[i][j]==\'R\':\r\n            r_x,r_y=i,j\r\n            board[i][j]=\'.\'\r\nresult=-1\r\nfor i in range(1,11):\r\n    if perm(0,i,-1,-1,[]):\r\n        result=i\r\n        break\r\n# result=bfs()\r\nprint(result)','2021-05-20 06:56:48.006000','python','27712kB','0.02s',30,'hyeji',NULL,'성공'),(33,'import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\n//두 자연수 A와 B가 주어진다. 이때, A+B, A-B, A*B, A/B(몫), A%B(나머지)를 출력하는 프로그램을 작성하시오. \r\npublic class Main {\r\n	public static void main(String[] args) throws IOException {\r\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st = new StringTokenizer(br.readLine());\r\n		int A = Integer.parseInt(st.nextToken());\r\n		int B = Integer.parseInt(st.nextToken());\r\n		int C = Integer.parseInt(st.nextToken());\r\n		System.out.println((A + B) % C);\r\n		System.out.println(((A % C) + (B % C)) % C);\r\n		System.out.println((A * B) % C);\r\n		System.out.println(((A % C) * (B % C)) % C);\r\n	}\r\n}','2021-05-20 07:04:42.621000','java','nullkB','nulls',32,'hyeji',NULL,'실패'),(34,'import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\n//두 자연수 A와 B가 주어진다. 이때, A+B, A-B, A*B, A/B(몫), A%B(나머지)를 출력하는 프로그램을 작성하시오. \r\npublic class Main {\r\n	public static void main(String[] args) throws IOException {\r\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st = new StringTokenizer(br.readLine());\r\n		int A = Integer.parseInt(st.nextToken());\r\n		int B = Integer.parseInt(st.nextToken());\r\n		int C = Integer.parseInt(st.nextToken());\r\n		System.out.println((A + B) % C);\r\n		System.out.println(((A % C) + (B % C)) % C);\r\n		System.out.println((A * B) % C);\r\n		System.out.println(((A % C) * (B % C)) % C);\r\n	}\r\n}','2021-05-20 07:07:53.621000','java','2184192kB','0.05s',32,'jihyeong',1,'성공'),(35,'import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\n//두 자연수 A와 B가 주어진다. 이때, A+B, A-B, A*B, A/B(몫), A%B(나머지)를 출력하는 프로그램을 작성하시오. \r\npublic class Main {\r\n	public static void main(String[] args) throws IOException {\r\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st = new StringTokenizer(br.readLine());\r\n		int A = Integer.parseInt(st.nextToken());\r\n		int B = Integer.parseInt(st.nextToken());\r\n		int C = Integer.parseInt(st.nextToken());\r\n		System.out.println((A + B) % C);\r\n		System.out.println(((A % C) + (B % C)) % C);\r\n		System.out.println((A * B) % C);\r\n		System.out.println(((A % C) * (B % C)) % C);\r\n	}\r\n}','2021-05-20 07:13:02.143000','java','2184192kB','0.05s',32,'hyeji',NULL,'성공'),(37,'from sys import stdin\r\n\r\ndef rotate(x,y,length):\r\n    tmp=[[0]*length for _ in range(length)]\r\n    for i in range(length):\r\n        for j in range(length):\r\n            tmp[i][j]=maps[x+length-1-j][y+i]\r\n    for i in range(length):\r\n        for j in range(length):\r\n            maps[x+i][y+j]=tmp[i][j]\r\n\r\ndef melting():\r\n    copy_maps=[[0]*(2**n) for _ in range(2**n)]\r\n    for i in range(0,2**n):\r\n        for j in range(0,2**n):\r\n            cnt=0\r\n            if maps[i][j]==0:\r\n                continue\r\n            for d in range(4):\r\n                nx,ny=i+dx[d],j+dy[d]\r\n                if 0<=nx<2**n and 0<=ny<2**n and maps[nx][ny]>0:\r\n                    cnt+=1\r\n            copy_maps[i][j]=maps[i][j]-1 if cnt<3 else maps[i][j]\r\n    return copy_maps\r\n\r\ndef bfs(a,b):\r\n    visit[a][b]=1\r\n    q=[(a,b)]\r\n    cnt=1\r\n    while q:\r\n        x,y=q.pop(0)\r\n        for d in range(4):\r\n            nx,ny=x+dx[d],y+dy[d]\r\n            if nx<0 or ny<0 or nx>=2**n or ny>=2**n or maps[nx][ny]<=0 or visit[nx][ny]:\r\n                continue\r\n            q.append((nx,ny))\r\n            visit[nx][ny]=1\r\n            cnt += 1\r\n    return cnt\r\n\r\ndx,dy=(-1,1,0,0),(0,0,-1,1)\r\nn,q=map(int, stdin.readline().split())\r\nmaps=[list(map(int, stdin.readline().split())) for _ in range(2**n)]\r\nstorms=list(map(int, stdin.readline().split()))\r\n\r\nfor l in storms:\r\n    if l!=0:\r\n        for i in range(0,2**n,2**l):\r\n            for j in range(0,2**n,2**l):\r\n                if i+2**l<=2**n and j+2**l<=2**n:\r\n                    rotate(i,j,2**l)\r\n    maps=melting()\r\n\r\nvisit=[[0]*(2**n) for _ in range(2**n)]\r\nresult1,result2=0,0\r\nfor i in range(2**n):\r\n    for j in range(2**n):\r\n        result1+=maps[i][j]\r\n        if maps[i][j]==0 or visit[i][j]: continue\r\n        tmp=bfs(i,j)\r\n        result2=max(result2,tmp)\r\nif result2 == 1 : result2=0\r\nprint(result1)\r\nprint(result2)','2021-05-20 07:23:57.319000','python','27712kB','0.02s',36,'dovvn',1,'성공'),(38,'import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n	static int N,M,K;\r\n	static List<Ball>[][] map;\r\n	static int[] di = {-1, -1, 0, 1, 1, 1, 0, -1}; //01234567\r\n	static int[] dj = {0, 1, 1, 1, 0, -1, -1, -1};\r\n	static int Ans; //남은 질량합\r\n	\r\n	static class Ball{\r\n		int x, y;\r\n		int m,s,d;\r\n		\r\n		public Ball(int m, int s, int d) {\r\n			this.m = m;\r\n			this.s = s;\r\n			this.d = d;\r\n		}\r\n		\r\n		public Ball(int x, int y, int m, int s, int d) {\r\n			this.x = x;\r\n			this.y = y;\r\n			this.m = m;\r\n			this.s = s;\r\n			this.d = d;\r\n		}\r\n	}\r\n	\r\n	public static void main(String[] args) throws IOException {\r\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st = new StringTokenizer(br.readLine());\r\n		N = Integer.parseInt(st.nextToken());\r\n		M = Integer.parseInt(st.nextToken());\r\n		K = Integer.parseInt(st.nextToken());\r\n		\r\n		map = new ArrayList[N+1][N+1];\r\n		\r\n		for(int i=1; i<=N; i++) {\r\n			for(int j=1; j<=N; j++) {\r\n				map[i][j] = new ArrayList<>();\r\n			}\r\n		}\r\n		\r\n		for(int i=0; i<M; i++) {\r\n			st = new StringTokenizer(br.readLine());\r\n			int r = Integer.parseInt(st.nextToken());\r\n			int c = Integer.parseInt(st.nextToken());\r\n			int m = Integer.parseInt(st.nextToken());\r\n			int s = Integer.parseInt(st.nextToken());\r\n			int d = Integer.parseInt(st.nextToken());\r\n			map[r][c].add(new Ball(m,s,d));\r\n			Ans += m;\r\n		}\r\n		\r\n		int cnt = 0;\r\n		while(cnt < K) {\r\n			move(); //모든 볼 이동\r\n			cnt++;\r\n		}\r\n		System.out.println(Ans);\r\n	}\r\n\r\n	private static void move() {\r\n		List<Ball> tmpList = new ArrayList<>();\r\n		\r\n		//모든 볼 이동\r\n		for(int i=1; i<=N; i++) {\r\n			for(int j=1; j<=N; j++) {\r\n				if(map[i][j].size()>=1) {\r\n					for(int s=0; s<map[i][j].size(); s++) {\r\n						Ball b = map[i][j].get(s);\r\n						\r\n						//속력만큼 이동\r\n						int nx = (i + di[b.d]*b.s) % N; \r\n						int ny = (j + dj[b.d]*b.s) % N;\r\n						\r\n						//다시하기\r\n						if(nx > N) nx = nx % N;\r\n						else if(nx < 1) nx = N - (Math.abs(nx) % N);\r\n						\r\n						if(ny > N) ny = ny % N;\r\n						else if(ny < 1) ny = N - (Math.abs(ny) % N); 	\r\n						tmpList.add(new Ball(nx, ny, b.m, b.s, b.d));\r\n					}\r\n					map[i][j].clear(); //비워주기\r\n				}\r\n			}\r\n		}\r\n		\r\n		//실제 이동\r\n		for(Ball b : tmpList) {\r\n			map[b.x][b.y].add(b);\r\n		}\r\n		\r\n		//2개 이상인 곳 찾기\r\n		for(int i=1; i<=N; i++) {\r\n			for(int j=1; j<=N; j++) {\r\n				if(map[i][j].size() >= 2) { //하나로 합치기\r\n					int new_m = 0;\r\n					int new_s = 0;\r\n					\r\n					int even = 0;\r\n					int odd = 0;\r\n					for(Ball b : map[i][j]) {\r\n						new_m += b.m;\r\n						new_s += b.s;\r\n						\r\n						if(b.d % 2 == 0) even++;\r\n						else odd++;\r\n					}\r\n					Ans -= new_m;\r\n					new_m /= 5;\r\n					new_s /= map[i][j].size();\r\n					\r\n					map[i][j].clear();\r\n					\r\n					if(new_m == 0) continue;\r\n					Ans += new_m * 4;\r\n					\r\n					if(even == 0 || odd == 0) { //모두 홀수 or 짝수\r\n						int[] dList = {0,2,4,6};\r\n						for(int d=0; d<4; d++) map[i][j].add(new Ball(new_m, new_s, dList[d]));\r\n					}else {\r\n						int[] dList = {1,3,5,7};\r\n						for(int d=0; d<4; d++) map[i][j].add(new Ball(new_m, new_s, dList[d]));\r\n					}	\r\n				}\r\n			}\r\n		}\r\n	}\r\n }','2021-05-20 07:25:32.333000','java','2184192kB','0.04s',37,'dovvn',1,'성공'),(39,'import java.util.Scanner;\r\n\r\npublic class Main { \r\n\r\n   public static void main(String[] args) {\r\n      // TODO Auto-generated method stub\r\n	 int a=0;\r\n	 int b=1;\r\n	 int c=0;\r\n	\r\n   Scanner sc = new Scanner(System.in);\r\n   		int cnt=sc.nextInt();\r\n   		if(cnt==1) {\r\n   			System.out.println(1);\r\n   		}else {\r\n   		for(int i=1; i<cnt; i++) {\r\n   			c=a+b;\r\n   			a=b;\r\n   			b=c;\r\n   		}\r\n   		System.out.println(c);\r\n   		}\r\n   	}\r\n\r\n}','2021-05-20 07:27:19.761000','java','2184192kB','0.07s',38,'dovvn',1,'성공'),(40,'#include<iostream>\r\n \r\n#define endl \"\\n\"\r\n#define MAX 1001\r\nusing namespace std;\r\n \r\nint N;\r\nint Arr[MAX];\r\nint DP[MAX];\r\n \r\nvoid Input()\r\n{\r\n    cin >> N;\r\n    for (int i = 1; i <= N; i++)\r\n    {\r\n        cin >> Arr[i];\r\n    }\r\n}\r\n \r\nvoid Solution()\r\n{\r\n    for (int i = 1; i <= N; i++)\r\n    {\r\n        DP[i] = 1;\r\n        for (int j = 1; j <= i; j++)\r\n        {\r\n            if (Arr[i] < Arr[j] && DP[j] + 1 > DP[i])\r\n            {\r\n                DP[i] = DP[j] + 1;\r\n            }\r\n        }\r\n    }\r\n \r\n    int Max = 0;\r\n    for (int i = 1; i <= N; i++)\r\n    {\r\n        if (DP[i] > Max)\r\n        {\r\n            Max = DP[i];\r\n        }    \r\n    }\r\n    cout << Max << endl;\r\n}\r\n \r\nvoid Solve()\r\n{\r\n    Input();\r\n    Solution();\r\n}\r\n \r\nint main(void)\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n \r\n    //freopen(\"Input.txt\", \"r\", stdin);\r\n    Solve();\r\n \r\n    return 0;\r\n}','2021-05-20 07:40:26.126000','cpp','15240kB','0s',39,'dovvn',1,'성공'),(41,'#include <iostream>\r\nint main(void){\r\n    int num, sum = 0, remainderArr[42] = {0,};\r\n    for(int i = 0; i < 10; i++){\r\n        std::cin>>num;\r\n        if(!remainderArr[num % 42]++)\r\n            sum++;\r\n    }\r\n    std::cout<<sum;\r\n}','2021-05-19 23:33:22.198000','cpp','15232kB','0s',32,'dovvn',1,'실패'),(42,'#include <iostream>\r\nint main(void){\r\n    int num, sum = 0, remainderArr[42] = {0,};\r\n    for(int i = 0; i < 10; i++){\r\n        std::cin>>num;\r\n        if(!remainderArr[num % 42]++)\r\n            sum++;\r\n    }\r\n    std::cout<<sum;\r\n}','2021-05-19 23:33:50.831000','cpp','15232kB','0s',32,'dovvn',1,'실패'),(43,'#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n	int num;\r\n	int rm[42] = { 0 };\r\n	int count = 0;\r\n\r\n	for (int i = 0; i < 10; i++) {\r\n		cin >> num;\r\n		rm[num % 42]++;\r\n	}\r\n\r\n	for (int i = 0; i < 42; i++) {\r\n		if (rm[i] != 0)\r\n			count++;\r\n	}\r\n	cout << count << endl;\r\n}','2021-05-19 23:34:43.844000','cpp','15232kB','0s',32,'dovvn',1,'실패'),(44,'a,b,c= map(int, input().split())\r\nprint((a+b)%c)\r\nprint((a%c + b%c)%c)\r\nprint((a*b)%c)\r\nprint((a%c * b%c)%c)','2021-05-19 23:36:08.314000','python','27632kB','0.02s',32,'dovvn',1,'성공'),(45,'import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n	static int N,M,K;\r\n	static List<Ball>[][] map;\r\n	static int[] di = {-1, -1, 0, 1, 1, 1, 0, -1}; //01234567\r\n	static int[] dj = {0, 1, 1, 1, 0, -1, -1, -1};\r\n	static int Ans; //남은 질량합\r\n	\r\n	static class Ball{\r\n		int x, y;\r\n		int m,s,d;\r\n		\r\n		public Ball(int m, int s, int d) {\r\n			this.m = m;\r\n			this.s = s;\r\n			this.d = d;\r\n		}\r\n		\r\n		public Ball(int x, int y, int m, int s, int d) {\r\n			this.x = x;\r\n			this.y = y;\r\n			this.m = m;\r\n			this.s = s;\r\n			this.d = d;\r\n		}\r\n	}\r\n	\r\n	public static void main(String[] args) throws IOException {\r\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st = new StringTokenizer(br.readLine());\r\n		N = Integer.parseInt(st.nextToken());\r\n		M = Integer.parseInt(st.nextToken());\r\n		K = Integer.parseInt(st.nextToken());\r\n		\r\n		map = new ArrayList[N+1][N+1];\r\n		\r\n		for(int i=1; i<=N; i++) {\r\n			for(int j=1; j<=N; j++) {\r\n				map[i][j] = new ArrayList<>();\r\n			}\r\n		}\r\n		\r\n		for(int i=0; i<M; i++) {\r\n			st = new StringTokenizer(br.readLine());\r\n			int r = Integer.parseInt(st.nextToken());\r\n			int c = Integer.parseInt(st.nextToken());\r\n			int m = Integer.parseInt(st.nextToken());\r\n			int s = Integer.parseInt(st.nextToken());\r\n			int d = Integer.parseInt(st.nextToken());\r\n			map[r][c].add(new Ball(m,s,d));\r\n			Ans += m;\r\n		}\r\n		\r\n		int cnt = 0;\r\n		while(cnt < K) {\r\n			move(); //모든 볼 이동\r\n			cnt++;\r\n		}\r\n		System.out.println(Ans);\r\n	}\r\n\r\n	private static void move() {\r\n		List<Ball> tmpList = new ArrayList<>();\r\n		\r\n		//모든 볼 이동\r\n		for(int i=1; i<=N; i++) {\r\n			for(int j=1; j<=N; j++) {\r\n				if(map[i][j].size()>=1) {\r\n					for(int s=0; s<map[i][j].size(); s++) {\r\n						Ball b = map[i][j].get(s);\r\n						\r\n						//속력만큼 이동\r\n						int nx = (i + di[b.d]*b.s) % N; \r\n						int ny = (j + dj[b.d]*b.s) % N;\r\n						\r\n						//다시하기\r\n						if(nx > N) nx = nx % N;\r\n						else if(nx < 1) nx = N - (Math.abs(nx) % N);\r\n						\r\n						if(ny > N) ny = ny % N;\r\n						else if(ny < 1) ny = N - (Math.abs(ny) % N); 	\r\n						tmpList.add(new Ball(nx, ny, b.m, b.s, b.d));\r\n					}\r\n					map[i][j].clear(); //비워주기\r\n				}\r\n			}\r\n		}\r\n		\r\n		//실제 이동\r\n		for(Ball b : tmpList) {\r\n			map[b.x][b.y].add(b);\r\n		}\r\n		\r\n		//2개 이상인 곳 찾기\r\n		for(int i=1; i<=N; i++) {\r\n			for(int j=1; j<=N; j++) {\r\n				if(map[i][j].size() >= 2) { //하나로 합치기\r\n					int new_m = 0;\r\n					int new_s = 0;\r\n					\r\n					int even = 0;\r\n					int odd = 0;\r\n					for(Ball b : map[i][j]) {\r\n						new_m += b.m;\r\n						new_s += b.s;\r\n						\r\n						if(b.d % 2 == 0) even++;\r\n						else odd++;\r\n					}\r\n					Ans -= new_m;\r\n					new_m /= 5;\r\n					new_s /= map[i][j].size();\r\n					\r\n					map[i][j].clear();\r\n					\r\n					if(new_m == 0) continue;\r\n					Ans += new_m * 4;\r\n					\r\n					if(even == 0 || odd == 0) { //모두 홀수 or 짝수\r\n						int[] dList = {0,2,4,6};\r\n						for(int d=0; d<4; d++) map[i][j].add(new Ball(new_m, new_s, dList[d]));\r\n					}else {\r\n						int[] dList = {1,3,5,7};\r\n						for(int d=0; d<4; d++) map[i][j].add(new Ball(new_m, new_s, dList[d]));\r\n					}	\r\n				}\r\n			}\r\n		}\r\n	}\r\n }','2021-05-20 08:20:01.556000','java','2184192kB','0.04s',37,'hoyeon',1,'성공'),(46,'from sys import stdin\r\nfrom collections import deque\r\n\r\ninput = stdin.readline\r\n\r\nn, m = map(int, input().split())\r\nboard = [list(input().strip()) for _ in range(n)]\r\nvisited = [[[[False]*m for _ in range(n)] for _ in range(m)] for _ in range(n)]\r\ndx, dy = (-1, 0, 1, 0), (0, 1, 0, -1)\r\nq = deque()\r\n\r\ndef init():\r\n    rx, ry, bx, by = [0] * 4 # 초기화 0, 0, 0, 0\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if board[i][j] == \'R\': # board에 빨간 구슬이라면 좌표 값 저장\r\n                rx, ry = i, j\r\n            elif board[i][j] == \'B\': # board에 파란 구슬이라면 좌표 값 저장\r\n                bx, by = i, j\r\n    q.append((rx, ry, bx, by, 1)) # 위치 정보와 depth\r\n    visited[rx][ry][bx][by] = True\r\n    \r\ndef move(x, y, dx, dy):\r\n    count = 0 # 이동한 칸 수 \r\n    # 다음 이동이 벽이거나 구멍이 아닐 때까지\r\n    while board[x+dx][y+dy] != \'#\' and board[x][y] != \'O\':\r\n        x += dx\r\n        y += dy\r\n        count += 1\r\n    return x, y, count\r\n\r\n\r\ndef bfs():\r\n    init()\r\n    while q: # BFS -> queue, while\r\n        rx, ry, bx, by, depth = q.popleft() # FIFO\r\n        if depth > 10: # 10 이하여야 한다.\r\n            break\r\n        for i in range(len(dx)): # 4방향으로 시도한다.\r\n            next_rx, next_ry, r_count = move(rx, ry, dx[i], dy[i]) # RED\r\n            next_bx, next_by, b_count = move(bx, by, dx[i], dy[i]) # BLUE\r\n                        \r\n            if board[next_bx][next_by] == \'O\': # 파란 구슬이 구멍에 떨어지지 않으면(실패 X)\r\n                continue\r\n            if board[next_rx][next_ry] == \'O\': # 빨간 구슬이 구멍에 떨어진다면(성공)\r\n                print(depth)\r\n                return\r\n            if next_rx == next_bx and next_ry == next_by : # 빨간 구슬과 파란 구슬이 동시에 같은 칸에 있을 수 없다.\r\n                if r_count > b_count: # 이동 거리가 많은 구슬을 한칸 뒤로\r\n                    next_rx -= dx[i]\r\n                    next_ry -= dy[i]\r\n                else:\r\n                    next_bx -= dx[i]\r\n                    next_by -= dy[i]\r\n            # BFS 탐색을 마치고, 방문 여부 확인\r\n            if not visited[next_rx][next_ry][next_bx][next_by]:\r\n                visited[next_rx][next_ry][next_bx][next_by] = True\r\n                q.append((next_rx, next_ry, next_bx, next_by, depth +1))\r\n    print(-1) # 실패 \r\n\r\nbfs()','2021-05-20 08:20:31.272000','python','27712kB','0.01s',30,'dovvn',1,'성공'),(47,'import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n	static int N,M,K;\r\n	static List<Ball>[][] map;\r\n	static int[] di = {-1, -1, 0, 1, 1, 1, 0, -1}; //01234567\r\n	static int[] dj = {0, 1, 1, 1, 0, -1, -1, -1};\r\n	static int Ans; //남은 질량합\r\n	\r\n	static class Ball{\r\n		int x, y;\r\n		int m,s,d;\r\n		\r\n		public Ball(int m, int s, int d) {\r\n			this.m = m;\r\n			this.s = s;\r\n			this.d = d;\r\n		}\r\n		\r\n		public Ball(int x, int y, int m, int s, int d) {\r\n			this.x = x;\r\n			this.y = y;\r\n			this.m = m;\r\n			this.s = s;\r\n			this.d = d;\r\n		}\r\n	}\r\n	\r\n	public static void main(String[] args) throws IOException {\r\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st = new StringTokenizer(br.readLine());\r\n		N = Integer.parseInt(st.nextToken());\r\n		M = Integer.parseInt(st.nextToken());\r\n		K = Integer.parseInt(st.nextToken());\r\n		\r\n		map = new ArrayList[N+1][N+1];\r\n		\r\n		for(int i=1; i<=N; i++) {\r\n			for(int j=1; j<=N; j++) {\r\n				map[i][j] = new ArrayList<>();\r\n			}\r\n		}\r\n		\r\n		for(int i=0; i<M; i++) {\r\n			st = new StringTokenizer(br.readLine());\r\n			int r = Integer.parseInt(st.nextToken());\r\n			int c = Integer.parseInt(st.nextToken());\r\n			int m = Integer.parseInt(st.nextToken());\r\n			int s = Integer.parseInt(st.nextToken());\r\n			int d = Integer.parseInt(st.nextToken());\r\n			map[r][c].add(new Ball(m,s,d));\r\n			Ans += m;\r\n		}\r\n		\r\n		int cnt = 0;\r\n		while(cnt < K) {\r\n			move(); //모든 볼 이동\r\n			cnt++;\r\n		}\r\n		System.out.println(Ans);\r\n	}\r\n\r\n	private static void move() {\r\n		List<Ball> tmpList = new ArrayList<>();\r\n		\r\n		//모든 볼 이동\r\n		for(int i=1; i<=N; i++) {\r\n			for(int j=1; j<=N; j++) {\r\n				if(map[i][j].size()>=1) {\r\n					for(int s=0; s<map[i][j].size(); s++) {\r\n						Ball b = map[i][j].get(s);\r\n						\r\n						//속력만큼 이동\r\n						int nx = (i + di[b.d]*b.s) % N; \r\n						int ny = (j + dj[b.d]*b.s) % N;\r\n						\r\n						//다시하기\r\n						if(nx > N) nx = nx % N;\r\n						else if(nx < 1) nx = N - (Math.abs(nx) % N);\r\n						\r\n						if(ny > N) ny = ny % N;\r\n						else if(ny < 1) ny = N - (Math.abs(ny) % N); 	\r\n						tmpList.add(new Ball(nx, ny, b.m, b.s, b.d));\r\n					}\r\n					map[i][j].clear(); //비워주기\r\n				}\r\n			}\r\n		}\r\n		\r\n		//실제 이동\r\n		for(Ball b : tmpList) {\r\n			map[b.x][b.y].add(b);\r\n		}\r\n		\r\n		//2개 이상인 곳 찾기\r\n		for(int i=1; i<=N; i++) {\r\n			for(int j=1; j<=N; j++) {\r\n				if(map[i][j].size() >= 2) { //하나로 합치기\r\n					int new_m = 0;\r\n					int new_s = 0;\r\n					\r\n					int even = 0;\r\n					int odd = 0;\r\n					for(Ball b : map[i][j]) {\r\n						new_m += b.m;\r\n						new_s += b.s;\r\n						\r\n						if(b.d % 2 == 0) even++;\r\n						else odd++;\r\n					}\r\n					Ans -= new_m;\r\n					new_m /= 5;\r\n					new_s /= map[i][j].size();\r\n					\r\n					map[i][j].clear();\r\n					\r\n					if(new_m == 0) continue;\r\n					Ans += new_m * 4;\r\n					\r\n					if(even == 0 || odd == 0) { //모두 홀수 or 짝수\r\n						int[] dList = {0,2,4,6};\r\n						for(int d=0; d<4; d++) map[i][j].add(new Ball(new_m, new_s, dList[d]));\r\n					}else {\r\n						int[] dList = {1,3,5,7};\r\n						for(int d=0; d<4; d++) map[i][j].add(new Ball(new_m, new_s, dList[d]));\r\n					}	\r\n				}\r\n			}\r\n		}\r\n	}\r\n }','2021-05-20 10:00:22.016000','java','2184192kB','0.07s',37,'hoyeon',1,'성공'),(48,'a=input()\r\nprint(\'가나다\')','2021-05-20 12:03:00.507000','python','27712kB','0.01s',21,'jihyeong',54,'성공'),(49,'import java.util.Scanner;\r\n\r\npublic class Main { \r\n\r\n   public static void main(String[] args) {\r\n      // TODO Auto-generated method stub\r\n	 int a=0;\r\n	 int b=1;\r\n	 int c=0;\r\n	\r\n   Scanner sc = new Scanner(System.in);\r\n   		int cnt=sc.nextInt();\r\n   		if(cnt==1) {\r\n   			System.out.println(1);\r\n   		}else {\r\n   		for(int i=1; i<cnt; i++) {\r\n   			c=a+b;\r\n   			a=b;\r\n   			b=c;\r\n   		}\r\n   		System.out.println(c);\r\n   		}\r\n   	}\r\n\r\n}','2021-05-20 12:06:30.906000','java','2184192kB','0.07s',38,'hoyeon',1,'성공'),(50,'import java.util.Scanner;\r\n\r\npublic class Main { \r\n\r\n   public static void main(String[] args) {\r\n      // TODO Auto-generated method stub\r\n	 int a=0;\r\n	 int b=1;\r\n	 int c=0;\r\n	\r\n   Scanner sc = new Scanner(System.in);\r\n   		int cnt=sc.nextInt();\r\n   		if(cnt==1) {\r\n   			System.out.println(1);\r\n   		}else {\r\n   		for(int i=1; i<cnt; i++) {\r\n   			c=a+b;\r\n   			a=b;\r\n   			b=c;\r\n   		}\r\n   		System.out.println(c);\r\n   		}\r\n   	}\r\n\r\n}','2021-05-20 12:06:34.929000','java','2184192kB','0.08s',38,'hoyeon',1,'성공'),(51,'a=input()\r\nprint(\'가나다\')','2021-05-20 21:29:00.417000','python','27712kB','0.02s',21,'jihyeong',54,'성공'),(52,'a=input()\r\nprint(\'가나다\')','2021-05-20 21:42:31.048000','python','27712kB','0.01s',21,'jihyeong',54,'성공'),(53,'a=input()\r\nprint(\'가나다\')','2021-05-20 21:49:33.622000','python','27712kB','0.02s',21,'jihyeong',54,'성공'),(54,'a=input()\r\nprint(\'가나다\')','2021-05-20 21:50:25.031000','python','27640kB','0.02s',21,'jihyeong',54,'성공'),(55,'a=input()\r\nprint(\'가나다\')','2021-05-20 21:51:21.814000','python','27712kB','0.02s',21,'jihyeong',54,'성공'),(56,'a=input()\r\nprint(\'가나다\')','2021-05-20 21:53:49.162000','python','27712kB','0.02s',21,'jihyeong',54,'성공'),(57,'a=input()\r\nprint(\'가나다\')','2021-05-20 21:53:49.175000','python','27712kB','0.02s',21,'jihyeong',54,'성공'),(58,'a=input()\r\nprint(\'가나다\')','2021-05-20 21:54:50.299000','python','27712kB','0.02s',21,'jihyeong',54,'성공'),(59,'a=input()\r\nprint(\'가나다\')','2021-05-20 21:56:08.396000','python','27712kB','0.02s',21,'jihyeong',54,'성공'),(60,'print(\'가나다\')','2021-05-20 17:35:05.183000','python','27712kB','0.02s',21,'jihyeong',54,'성공'),(61,'# 벽 또는 자기자신의 몸과 부딪히면 게임이 끝\r\nimport sys\r\ninput = sys.stdin.readline\r\n\r\n\r\ndef change_direction(move, count, direction):\r\n    if count in move.keys():\r\n        if direction == 0:\r\n            if move[count] == \'L\':\r\n                direction = 2\r\n            else:\r\n                direction = 3\r\n        elif direction == 1:\r\n            if move[count] == \'L\':\r\n                direction = 3\r\n            else:\r\n                direction = 2\r\n        elif direction == 2:\r\n            if move[count] == \'L\':\r\n                direction = 1\r\n            else:\r\n                direction = 0\r\n        elif direction == 3:\r\n            if move[count] == \'L\':\r\n                direction = 0\r\n            else:\r\n                direction = 1\r\n    return direction\r\n\r\n\r\n\r\n\r\n\r\nn = int(input())\r\narr = [[0] * n for _ in range(n)]\r\n\r\nk = int(input())\r\napples = []\r\nfor _ in range(k):\r\n    x, y = map(int, input().split())\r\n    arr[x-1][y-1] = 1\r\n\r\nl = int(input())\r\n\r\nmove = {}\r\n\r\nfor _ in range(l):\r\n    x, c = input().split()\r\n    x = int(x)\r\n    move[x] = c\r\n\r\n\r\n# 상 하 좌 우\r\ndx = [-1, 1, 0, 0]\r\ndy = [0, 0, -1, 1]\r\n\r\n\r\nsnake = [(0, 0)]\r\n\r\ndirection = 3\r\n\r\ncount = 1\r\nwhile True:\r\n    hx, hy = snake[0]\r\n    \r\n    nx = hx + dx[direction]\r\n    ny = hy + dy[direction]\r\n    \r\n    if (nx, ny) in snake[1:] or (nx < 0 or ny < 0 or nx >= n or ny >= n):\r\n        break\r\n\r\n    tx, ty = snake[-1]\r\n\r\n    # move\r\n    if len(snake) > 1:\r\n        for idx in range(len(snake)-1, 0, -1):\r\n            snake[idx] = snake[idx - 1]\r\n\r\n    # apple\r\n    if arr[nx][ny] == 1:\r\n        arr[nx][ny] = 0\r\n        snake.append((tx, ty))\r\n    snake[0] = (nx, ny)\r\n\r\n    direction = change_direction(move, count, direction)\r\n\r\n\r\n    count += 1\r\n\r\nprint(count)\r\n','2021-05-20 17:57:56.904000','python','27616kB','0.01s',29,'dovvn',1,'성공'),(62,'# 벽 또는 자기자신의 몸과 부딪히면 게임이 끝\r\nimport sys\r\ninput = sys.stdin.readline\r\n\r\n\r\ndef change_direction(move, count, direction):\r\n    if count in move.keys():\r\n        if direction == 0:\r\n            if move[count] == \'L\':\r\n                direction = 2\r\n            else:\r\n                direction = 3\r\n        elif direction == 1:\r\n            if move[count] == \'L\':\r\n                direction = 3\r\n            else:\r\n                direction = 2\r\n        elif direction == 2:\r\n            if move[count] == \'L\':\r\n                direction = 1\r\n            else:\r\n                direction = 0\r\n        elif direction == 3:\r\n            if move[count] == \'L\':\r\n                direction = 0\r\n            else:\r\n                direction = 1\r\n    return direction\r\n\r\n\r\n\r\n\r\n\r\nn = int(input())\r\narr = [[0] * n for _ in range(n)]\r\n\r\nk = int(input())\r\napples = []\r\nfor _ in range(k):\r\n    x, y = map(int, input().split())\r\n    arr[x-1][y-1] = 1\r\n\r\nl = int(input())\r\n\r\nmove = {}\r\n\r\nfor _ in range(l):\r\n    x, c = input().split()\r\n    x = int(x)\r\n    move[x] = c\r\n\r\n\r\n# 상 하 좌 우\r\ndx = [-1, 1, 0, 0]\r\ndy = [0, 0, -1, 1]\r\n\r\n\r\nsnake = [(0, 0)]\r\n\r\ndirection = 3\r\n\r\ncount = 1\r\nwhile True:\r\n    hx, hy = snake[0]\r\n    \r\n    nx = hx + dx[direction]\r\n    ny = hy + dy[direction]\r\n    \r\n    if (nx, ny) in snake[1:] or (nx < 0 or ny < 0 or nx >= n or ny >= n):\r\n        break\r\n\r\n    tx, ty = snake[-1]\r\n\r\n    # move\r\n    if len(snake) > 1:\r\n        for idx in range(len(snake)-1, 0, -1):\r\n            snake[idx] = snake[idx - 1]\r\n\r\n    # apple\r\n    if arr[nx][ny] == 1:\r\n        arr[nx][ny] = 0\r\n        snake.append((tx, ty))\r\n    snake[0] = (nx, ny)\r\n\r\n    direction = change_direction(move, count, direction)\r\n\r\n\r\n    count += 1\r\n\r\nprint(count)\r\n','2021-05-20 18:22:16.796000','python','27704kB','0.02s',29,'admin',1,'성공'),(63,'print(\'a\')','2021-05-21 06:27:05.930000','python','27704kB','0.02s',21,'jihyeong',54,'실패'),(64,'print(\'가나다\')','2021-05-21 06:30:31.302000','python','27712kB','0.02s',21,'jihyeong',54,'성공'),(65,'N = int(input())\r\nnumbers = list(map(int, input().split()))\r\n\r\ndp = [1] * N\r\n\r\nfor i in range(1, N):\r\n    for j in range(i):\r\n        if numbers[j] > numbers[i]:\r\n            dp[i] = max(dp[i], dp[j] + 1)\r\n\r\nprint(max(dp))','2021-05-20 21:31:49.622000','python','27712kB','0.01s',39,'admin',1,'성공'),(66,'#include<iostream>\r\n#include<vector>\r\n#include<deque>\r\n \r\n#define endl \"\\n\"\r\n#define MAX 100\r\nusing namespace std;\r\n \r\nint N, K, L;\r\nint MAP[MAX][MAX];\r\n \r\nint dx[] = { 0, 0, 1, -1 };\r\nint dy[] = { 1, -1, 0, 0 };\r\n \r\nvector<pair<int, char>> V;\r\n \r\nvoid Print()\r\n{\r\n    for (int i = 0; i < N; i++)\r\n    {\r\n        for (int j = 0; j < N; j++)\r\n        {\r\n            cout << MAP[i][j] << \" \";\r\n        }\r\n        cout << endl;\r\n    }\r\n}\r\nvoid Input()\r\n{\r\n    cin >> N >> K;\r\n    for (int i = 0; i < K; i++)\r\n    {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        x = x - 1;\r\n        y = y - 1;\r\n        MAP[x][y] = 1;    // 사과 = 1로 표시\r\n    }\r\n    cin >> L;\r\n    for (int i = 0; i < L; i++)\r\n    {\r\n        int a; \r\n        char b;\r\n        cin >> a >> b;\r\n        V.push_back(make_pair(a, b));\r\n    }\r\n}\r\n \r\nint Turn_Direction(int d, char c)\r\n{\r\n    if (c == \'L\')\r\n    {\r\n        if (d == 0) return 3;\r\n        else if (d == 1) return 2;\r\n        else if (d == 2) return 0;\r\n        else if (d == 3) return 1;\r\n    }\r\n    else if (c == \'D\')\r\n    {\r\n        if (d == 0) return 2;\r\n        else if (d == 1) return 3;\r\n        else if (d == 2) return 1;\r\n        else if (d == 3) return 0;\r\n    }\r\n}\r\n \r\nvoid Solution()\r\n{\r\n    deque<pair<int, int>> Q;\r\n    int x = 0;\r\n    int y = 0;\r\n    int d = 0;\r\n    int Time = 0;\r\n    int Idx = 0;\r\n    Q.push_back(make_pair(x, y));\r\n    MAP[x][y] = 2;\r\n \r\n    while (1)\r\n    {\r\n        Time++;\r\n \r\n        int nx = x + dx[d];\r\n        int ny = y + dy[d];\r\n        \r\n        if ((nx < 0 || ny < 0 || nx >= N || ny >= N) || MAP[nx][ny] == 2)\r\n        {\r\n            break;\r\n        }\r\n        else if (MAP[nx][ny] == 0)\r\n        {\r\n            MAP[nx][ny] = 2;\r\n            MAP[Q.back().first][Q.back().second] = 0;\r\n            Q.pop_back();\r\n            Q.push_front(make_pair(nx, ny));\r\n        }\r\n        else if (MAP[nx][ny] == 1)\r\n        {\r\n            MAP[nx][ny] = 2;\r\n            Q.push_front(make_pair(nx, ny));\r\n        }\r\n        \r\n \r\n        if (Idx < V.size())\r\n        {\r\n            if (Time == V[Idx].first)\r\n            {\r\n                if (V[Idx].second == \'L\') d = Turn_Direction(d, \'L\');\r\n                else if (V[Idx].second == \'D\') d = Turn_Direction(d, \'D\');\r\n                Idx++;\r\n            }\r\n        }\r\n        x = nx;\r\n        y = ny;\r\n    }\r\n    cout << Time << endl;\r\n}\r\n \r\nvoid Solve()\r\n{\r\n    Input();\r\n    Solution();\r\n}\r\n \r\nint main(void)\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n \r\n    //freopen(\"Input.txt\", \"r\", stdin);\r\n    Solve();\r\n \r\n    return 0;\r\n}','2021-05-20 21:32:58.527000','cpp','15272kB','0s',29,'admin',1,'성공'),(67,'print(\'가나다\')','2021-05-20 21:46:16.635000','python','27704kB','0.02s',21,'jihyeong',54,'성공'),(68,'print(\'가나다\')','2021-05-20 21:46:54.625000','python','27712kB','0.02s',21,'jihyeong',54,'성공');
/*!40000 ALTER TABLE `code` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `comment` (
  `com_id` int NOT NULL AUTO_INCREMENT,
  `com_content` text NOT NULL,
  `com_date` datetime(6) NOT NULL,
  `qna_id` int DEFAULT NULL,
  `user_id` varchar(255) DEFAULT NULL,
  `room_id` int DEFAULT NULL,
  PRIMARY KEY (`com_id`),
  KEY `FK8kcum44fvpupyw6f5baccx25c` (`user_id`),
  KEY `FKdmgl792nu5ndw17m8gyu8eiu5` (`qna_id`),
  CONSTRAINT `FK8kcum44fvpupyw6f5baccx25c` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FKdmgl792nu5ndw17m8gyu8eiu5` FOREIGN KEY (`qna_id`) REFERENCES `qna` (`qna_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (21,'<p>자바 API에서 Compareable을 찾으면 됩니다.</p><p>그리고 인터페이스의 모든 메소드는 추상 메소드이므로, 상속받는 클래스는 모든 메소드를 구현해야 합니다.</p><p>​</p><p>https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Comparable.html</p>','2021-05-20 03:54:42.547000',25,'hoyeon',NULL),(22,'<p>책말고 생활코딩 사이트 강의도 괜찮습니다.</p><p>동영상으로 빠르게 파악 가능하니까요.</p><p><br><br></p><p>https://opentutorials.org/course/1223&nbsp;</p><p>웹에 관한 정보는 좀 더 찾으셔야 겠지만. 기본 문법은 생활코딩 사이트만 으로는 괜찮습니다.</p>','2021-05-20 03:55:55.886000',26,'hoyeon',NULL),(23,'<p>자바의 정석 추천이요~~ 기본서로 이거만큼 좋은게 없네요</p>','2021-05-20 04:08:23.195000',26,'hyeji',NULL),(24,'<img src=\"http://image.yes24.com/Goods/43755519/M\" contenteditable=\"false\" draggable=\"true\" class=\"\"><p>윤성우의 열혈 Java 프로그래밍 독학하기 좋아요~~??????</p>','2021-05-20 04:10:54.511000',26,'jihyeong',NULL),(26,'<p>애초에 설계가 좀 잘못된거 같은데여^^;</p><p>금액을 추가하시겠습니까? 하는 순간 continue구문을 통해서 i값이 1이올라가게 됩니다.</p><p>그래서 실제로 콜라는 drink[1]에 들어가게되고요.</p><p>근데 아래에서 다시뽑을때 0부터 돌리니까 null이 나오게 되는거죠</p><p>뽑은만큼 전역변수로 count를올린거를 비교대입하셔요 홧팅!^^7</p><p>​</p>','2021-05-20 04:28:23.229000',28,'dovvn',NULL),(27,'<p>n은 문자열로 남기고 for문으로 문자열을 곱해준 뒤 int로 바꿔서 계산하도록 했어요</p><p>우선 반복 횟수는 우선 10번만 하도록 했어요</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-variable\">n</span>, <span class=\"hljs-variable\">k</span> = <span class=\"hljs-function hljs-title\">input</span><span class=\"hljs-function\">().split()</span>\n\n<span class=\"hljs-variable\">k</span> = <span class=\"hljs-function hljs-title\">int</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-variable\">k</span><span class=\"hljs-function\">)</span>\n<span class=\"hljs-variable\">iter_max</span> = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-variable\">i</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-variable\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-variable hljs-keyword\">in</span> <span class=\"hljs-function hljs-title\">range</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-number\">1</span><span class=\"hljs-function\">, (</span><span class=\"hljs-function hljs-variable\">iter_max</span><span class=\"hljs-function\"> + </span><span class=\"hljs-function hljs-number\">1</span><span class=\"hljs-function\">)):  # </span><span class=\"hljs-function hljs-number\">11</span><span class=\"hljs-function\">까지\n    </span><span class=\"hljs-function hljs-variable\">x</span><span class=\"hljs-function\"> = </span><span class=\"hljs-function hljs-title\">int</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-variable\">n</span><span class=\"hljs-function\"> * </span><span class=\"hljs-function hljs-variable\">i</span><span class=\"hljs-function\">)</span>\n    <span class=\"hljs-function hljs-title\">print</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-string\">\"{} % {} \"</span><span class=\"hljs-function\">.format(</span><span class=\"hljs-function hljs-variable\">x</span><span class=\"hljs-function\">, </span><span class=\"hljs-function hljs-variable\">k</span><span class=\"hljs-function\">), </span><span class=\"hljs-function hljs-variable\">end</span><span class=\"hljs-function\">=</span><span class=\"hljs-function hljs-string\">\'\'</span><span class=\"hljs-function\">)</span>\n    <span class=\"hljs-variable hljs-keyword\">if</span> <span class=\"hljs-variable\">x</span> % <span class=\"hljs-variable\">k</span> == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-function hljs-title\">print</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-string\">\"(true)\"</span><span class=\"hljs-function\">)</span>\n        <span class=\"hljs-variable\">break</span>\n    <span class=\"hljs-function hljs-title\">print</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-string\">\"(false)\"</span><span class=\"hljs-function\">)</span>\n\n<span class=\"hljs-variable hljs-keyword\">if</span> <span class=\"hljs-variable\">i</span> == <span class=\"hljs-variable\">iter_max</span>:  # <span class=\"hljs-number\">11</span>까지면 <span class=\"hljs-number\">10</span>(<span class=\"hljs-variable\">range</span> 최고 값 -<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-function hljs-title\">print</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-string\">\"-1\"</span><span class=\"hljs-function\">)</span></code></pre></div>','2021-05-20 04:29:14.972000',27,'dovvn',NULL),(28,'<p>목적이 뭔가요? 하고자 하시는게 뭔지 알아야 질문자님께 필요한 답변을 드릴 수 있는데...?</p><p>​</p><p>1. class B에서 public을 Public으로 쓰셨네요 대소문자 구분 해주셔야 합니다.</p><p>​</p><p>2. super(); 는 부모 클래스의 생성자를 호출한다는 뜻입니다.</p><p>즉 A(100); 을 실행하는 것이죠.</p><p>그런데 A클래스에는 정수값이 들어가는 생성자가 선언이 안되어 있어서 오류가 나는 것입니다.</p><p>이를 해결하려면 A클래스에 생성자를 선언하시거나,</p><p>B클래스에서 A(100); → A(); 로 수정하셔야 합니다.</p><p>​</p><p>3. C클래스의 new B(11); 도 마찬가지로 B클래스에는 정수값을 인수로 받는 생성자가 없기 때문에</p><p>B클래스에 B(int i){ } 생성자를 선언 하시거나,</p><p>C클래스에서 new B(11); → new B(); 로 수정하시면 됩니다.</p><p>​</p><p>또 궁금한점 있으시면 말씀 하세요~??</p>','2021-05-20 04:37:56.776000',35,'hoyeon',NULL),(29,'<p>헐 방금 푼건데!!!</p><p>코드랑 주석 달았는데 이해안가는거 있으면 또 물어보세욥</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">public void practice5<span class=\"hljs-literal\">()</span> {\n		Scanner scan = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Scanner(System.</span><span class=\"hljs-constructor hljs-params\">in</span><span class=\"hljs-constructor\">)</span>;\n		\n		<span class=\"hljs-module-access hljs-module hljs-identifier\">System</span><span class=\"hljs-module-access hljs-module\">.</span>out.print(<span class=\"hljs-string\">\"문자열 : \"</span>);\n		\n		<span class=\"hljs-comment\">//한줄 입력받음</span>\n		String str = scan.next<span class=\"hljs-constructor\">Line()</span>;\n	\n		<span class=\"hljs-module-access hljs-module hljs-identifier\">System</span><span class=\"hljs-module-access hljs-module\">.</span>out.print(<span class=\"hljs-string\">\"문자 : \"</span>);\n		\n		<span class=\"hljs-comment\">//한줄 입력받아서 첫번째 글자만 반환받음</span>\n		<span class=\"hljs-built_in\">char</span> ch = scan.next<span class=\"hljs-constructor\">Line()</span>.<span class=\"hljs-built_in\">char</span><span class=\"hljs-constructor\">At(0)</span>;\n		\n		<span class=\"hljs-module-access hljs-module hljs-identifier\">System</span><span class=\"hljs-module-access hljs-module\">.</span>out.printf(<span class=\"hljs-string\">\"%s에 %s가 존재하는 위치(인덱스) : \"</span>,str,ch);\n		\n		<span class=\"hljs-built_in\">int</span> index = <span class=\"hljs-number\">0</span>;\n		<span class=\"hljs-built_in\">int</span> cnt = <span class=\"hljs-number\">0</span>;\n		<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) {\n\n			<span class=\"hljs-comment\">//주어진 문자가 문자열의 어느 인덱스에 있는지 찾음</span>\n			index = str.index<span class=\"hljs-constructor\">Of(</span><span class=\"hljs-constructor hljs-params\">ch</span><span class=\"hljs-constructor\">, </span><span class=\"hljs-constructor hljs-params\">index</span><span class=\"hljs-constructor\">+1)</span>;\n			\n			<span class=\"hljs-comment\">//찾는 문자가 없으면 -1을 반환함.</span>\n			<span class=\"hljs-keyword\">if</span>(index<span class=\"hljs-operator\"> == </span>-<span class=\"hljs-number\">1</span>) break;\n			\n			<span class=\"hljs-comment\">//갯수 카운터</span>\n			cnt++;\n			\n			<span class=\"hljs-comment\">//인덱스 출력</span>\n			<span class=\"hljs-module-access hljs-module hljs-identifier\">System</span><span class=\"hljs-module-access hljs-module\">.</span>out.print(index+<span class=\"hljs-string\">\" \"</span>);\n			\n		}\n		<span class=\"hljs-module-access hljs-module hljs-identifier\">System</span><span class=\"hljs-module-access hljs-module\">.</span>out.println<span class=\"hljs-literal\">()</span>;\n		<span class=\"hljs-module-access hljs-module hljs-identifier\">System</span><span class=\"hljs-module-access hljs-module\">.</span>out.printf(<span class=\"hljs-string\">\"%s 개수 : %d%n\"</span>,ch,cnt);\n\n	}</code></pre></div><img src=\"https://kin-phinf.pstatic.net/20210302_231/1614694413149XsMbj_JPEG/%ED%99%94%EB%A9%B4_%EC%BA%A1%EC%B2%98_2021-03-02_231251.jpg?type=w750\" contenteditable=\"false\" draggable=\"true\"><p><br></p><p><br></p>','2021-05-20 04:49:31.553000',36,'hyeji',NULL),(32,'<p>댓글</p>','2021-05-20 04:50:45.431000',34,'jihyeong',NULL),(33,'<p>클래스 만들어서 실행해보시면 나올껍니다?<br>설명은 딱히 없는데 cnt로 갯수를 받은 후에 arr이라는 배열을 cnt만큼 생성하고 arr의 길이만큼<br>배열을 돌리면서 정수를 입력<br>마지막에 평균을 나눌 때 double로 한 이유는 int로 입력받았기 때문에 그냥 나누기를 하면<br>18이 나옵니다. double이나 float으로 바꿔야만 제대로 된 18.2가 나오네요..ㅎ</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">import java.util.Scanner<span class=\"hljs-comment\">;</span>\n\npublic class SumAvgArr {\n	public static void main(String<span class=\"hljs-section\">[]</span> args) {\n		Scanner <span class=\"hljs-attr\">sc</span> = new Scanner(System.in)<span class=\"hljs-comment\">;</span>\n		System.out.print(\"원소 수 입력 --&gt; \")<span class=\"hljs-comment\">;</span>\n		int <span class=\"hljs-attr\">cnt</span> = sc.nextInt()<span class=\"hljs-comment\">;</span>\n		int<span class=\"hljs-section\">[]</span> <span class=\"hljs-attr\">arr</span> = new int[cnt]<span class=\"hljs-comment\">;</span>\n		System.out.print(\"계산할 숫자 입력 --&gt; \")<span class=\"hljs-comment\">;</span>\n		int <span class=\"hljs-attr\">hap</span> = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;</span>\n		for (int <span class=\"hljs-attr\">i</span> = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">; i &lt; arr.length; i++) {</span>\n			arr<span class=\"hljs-section\">[i]</span> = sc.nextInt()<span class=\"hljs-comment\">;</span>\n			hap += arr<span class=\"hljs-section\">[i]</span><span class=\"hljs-comment\">;</span>\n		}\n		System.out.println(\"합: \" + hap)<span class=\"hljs-comment\">;</span>\n		System.out.println(\"평균: \" + ((double) hap / arr.length))<span class=\"hljs-comment\">;</span>\n	}\n}</code></pre></div><p><br></p><img src=\"https://kin-phinf.pstatic.net/20210330_264/1617068181950SkJFA_PNG/image.png?type=w750\" contenteditable=\"false\" draggable=\"true\"><p><br></p>','2021-05-20 04:55:23.952000',37,'dovvn',NULL),(34,'<h2>제목 댓글</h2>','2021-05-20 04:55:25.367000',34,'jihyeong',NULL),(35,'<div class=\"tableWrapper\"><table style=\"min-width: 75px;\"><colgroup><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p><br></p></th><th colspan=\"1\" rowspan=\"1\"><p><br></p></th><th colspan=\"1\" rowspan=\"1\"><p><br></p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p><br></p></td><td colspan=\"1\" rowspan=\"1\"><p><br></p></td><td colspan=\"1\" rowspan=\"1\"><p><br></p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p><br></p></td><td colspan=\"1\" rowspan=\"1\"><p><br></p></td><td colspan=\"1\" rowspan=\"1\"><p><br></p></td></tr></tbody></table></div><div data-v-00217756=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-00217756=\"\"><code data-v-00217756=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-selector-tag\">for</span> <span class=\"hljs-selector-tag\">i</span> <span class=\"hljs-selector-tag\">in</span> <span class=\"hljs-selector-tag\">range</span>(n):</code></pre></div>','2021-05-20 04:58:56.767000',34,'jihyeong',NULL),(36,'<p>저거 생성자 오버로딩이구여</p><p>모든 것에서 this.year = year; this.month = month;를 하는건 효율적이지 않으니 이미 대입하는게 있는 생성자를 호출해주는거라고 생각하세욥</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-keyword\">public</span> Day () {} <span class=\"hljs-comment\">// 기본 생성자</span>\n<span class=\"hljs-keyword\">public</span> Day (<span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">year</span>) { <span class=\"hljs-comment\">// int형 매개변수를 1개만 받는 오버로딩 된 생성자</span>\n    <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-built_in\">year</span> = <span class=\"hljs-built_in\">year</span>;\n}\n\n<span class=\"hljs-keyword\">public</span> Day (<span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">year</span>, <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">month</span>) { <span class=\"hljs-comment\">// int형 매개변수를 2개 받는 오버로딩 된 생성자</span>\n    <span class=\"hljs-keyword\">this</span> (<span class=\"hljs-built_in\">year</span>); <span class=\"hljs-comment\">// int형 매개변수를 1개 받는 생성자 호출</span>\n    <span class=\"hljs-comment\">// this.year = year; // 여기서 대입하기 보다는 이미 존재하는 생성자를 호출</span>\n    <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-built_in\">month</span> = <span class=\"hljs-built_in\">month</span>;\n}\n\n<span class=\"hljs-keyword\">public</span> Day (<span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">year</span>, <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">month</span>, <span class=\"hljs-built_in\">int</span> date) { <span class=\"hljs-comment\">// int형 매개변수 3개 받는 오버로딩 된 생성자</span>\n    <span class=\"hljs-keyword\">this</span> (<span class=\"hljs-built_in\">year</span>, <span class=\"hljs-built_in\">month</span>); <span class=\"hljs-comment\">// int형 매개변수를 2개 받는 생성자 호출</span>\n    <span class=\"hljs-keyword\">this</span>.date = date;\n}</code></pre></div>','2021-05-20 05:01:30.479000',40,'hyeji',NULL),(37,'<p>this()를 사용할 수 있는건 생성자들끼리니 참고하삼</p>','2021-05-20 05:02:06.708000',40,'hoyeon',NULL),(38,'<p>다우니님 혹시 남자친구 있으세요?</p>','2021-05-20 08:13:07.253000',40,'hoyeon',NULL);
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `guest_book`
--

DROP TABLE IF EXISTS `guest_book`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `guest_book` (
  `guest_id` int NOT NULL AUTO_INCREMENT,
  `visit_date` datetime NOT NULL,
  `room_id` int DEFAULT NULL,
  `user_id` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`guest_id`),
  KEY `FKjm4rclr3iol293yhd8a33aytx` (`room_id`) /*!80000 INVISIBLE */,
  KEY `index3` (`user_id`) /*!80000 INVISIBLE */
) ENGINE=InnoDB AUTO_INCREMENT=501 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `guest_book`
--

LOCK TABLES `guest_book` WRITE;
/*!40000 ALTER TABLE `guest_book` DISABLE KEYS */;
INSERT INTO `guest_book` VALUES (462,'2021-05-20 07:30:27',1,'jihyeong'),(476,'2021-05-20 18:48:40',1,'hoyeon'),(477,'2021-05-20 22:50:17',1,'dovvn'),(478,'2021-05-21 00:56:44',1,'hyeji'),(479,'2021-05-20 19:39:13',1,'admin'),(491,'2021-05-20 17:36:15',54,'hyeji'),(492,'2021-05-20 07:40:34',1,'knock'),(493,'2021-05-20 15:58:49',54,'admin'),(494,'2021-05-20 21:44:36',54,'jihyeong'),(495,'2021-05-20 17:41:55',63,'jihyeong'),(496,'2021-05-20 17:53:47',1,'ssafy'),(497,'2021-05-20 19:02:04',65,'hoyeon'),(498,'2021-05-20 19:32:13',65,'hyeji'),(499,'2021-05-20 19:32:16',65,'dovvn'),(500,'2021-05-20 19:38:16',65,'admin');
/*!40000 ALTER TABLE `guest_book` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `info`
--

DROP TABLE IF EXISTS `info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `info` (
  `info_id` int NOT NULL AUTO_INCREMENT,
  `info_content` text NOT NULL,
  `info_date` datetime(6) NOT NULL,
  `info_title` varchar(255) NOT NULL,
  `user_id` varchar(255) DEFAULT NULL,
  `room_id` int DEFAULT NULL,
  PRIMARY KEY (`info_id`),
  KEY `FKlwgnpuilbh37r12bu32bgfbow` (`user_id`),
  CONSTRAINT `FKlwgnpuilbh37r12bu32bgfbow` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=47 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `info`
--

LOCK TABLES `info` WRITE;
/*!40000 ALTER TABLE `info` DISABLE KEYS */;
INSERT INTO `info` VALUES (24,'정보글 작성2','2021-05-12 02:41:18.495000','정보글 내용2','dovvn',2),(28,'<p>여기는충ㄴㅁ남ㄷ매입니다</p>','2021-05-20 03:21:38.765000','여기는충남대','hyeji',54),(29,'<p>충남대유성구충남대</p>','2021-05-20 03:22:22.881000','충대충대','hyeji',54),(30,'<p>dighkdjalkjeilfkj abcjakjilekjtalk djalje</p><p>wldn 지우기도 잘돼~~~</p><h1>오호~~~</h1><p><br></p><ul><li><p>오호</p></li><li><p>너무 잘돼</p></li><li><p>짱이다</p></li><li><p>멋지다</p></li><li><p><br></p></li></ul>','2021-05-20 04:23:30.979000','이제 영어도, 뜨ㅣ어쓰기도 다 되요오옹','hyeji',54),(31,'<h1>제목</h1><h2>제목</h2><h3>제목</h3><p><strong>진하게</strong></p><p><em>이탈릭</em></p><p><em><s>스트로크</s></em></p><p><code>코드</code></p><p><mark>형광펜</mark></p><ul><li><p>리스트</p></li></ul><ol><li><p>리스트</p></li></ol><div data-v-00217756=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-00217756=\"\"><code data-v-00217756=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-variable\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-variable hljs-keyword\">in</span> <span class=\"hljs-function hljs-title\">range</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-variable\">n</span><span class=\"hljs-function\">):\n    </span><span class=\"hljs-function hljs-title\">print</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-variable\">i</span><span class=\"hljs-function\">)</span></code></pre></div><img src=\"https://files.itworld.co.kr/archive/image/2017/12/GettyImages-889581518.jpg\" contenteditable=\"false\" draggable=\"true\"><div class=\"tableWrapper\"><table style=\"min-width: 75px;\"><colgroup><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p><br></p></th><th colspan=\"1\" rowspan=\"1\"><p><br></p></th><th colspan=\"1\" rowspan=\"1\"><p><br></p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p><br></p></td><td colspan=\"1\" rowspan=\"1\"><p><br></p></td><td colspan=\"1\" rowspan=\"1\"><p><br></p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p><br></p></td><td colspan=\"1\" rowspan=\"1\"><p><br></p></td><td colspan=\"1\" rowspan=\"1\"><p><br></p></td></tr></tbody></table></div>','2021-05-20 04:48:43.119000','test 수정','jihyeong',54),(33,'<p>중간 범위까지긴 한데 참고하십쇼 ?</p><blockquote><p>참고도서<br>황희정. 『JUST JAVA 객체지향에 충실한 자바다운 자바』. 한빛아카데미. 2015</p></blockquote><p><br></p><h2>자바 언어의 이해</h2><h3>자바</h3><ol><li><p>자바는 썬에서 개발한 객체지향 언어이다. 가정용 단말기에 적용하려는 목적으로 1992년에 만든 \'오크(OAK)\'언어에서 비롯되었다.</p></li><li><p>오크는 상품화되지 못했지만, 인터넷이 발전하면서 인터넷 친화적인 개발 언어로 방향을 전환하여 1995년 \'자바\'라는 이름으로 새롭게 소개되었다.</p></li><li><p>현재 자바는 IT 기술 전반에서 가장 널리 사용하는 프로그래밍 언어가 되었다.</p></li></ol><p>&nbsp;</p><h3>자바 가상머신</h3><ol><li><p>자바는 \'바이트코드(Bytecode)\'를 생성한다. 바이트코드는 하드웨어에 종속적이지 않은 중간 파일로, 가상머신을 거쳐 해석·실행하는 구조이다.</p></li><li><p>가상머신으로 자바는 스마트폰, 컴퓨터, Mac, 리눅스 등 서로 다른 기기나 운영체제에서 동일한 프로그램을 개발하고 실행할 수 있다.</p></li></ol><p>&nbsp;</p><h3>자바 플랫폼</h3><ol><li><p>자바 플랫폼은 자바 프로그램이 실행되는 특정 환경을 말한다.</p></li><li><p>여러 제약(화면, 입출력 장치, 성능 등) 때문에 모든 하드웨어나 적용 분야에서 동일한 자바를 사용하는 것은 불가능하다. 각 영역에 특화된 자바 플랫폼이 있다.</p></li><li><p>대표적인 자바 플랫폼 기술로 Java SE(Standard Edition), Java ME(Micro Edition), Java EE(Enterprise Edition), Java Card, Java TV 등이 있다.</p></li></ol><p><br></p><blockquote><p>&nbsp;JAVA SE8의 구조</p></blockquote><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FtGxCj%2FbtqJ6dnyBBF%2FWC3XQZ0HxeZ5h8HEWXk05K%2Fimg.png\" contenteditable=\"false\" draggable=\"true\"><ul><li><p>JDK(Java Development Kit): 자바 프로그램 개발에 필요한 구성 요소</p></li><li><p>JRE(Java Runtime Environment): 자바 프로그램 실행에 필요한 구성 요소</p></li><li><p>API(Application Programming Interface): 자바 응용 프로그램 개발에 사용하는 라이브러리</p></li></ul><p><br>자바의 장점</p><ol><li><p>간결하면서도 강력한 객체지향 언어이다.</p></li><li><p>개방형 구조로 여러 기술과 융합이 가능하다.</p></li><li><p>플랫폼에 독립적이므로, 여러 운영체제나 하드웨어에서도 동일하게 실행한다.</p></li><li><p>많은 오픈소스 프레임워크로 생산성을 증가하고 유지보수 비용을 절감할 수 있다.</p></li></ol><p>&nbsp;</p><h3>자바의 단점</h3><ol><li><p>처리 속도가 중요한 애플리케이션에는 적합하지 않다.</p></li><li><p>GUI 요소가 많은 MS 윈도우 응용 프로그램 개발에는 적합하지 않다.</p></li><li><p>하드웨어에 연결하여 제어할 수 없기 때문에(가상머신 이용) 직접 하드웨어를 정밀하게 조정해야 하는 프로그램 개발에는 적합하지 않다.</p></li></ol><p>&nbsp;</p><h2>처음 만나는 자바 프로그램</h2><h3>자바 프로그램 개발 절차</h3><ol><li><p>자바 프로그램 개발은 자바 소스 코드(.java) 작성 → 자바 컴파일러 → 자바 바이트코드(.class, 컴파일) → 자바 가상머신(JVM) → 운영체제, 하드웨어 → 실행의 단계로 진행한다.</p></li><li><p>바이트코드는 운영체제에 상관없이 가상머신에서 실행하는 중간 코드이다.</p></li></ol><p>&nbsp;</p><h3>자바 소스 프로그램 작성 및 실행</h3><ol><li><p>이클립스는 기본적으로 프로젝트 단위로 소스 파일을 관리한다.</p></li><li><p>보통 프로그램은 여러 개의 클래스와 필요한 라이브러리를 비롯한 기타 리소스(자원)로 구성한다.</p></li><li><p>이클립스에서 자바 코드는 자바 파일 생성이 아니라 클래스를 작성하는 것으로 시작한다.</p></li><li><p>이클립스는 자동으로 코드를 컴파일하기 때문에 코드 작성이 끝나면 컴파일도 함께 끝나는 셈이다.</p></li><li><p>자바 클래스를 실행하려면 main() 메서드가 있어야 하며, [Run] - [Run As] - [Java Application] 메뉴로 실행한다.</p></li><li><p>실행 결과 System.out.println()은 콘솔 창에 출력된다.</p></li></ol><p>&nbsp;</p><h2>자바의 기초 문법</h2><h3>변수와 자료형</h3><ol><li><p>변수는 프로그램에서 데이터를 저장하는 공간을 말하고, 자료형은 변수에 저장할 데이터의 유형을 말한다.</p></li><li><p>변수 이름 규칙</p><ul><li><p>변수 이름의 길이에는 제한이 없다.</p></li><li><p>반드시 문자나 언더바(_), 달러 기호($)로 시작해야 한다.</p></li><li><p>자바의 연산자(+, -, *, /)는 변수 이름에 넣을 수 없다.</p></li><li><p>대소문자를 구분한다(int result와 int Result는 다른 변수).</p></li><li><p>첫 글자에 숫자가 올 수 없고, 이름 사이에 빈칸을 넣어서도 안 된다. 빈칸 대신 언더바(_)를 사용한다.</p></li><li><p>자바의 키워드는 변수 이름으로 사용할 수 없다.</p></li></ul></li><li><p>자바에서 변수 선언은 명시적으로 데이터형을 지정하게 되어 있으며, 선언된 데이터 유형과 대입된 데이터값에 차이가 있을 때 오류나 오버플로, 언더플로가 발생하므로 주의한다.</p></li><li><p>자바의 변수는 유형에 따라 인스턴스 변수, 클래스 변수, 지역 변수, 파라미터로 구분한다.</p></li><li><p>자바에서 지원하는 기본 자료형(Primitive Data Types)은 크게 정수형, 실수형, 논리형으로 나눈다.</p></li></ol><p>&nbsp;</p><h4>printf()의 형식 문자와 자료형</h4><div class=\"tableWrapper\"><table style=\"min-width: 100px;\"><colgroup><col><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>형식 문자</p></th><th colspan=\"1\" rowspan=\"1\"><p>자료형</p></th><th colspan=\"1\" rowspan=\"1\"><p>형식 문자</p></th><th colspan=\"1\" rowspan=\"1\"><p>자료형</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>%c</p></td><td colspan=\"1\" rowspan=\"1\"><p>문자형</p></td><td colspan=\"1\" rowspan=\"1\"><p>%o</p></td><td colspan=\"1\" rowspan=\"1\"><p>8진수</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>%d</p></td><td colspan=\"1\" rowspan=\"1\"><p>정수형</p></td><td colspan=\"1\" rowspan=\"1\"><p>%s</p></td><td colspan=\"1\" rowspan=\"1\"><p>문자열</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>%e</p></td><td colspan=\"1\" rowspan=\"1\"><p>지수형</p></td><td colspan=\"1\" rowspan=\"1\"><p>%u</p></td><td colspan=\"1\" rowspan=\"1\"><p>부호 없는 정수형</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>%f</p></td><td colspan=\"1\" rowspan=\"1\"><p>실수형</p></td><td colspan=\"1\" rowspan=\"1\"><p>%x</p></td><td colspan=\"1\" rowspan=\"1\"><p>16진수</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>%d</p></td><td colspan=\"1\" rowspan=\"1\"><p>정수형</p></td><td colspan=\"1\" rowspan=\"1\"><p>%%, \\%</p></td><td colspan=\"1\" rowspan=\"1\"><p>% 문자 출력</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>정수형</h4><div class=\"tableWrapper\"><table style=\"min-width: 100px;\"><colgroup><col><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>자료형</p></th><th colspan=\"1\" rowspan=\"1\"><p>크기</p></th><th colspan=\"1\" rowspan=\"1\"><p>입출력 범위</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>byte</p></td><td colspan=\"1\" rowspan=\"1\"><p>1바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>-2^7 ~ 2^7-1</p></td><td colspan=\"1\" rowspan=\"1\"><p>작은 범위의 값을 저장하기에 유용하다. 컴퓨터 데이터 통신 프로그램에서 많이 사용한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>char</p></td><td colspan=\"1\" rowspan=\"1\"><p>2바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>0 ~ 2^16-1</p></td><td colspan=\"1\" rowspan=\"1\"><p>음수를 표현하지 않는 unsigned 자료형으로, 문자를 저장하거나 출력하는 용도로 사용한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>short</p></td><td colspan=\"1\" rowspan=\"1\"><p>2바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>-2^15 ~ 2^15-1</p></td><td colspan=\"1\" rowspan=\"1\"><p>메모리에서 차지하는 크기가 작다는 것이 장점이지만, 잘 사용하지 않는다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>int</p></td><td colspan=\"1\" rowspan=\"1\"><p>4바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>-2^31 ~ 2^31-1</p></td><td colspan=\"1\" rowspan=\"1\"><p>정수 타입의 연산에 기본이 되는 자료형이다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>long</p></td><td colspan=\"1\" rowspan=\"1\"><p>8바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>-2^63 ~ 2^63-1</p></td><td colspan=\"1\" rowspan=\"1\"><p>정수 표현 범위가 큰 데이터를 저장하기에 유용한 자료형이다.</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>실수형</h4><div class=\"tableWrapper\"><table style=\"min-width: 100px;\"><colgroup><col><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>자료형</p></th><th colspan=\"1\" rowspan=\"1\"><p>크기</p></th><th colspan=\"1\" rowspan=\"1\"><p>입출력 범위</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>float</p></td><td colspan=\"1\" rowspan=\"1\"><p>4바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>1.4E^-45 ~ 3.402823E^38</p></td><td colspan=\"1\" rowspan=\"1\"><p>표현 범위가 작다. 값을 지정할 때 숫자 뒤에 f나 F를 붙여서 구분한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>double</p></td><td colspan=\"1\" rowspan=\"1\"><p>8바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>4.9E^324 ~ 3.402823E^308</p></td><td colspan=\"1\" rowspan=\"1\"><p>실수형에서 사용하는 기본 데이터형이다.</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>논리형</h4><p>boolean: 1바이트, true 값 또는 false 값만 가진다.</p><p>&nbsp;</p><h3>연산자</h3><ol><li><p>연산자는 프로그래밍 언어에서 사용할 수 있는 다양한 계산식이다.</p></li><li><p>컴퓨터 연산자에는 사칙 연산, 관계 연산, 논리 연산 등이 있다.</p></li></ol><p>&nbsp;</p><h3>연산자 우선 순위</h3><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>우선순위</p></th><th colspan=\"1\" rowspan=\"1\"><p>연산자</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>1</p></td><td colspan=\"1\" rowspan=\"1\"><p>., [], ()</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>2</p></td><td colspan=\"1\" rowspan=\"1\"><p>!, ~, +/-, ++/--, (cast)</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>3</p></td><td colspan=\"1\" rowspan=\"1\"><p>+, -, *, /, %</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>4</p></td><td colspan=\"1\" rowspan=\"1\"><p>&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>5</p></td><td colspan=\"1\" rowspan=\"1\"><p>&lt;, &gt;, &lt;=, &gt;=, ==, !=</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>6</p></td><td colspan=\"1\" rowspan=\"1\"><p>&amp;, ^, |</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>7</p></td><td colspan=\"1\" rowspan=\"1\"><p>&amp;&amp;, ||</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>8</p></td><td colspan=\"1\" rowspan=\"1\"><p>[조건식]?[true]:[false]</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>9</p></td><td colspan=\"1\" rowspan=\"1\"><p>=, +=, -=, *=, /=, %=, &lt;&lt;=, &gt;&gt;=, ^=, &amp;=, !=</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>10</p></td><td colspan=\"1\" rowspan=\"1\"><p>++/--(후위형 증감 연산자)</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>산술 연산자</h4><div class=\"tableWrapper\"><table style=\"min-width: 75px;\"><colgroup><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>분류</p></th><th colspan=\"1\" rowspan=\"1\"><p>연산자</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>이항 연산자</p></td><td colspan=\"1\" rowspan=\"1\"><p>+</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 수의 합을 구한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>-</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 수의 차를 구한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>*</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 수의 곱을 구한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>/</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 수를 나눈 몫을 구한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>%</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 수를 나눈 나머지를 구한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>+=</p></td><td colspan=\"1\" rowspan=\"1\"><p>좌변과 우변을 더한 결과를 좌변에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>-=</p></td><td colspan=\"1\" rowspan=\"1\"><p>좌변에서 우변을 뺀 결과를 좌변에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>%=</p></td><td colspan=\"1\" rowspan=\"1\"><p>좌변에서 우변을 나눈 나머지를 좌변에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>단항 연산자</p></td><td colspan=\"1\" rowspan=\"1\"><p>++</p></td><td colspan=\"1\" rowspan=\"1\"><p>변수값을 1 증가시킨다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>--</p></td><td colspan=\"1\" rowspan=\"1\"><p>변수값을 1 감소시킨다.</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>관계 연산자</h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>연산자</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 항이 크면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&lt;</p></td><td colspan=\"1\" rowspan=\"1\"><p>오른쪽 항이 크면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;=</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 항이 크거나 같으면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&lt;=</p></td><td colspan=\"1\" rowspan=\"1\"><p>오른쪽 항이 크거나 같으면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>==</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽과 오른쪽 항이 같으면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>!=</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽과 오른쪽 항이 다르면 참, 아니면 거짓.</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>논리 연산자</h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>연산자</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&amp;&amp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 논리값이 참이면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>||</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 논리값 중 하나 이상의 항이 참이면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>!</p></td><td colspan=\"1\" rowspan=\"1\"><p>단항 연산을 하며, 연산되는 항이 참이면 거짓, 거짓이면 참.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>[조건식]?[true]:[false]</p></td><td colspan=\"1\" rowspan=\"1\"><p>조건식의 결과가 참일 때 [true] 항을 수행하고, 아니면 [false] 항을 수행한다.</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>비트 연산자</h4><div class=\"tableWrapper\"><table style=\"min-width: 75px;\"><colgroup><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>분류</p></th><th colspan=\"1\" rowspan=\"1\"><p>연산자</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>비트 논리</p></td><td colspan=\"1\" rowspan=\"1\"><p>&amp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 모두 1이면 1, 아니면 0으로 연산.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>|</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 모두 0이면 0, 아니면 1로 연산.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>^</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 서로 다르면 1, 같으면 0으로 연산.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>비트 시프트</p></td><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 피연산자를 오른쪽 값만큼 부호 비트로 채우면서 오른쪽으로 이동시킨다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>&lt;&lt;</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 피연산자를 오른쪽 값만큼 비트를 왼쪽으로 이동시킨다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 피연산자를 오른쪽 값만큼 부호 비트를 무시한 채 0으로 채우면서 오른쪽으로 이동시킨다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>비트 대입</p></td><td colspan=\"1\" rowspan=\"1\"><p>&amp;=</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 모두 1이면 1, 아니면 0으로 연산하여 왼쪽 피연산자에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>|=</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 모두 0이면 0, 아니면 1로 연산하여 왼쪽 피연산자에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>^=</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 서로 다르면 1, 같으면 0으로 연산하여 왼쪽 피연산자에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;=</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 피연산자를 오른쪽 값만큼 부호 비트로 채우면서 오른쪽으로 이동한 후 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>&lt;&lt;=</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 피연산자를 오른쪽 값만큼 비트를 왼쪽으로 이동한 후 대입한다.</p></td></tr></tbody></table></div><p>&nbsp;</p><h3>분기문</h3><ol><li><p>분기문은 프로그램을 개발할 때 논리적 수행을 지원하는 명령어이다.</p></li><li><p>자바에서 지원하는 분기문은 if 문과 switch 문이 있다.</p></li><li><p>if 문은 중첩 사용이 가능하며, if ~ else if ~ else 문 등 응용이 가능하다. switch 문은 정수형뿐만 아니라 문자열 비교로 case별 처리가 가능하다.</p></li></ol><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">if(조건값 <span class=\"hljs-number\">1</span>) {\n      명령문<span class=\"hljs-comment\">;</span>\n  } else if(조건값 <span class=\"hljs-number\">2</span>) {\n      명령문<span class=\"hljs-comment\">;</span>\n  } else if(조건값 <span class=\"hljs-number\">3</span>) {\n      명령문<span class=\"hljs-comment\">;</span>\n  } else {\n      명령문<span class=\"hljs-comment\">;</span>\n  }</code></pre></div><h3>자바의 장점</h3><ol><li><p>간결하면서도 강력한 객체지향 언어이다.</p></li><li><p>개방형 구조로 여러 기술과 융합이 가능하다.</p></li><li><p>플랫폼에 독립적이므로, 여러 운영체제나 하드웨어에서도 동일하게 실행한다.</p></li><li><p>많은 오픈소스 프레임워크로 생산성을 증가하고 유지보수 비용을 절감할 수 있다.</p></li></ol><p>&nbsp;</p><h3>자바의 단점</h3><ol><li><p>처리 속도가 중요한 애플리케이션에는 적합하지 않다.</p></li><li><p>GUI 요소가 많은 MS 윈도우 응용 프로그램 개발에는 적합하지 않다.</p></li><li><p>하드웨어에 연결하여 제어할 수 없기 때문에(가상머신 이용) 직접 하드웨어를 정밀하게 조정해야 하는 프로그램 개발에는 적합하지 않다.</p></li></ol><p>&nbsp;</p><h2>처음 만나는 자바 프로그램</h2><h3>자바 프로그램 개발 절차</h3><ol><li><p>자바 프로그램 개발은 자바 소스 코드(.java) 작성 → 자바 컴파일러 → 자바 바이트코드(.class, 컴파일) → 자바 가상머신(JVM) → 운영체제, 하드웨어 → 실행의 단계로 진행한다.</p></li><li><p>바이트코드는 운영체제에 상관없이 가상머신에서 실행하는 중간 코드이다.</p></li></ol><p>&nbsp;</p><h3>자바 소스 프로그램 작성 및 실행</h3><ol><li><p>이클립스는 기본적으로 프로젝트 단위로 소스 파일을 관리한다.</p></li><li><p>보통 프로그램은 여러 개의 클래스와 필요한 라이브러리를 비롯한 기타 리소스(자원)로 구성한다.</p></li><li><p>이클립스에서 자바 코드는 자바 파일 생성이 아니라 클래스를 작성하는 것으로 시작한다.</p></li><li><p>이클립스는 자동으로 코드를 컴파일하기 때문에 코드 작성이 끝나면 컴파일도 함께 끝나는 셈이다.</p></li><li><p>자바 클래스를 실행하려면 main() 메서드가 있어야 하며, [Run] - [Run As] - [Java Application] 메뉴로 실행한다.</p></li><li><p>실행 결과 System.out.println()은 콘솔 창에 출력된다.</p></li></ol><p>&nbsp;</p><h2>자바의 기초 문법</h2><h3>변수와 자료형</h3><ol><li><p>변수는 프로그램에서 데이터를 저장하는 공간을 말하고, 자료형은 변수에 저장할 데이터의 유형을 말한다.</p></li><li><p>변수 이름 규칙</p><ul><li><p>변수 이름의 길이에는 제한이 없다.</p></li><li><p>반드시 문자나 언더바(_), 달러 기호($)로 시작해야 한다.</p></li><li><p>자바의 연산자(+, -, *, /)는 변수 이름에 넣을 수 없다.</p></li><li><p>대소문자를 구분한다(int result와 int Result는 다른 변수).</p></li><li><p>첫 글자에 숫자가 올 수 없고, 이름 사이에 빈칸을 넣어서도 안 된다. 빈칸 대신 언더바(_)를 사용한다.</p></li><li><p>자바의 키워드는 변수 이름으로 사용할 수 없다.</p></li></ul></li><li><p>자바에서 변수 선언은 명시적으로 데이터형을 지정하게 되어 있으며, 선언된 데이터 유형과 대입된 데이터값에 차이가 있을 때 오류나 오버플로, 언더플로가 발생하므로 주의한다.</p></li><li><p>자바의 변수는 유형에 따라 인스턴스 변수, 클래스 변수, 지역 변수, 파라미터로 구분한다.</p></li><li><p>자바에서 지원하는 기본 자료형(Primitive Data Types)은 크게 정수형, 실수형, 논리형으로 나눈다.</p></li></ol><p>&nbsp;</p><h4>printf()의 형식 문자와 자료형</h4><div class=\"tableWrapper\"><table style=\"min-width: 100px;\"><colgroup><col><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>형식 문자</p></th><th colspan=\"1\" rowspan=\"1\"><p>자료형</p></th><th colspan=\"1\" rowspan=\"1\"><p>형식 문자</p></th><th colspan=\"1\" rowspan=\"1\"><p>자료형</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>%c</p></td><td colspan=\"1\" rowspan=\"1\"><p>문자형</p></td><td colspan=\"1\" rowspan=\"1\"><p>%o</p></td><td colspan=\"1\" rowspan=\"1\"><p>8진수</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>%d</p></td><td colspan=\"1\" rowspan=\"1\"><p>정수형</p></td><td colspan=\"1\" rowspan=\"1\"><p>%s</p></td><td colspan=\"1\" rowspan=\"1\"><p>문자열</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>%e</p></td><td colspan=\"1\" rowspan=\"1\"><p>지수형</p></td><td colspan=\"1\" rowspan=\"1\"><p>%u</p></td><td colspan=\"1\" rowspan=\"1\"><p>부호 없는 정수형</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>%f</p></td><td colspan=\"1\" rowspan=\"1\"><p>실수형</p></td><td colspan=\"1\" rowspan=\"1\"><p>%x</p></td><td colspan=\"1\" rowspan=\"1\"><p>16진수</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>%d</p></td><td colspan=\"1\" rowspan=\"1\"><p>정수형</p></td><td colspan=\"1\" rowspan=\"1\"><p>%%, \\%</p></td><td colspan=\"1\" rowspan=\"1\"><p>% 문자 출력</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>정수형</h4><div class=\"tableWrapper\"><table style=\"min-width: 100px;\"><colgroup><col><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>자료형</p></th><th colspan=\"1\" rowspan=\"1\"><p>크기</p></th><th colspan=\"1\" rowspan=\"1\"><p>입출력 범위</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>byte</p></td><td colspan=\"1\" rowspan=\"1\"><p>1바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>-2^7 ~ 2^7-1</p></td><td colspan=\"1\" rowspan=\"1\"><p>작은 범위의 값을 저장하기에 유용하다. 컴퓨터 데이터 통신 프로그램에서 많이 사용한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>char</p></td><td colspan=\"1\" rowspan=\"1\"><p>2바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>0 ~ 2^16-1</p></td><td colspan=\"1\" rowspan=\"1\"><p>음수를 표현하지 않는 unsigned 자료형으로, 문자를 저장하거나 출력하는 용도로 사용한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>short</p></td><td colspan=\"1\" rowspan=\"1\"><p>2바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>-2^15 ~ 2^15-1</p></td><td colspan=\"1\" rowspan=\"1\"><p>메모리에서 차지하는 크기가 작다는 것이 장점이지만, 잘 사용하지 않는다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>int</p></td><td colspan=\"1\" rowspan=\"1\"><p>4바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>-2^31 ~ 2^31-1</p></td><td colspan=\"1\" rowspan=\"1\"><p>정수 타입의 연산에 기본이 되는 자료형이다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>long</p></td><td colspan=\"1\" rowspan=\"1\"><p>8바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>-2^63 ~ 2^63-1</p></td><td colspan=\"1\" rowspan=\"1\"><p>정수 표현 범위가 큰 데이터를 저장하기에 유용한 자료형이다.</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>실수형</h4><div class=\"tableWrapper\"><table style=\"min-width: 100px;\"><colgroup><col><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>자료형</p></th><th colspan=\"1\" rowspan=\"1\"><p>크기</p></th><th colspan=\"1\" rowspan=\"1\"><p>입출력 범위</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>float</p></td><td colspan=\"1\" rowspan=\"1\"><p>4바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>1.4E^-45 ~ 3.402823E^38</p></td><td colspan=\"1\" rowspan=\"1\"><p>표현 범위가 작다. 값을 지정할 때 숫자 뒤에 f나 F를 붙여서 구분한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>double</p></td><td colspan=\"1\" rowspan=\"1\"><p>8바이트</p></td><td colspan=\"1\" rowspan=\"1\"><p>4.9E^324 ~ 3.402823E^308</p></td><td colspan=\"1\" rowspan=\"1\"><p>실수형에서 사용하는 기본 데이터형이다.</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>논리형</h4><p>boolean: 1바이트, true 값 또는 false 값만 가진다.</p><p>&nbsp;</p><h3>연산자</h3><ol><li><p>연산자는 프로그래밍 언어에서 사용할 수 있는 다양한 계산식이다.</p></li><li><p>컴퓨터 연산자에는 사칙 연산, 관계 연산, 논리 연산 등이 있다.</p></li></ol><p>&nbsp;</p><h3>연산자 우선 순위</h3><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>우선순위</p></th><th colspan=\"1\" rowspan=\"1\"><p>연산자</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>1</p></td><td colspan=\"1\" rowspan=\"1\"><p>., [], ()</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>2</p></td><td colspan=\"1\" rowspan=\"1\"><p>!, ~, +/-, ++/--, (cast)</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>3</p></td><td colspan=\"1\" rowspan=\"1\"><p>+, -, *, /, %</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>4</p></td><td colspan=\"1\" rowspan=\"1\"><p>&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>5</p></td><td colspan=\"1\" rowspan=\"1\"><p>&lt;, &gt;, &lt;=, &gt;=, ==, !=</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>6</p></td><td colspan=\"1\" rowspan=\"1\"><p>&amp;, ^, |</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>7</p></td><td colspan=\"1\" rowspan=\"1\"><p>&amp;&amp;, ||</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>8</p></td><td colspan=\"1\" rowspan=\"1\"><p>[조건식]?[true]:[false]</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>9</p></td><td colspan=\"1\" rowspan=\"1\"><p>=, +=, -=, *=, /=, %=, &lt;&lt;=, &gt;&gt;=, ^=, &amp;=, !=</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>10</p></td><td colspan=\"1\" rowspan=\"1\"><p>++/--(후위형 증감 연산자)</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>산술 연산자</h4><div class=\"tableWrapper\"><table style=\"min-width: 75px;\"><colgroup><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>분류</p></th><th colspan=\"1\" rowspan=\"1\"><p>연산자</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>이항 연산자</p></td><td colspan=\"1\" rowspan=\"1\"><p>+</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 수의 합을 구한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>-</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 수의 차를 구한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>*</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 수의 곱을 구한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>/</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 수를 나눈 몫을 구한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>%</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 수를 나눈 나머지를 구한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>+=</p></td><td colspan=\"1\" rowspan=\"1\"><p>좌변과 우변을 더한 결과를 좌변에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>-=</p></td><td colspan=\"1\" rowspan=\"1\"><p>좌변에서 우변을 뺀 결과를 좌변에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>%=</p></td><td colspan=\"1\" rowspan=\"1\"><p>좌변에서 우변을 나눈 나머지를 좌변에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>단항 연산자</p></td><td colspan=\"1\" rowspan=\"1\"><p>++</p></td><td colspan=\"1\" rowspan=\"1\"><p>변수값을 1 증가시킨다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>--</p></td><td colspan=\"1\" rowspan=\"1\"><p>변수값을 1 감소시킨다.</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>관계 연산자</h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>연산자</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 항이 크면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&lt;</p></td><td colspan=\"1\" rowspan=\"1\"><p>오른쪽 항이 크면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;=</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 항이 크거나 같으면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&lt;=</p></td><td colspan=\"1\" rowspan=\"1\"><p>오른쪽 항이 크거나 같으면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>==</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽과 오른쪽 항이 같으면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>!=</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽과 오른쪽 항이 다르면 참, 아니면 거짓.</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>논리 연산자</h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>연산자</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&amp;&amp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 논리값이 참이면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>||</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 논리값 중 하나 이상의 항이 참이면 참, 아니면 거짓.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>!</p></td><td colspan=\"1\" rowspan=\"1\"><p>단항 연산을 하며, 연산되는 항이 참이면 거짓, 거짓이면 참.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>[조건식]?[true]:[false]</p></td><td colspan=\"1\" rowspan=\"1\"><p>조건식의 결과가 참일 때 [true] 항을 수행하고, 아니면 [false] 항을 수행한다.</p></td></tr></tbody></table></div><p>&nbsp;</p><h4>비트 연산자</h4><div class=\"tableWrapper\"><table style=\"min-width: 75px;\"><colgroup><col><col><col></colgroup><tbody><tr><th colspan=\"1\" rowspan=\"1\"><p>분류</p></th><th colspan=\"1\" rowspan=\"1\"><p>연산자</p></th><th colspan=\"1\" rowspan=\"1\"><p>설명</p></th></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>비트 논리</p></td><td colspan=\"1\" rowspan=\"1\"><p>&amp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 모두 1이면 1, 아니면 0으로 연산.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>|</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 모두 0이면 0, 아니면 1로 연산.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>^</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 서로 다르면 1, 같으면 0으로 연산.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>비트 시프트</p></td><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 피연산자를 오른쪽 값만큼 부호 비트로 채우면서 오른쪽으로 이동시킨다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>&lt;&lt;</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 피연산자를 오른쪽 값만큼 비트를 왼쪽으로 이동시킨다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 피연산자를 오른쪽 값만큼 부호 비트를 무시한 채 0으로 채우면서 오른쪽으로 이동시킨다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>비트 대입</p></td><td colspan=\"1\" rowspan=\"1\"><p>&amp;=</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 모두 1이면 1, 아니면 0으로 연산하여 왼쪽 피연산자에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>|=</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 모두 0이면 0, 아니면 1로 연산하여 왼쪽 피연산자에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>^=</p></td><td colspan=\"1\" rowspan=\"1\"><p>두 항의 비트가 서로 다르면 1, 같으면 0으로 연산하여 왼쪽 피연산자에 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;=</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 피연산자를 오른쪽 값만큼 부호 비트로 채우면서 오른쪽으로 이동한 후 대입한다.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p></td><td colspan=\"1\" rowspan=\"1\"><p>&lt;&lt;=</p></td><td colspan=\"1\" rowspan=\"1\"><p>왼쪽 피연산자를 오른쪽 값만큼 비트를 왼쪽으로 이동한 후 대입한다.</p></td></tr></tbody></table></div><p>&nbsp;</p><h3>분기문</h3><ol><li><p>분기문은 프로그램을 개발할 때 논리적 수행을 지원하는 명령어이다.</p></li><li><p>자바에서 지원하는 분기문은 if 문과 switch 문이 있다.</p></li><li><p>if 문은 중첩 사용이 가능하며, if ~ else if ~ else 문 등 응용이 가능하다. switch 문은 정수형뿐만 아니라 문자열 비교로 case별 처리가 가능하다.</p></li></ol><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">if(조건값 <span class=\"hljs-number\">1</span>) {\n      명령문<span class=\"hljs-comment\">;</span>\n  } else if(조건값 <span class=\"hljs-number\">2</span>) {\n      명령문<span class=\"hljs-comment\">;</span>\n  } else if(조건값 <span class=\"hljs-number\">3</span>) {\n      명령문<span class=\"hljs-comment\">;</span>\n  } else {\n      명령문<span class=\"hljs-comment\">;</span>\n  }</code></pre></div><p><br><br><br></p>','2021-05-20 05:13:32.737000','[정리] JAVA 기본 개념(중간 범위 까지...)','dovvn',1),(34,'<p>오버로딩 오버라이딩 넘 헷갈려서 정리한거 공유해요 ㅠㅠ</p><hr contenteditable=\"false\"><h1><strong>오버로딩(Overloading)</strong></h1><p>&nbsp;오버로딩은 메서드 오버로딩과 생성자 오버로딩이 있습니다. 하지만 둘 다 같은 개념이에요.</p><p>같은 이름의 함수(메서드)를 여러개 정의하고,&nbsp;매개변수의 유형과 개수를 다르게&nbsp;하여 다양한 유형의&nbsp;호출에 응답할 수 있게됩니다.</p><p><br>?예제</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">OverloadingTest</span><span class=\"hljs-class\">{</span>\n    <span class=\"hljs-comment\">//이름이 cat인 메서드</span>\n    <span class=\"hljs-function hljs-keyword\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">cat</span><span class=\"hljs-function hljs-params\">()</span>{\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"매개변수 없음\"</span>);\n    }\n    \n    <span class=\"hljs-comment\">//매개변수 int형이 2개인 cat 메서드</span>\n    <span class=\"hljs-function hljs-keyword\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">cat</span><span class=\"hljs-function hljs-params\">(</span><span class=\"hljs-function hljs-params hljs-keyword\">int</span><span class=\"hljs-function hljs-params\"> a, </span><span class=\"hljs-function hljs-params hljs-keyword\">int</span><span class=\"hljs-function hljs-params\"> b)</span>{\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"매개변수 :\"</span>+a+<span class=\"hljs-string\">\", \"</span>+b);\n    }\n    \n    <span class=\"hljs-comment\">//매개변수 String형이 한 개인 cat 메서드</span>\n    <span class=\"hljs-function hljs-keyword\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">cat</span><span class=\"hljs-function hljs-params\">(</span><span class=\"hljs-function hljs-params hljs-keyword\">String</span><span class=\"hljs-function hljs-params\"> c)</span>{\n        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"매개변수 : \"</span>+ c);\n    }\n    \n}\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">OverTest</span><span class=\"hljs-class\"> {</span>\n \n    <span class=\"hljs-function hljs-keyword\">public</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-keyword\">static</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-keyword\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">main</span><span class=\"hljs-function hljs-params\">(</span><span class=\"hljs-function hljs-params hljs-keyword\">String</span><span class=\"hljs-function hljs-params\">[] args)</span><span class=\"hljs-function\"> </span>{\n        \n        <span class=\"hljs-comment\">//OverloadingTest 객체 생성</span>\n        OverloadingTest ot = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">OverloadingTest</span>();\n        \n        <span class=\"hljs-comment\">//매개변수가 없는 cat() 호출</span>\n        ot.<span class=\"hljs-built_in\">cat</span>();\n        \n        <span class=\"hljs-comment\">//매개변수가 int형 두개인 cat() 호출</span>\n        ot.<span class=\"hljs-built_in\">cat</span>(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">80</span>);\n        \n        <span class=\"hljs-comment\">//매개변수가 String 한개인 cat() 호출</span>\n        ot.<span class=\"hljs-built_in\">cat</span>(<span class=\"hljs-string\">\"오버로딩 예제입니다.\"</span>);\n        \n    }\n \n}</code></pre></div><p><br></p><p><br></p><h1><strong>오버라이딩(Overriding)</strong></h1><p>&nbsp;상위 클래스가 가지고 있는 멤버변수가 하위 클래스로 상속되는 것처럼&nbsp;상위 클래스가 가지고 있는 메서드도 하위 클래스로 상속되어 하위 클래스에 사용할 수 있습니다. 또한,&nbsp;하위 클래스에서 메서드를&nbsp;<strong>재정의</strong>해서도 사용할 수 있습니다.</p><p>쉽게 말해 메서드의 이름이 서로 같고, 매개변수가 같고, 반환형이 같을 경우에 상속받은 메서드를 덮어쓴다고 생각하시면 됩니다. \' 부모클래스의 메서드는 무시하고, 자식 클래스의 메서드 기능을 사용하겠다\'와 같습니다.</p><p><br></p><p>?예제</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">Woman</span>{ <span class=\"hljs-comment\">//부모클래스</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">String</span> name;\n    <span class=\"hljs-keyword\">public</span> int age;\n    \n    <span class=\"hljs-comment\">//info 메서드</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-function hljs-title\">info</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span>{\n        System.out.println(<span class=\"hljs-string\">\"여자의 이름은 \"</span>+name+<span class=\"hljs-string\">\", 나이는 \"</span>+age+<span class=\"hljs-string\">\"살입니다.\"</span>);\n    }\n    \n}\n \n<span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">Job</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-keyword\">extends</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">Woman</span>{ <span class=\"hljs-comment\">//Woman클래스(부모클래스)를 상속받음 : </span>\n \n    <span class=\"hljs-built_in\">String</span> job;\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-function hljs-title\">info</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span> {<span class=\"hljs-comment\">//부모(Woman)클래스에 있는 info()메서드를 재정의</span>\n        <span class=\"hljs-built_in\">super</span>.info();\n        System.out.println(<span class=\"hljs-string\">\"여자의 직업은 \"</span>+job+<span class=\"hljs-string\">\"입니다.\"</span>);\n    }\n}\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">OverTest</span><span class=\"hljs-class\"> </span>{\n \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-function hljs-title\">main</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-params hljs-built_in\">String</span><span class=\"hljs-function hljs-params\">[] args</span><span class=\"hljs-function\">)</span> {\n        \n        <span class=\"hljs-comment\">//Job 객체 생성</span>\n        Job job = <span class=\"hljs-keyword\">new</span> Job();\n        \n        <span class=\"hljs-comment\">//변수 설정</span>\n        job.name = <span class=\"hljs-string\">\"유리\"</span>;\n        job.age = <span class=\"hljs-number\">30</span>;\n        job.job = <span class=\"hljs-string\">\"프로그래머\"</span>;\n        \n        <span class=\"hljs-comment\">//호출</span>\n        job.info();\n        \n    }\n \n}</code></pre></div>','2021-05-20 05:15:52.623000','오버로딩과 오버라이딩 차이와 예제','dovvn',1),(35,'<h2><strong>startWith:</strong>&nbsp;문자열이 지정한 문자로 시작하는지 판단 같으면 true반환 아니면 false를 반환한다.(대소문자구별)</h2><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"apple\"</span><span class=\"hljs-comment\">;</span>\nboolean <span class=\"hljs-attr\">startsWith</span> = str.startsWith(<span class=\"hljs-string\">\"a\"</span>)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"startsWith: \" + startsWith)<span class=\"hljs-comment\">;</span>\n<br></code></pre></div><p>결과값:true</p><p><br><br></p><p><strong>endWith:</strong>문자열 마지막에 지정한 문자가 있는지를 판단후 있으면 true, 없으면 false를 반환한다.(대소문자구별)</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"test\"</span><span class=\"hljs-comment\">;</span>\nboolean <span class=\"hljs-attr\">endsWith</span> = str.endsWith(<span class=\"hljs-string\">\"t\"</span>)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"endsWith: \" + endsWith)<span class=\"hljs-comment\">;</span>\n<br></code></pre></div><p>결과값:true</p><p><br><br></p><p><strong>equals:</strong>두개의 String에 값만을 비교해서 같으면 true, 다르면 false를 반환한다.(대소비교)</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str1</span> = <span class=\"hljs-string\">\"java\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">str2</span> = <span class=\"hljs-string\">\"java\"</span><span class=\"hljs-comment\">;</span>\nboolean <span class=\"hljs-attr\">equals</span> = str1.equals(str2)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"equals: \" + equals)<span class=\"hljs-comment\">;</span>\n<br></code></pre></div><p>결과값:true</p><p><br><br></p><p><strong>indexOf:</strong>지정한 문자가 문자열에 몇번째에 있는지를 반환한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"abcdef\"</span><span class=\"hljs-comment\">;</span>\nint <span class=\"hljs-attr\">indexOf</span> = str.indexOf(<span class=\"hljs-string\">\"d\"</span>)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"indexOf: \" + indexOf)<span class=\"hljs-comment\">;</span>\n<br></code></pre></div><p>결과값:3</p><p><br><br></p><p><strong>lastindexOf:</strong>문자열에 지정한 문자가 마지막몇번째에 있는 int를 반환한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"AdnroidApp\"</span><span class=\"hljs-comment\">;</span>\nint <span class=\"hljs-attr\">lastIndexOf</span> = str.lastIndexOf(<span class=\"hljs-string\">\"A\"</span>)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"lastIndexOf:\" + lastIndexOf)<span class=\"hljs-comment\">;</span>\n<br></code></pre></div><p>결과값:7</p><p><br><br></p><p><strong>length:</strong>문자열의 길이를 반환한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"abcdef\"</span><span class=\"hljs-comment\">;</span>\nint <span class=\"hljs-attr\">length</span> = str.length()<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"length: \" + length)<span class=\"hljs-comment\">;</span>\n<br></code></pre></div><p>결과값:6</p><p><br><br></p><p><strong>replace:</strong>문자열에 지정한 문자\" \"가 있으면 새로 지정한 문자\" \"로 바꿔서 출력한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"A*B*C*D\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">replace</span> = str.replace(<span class=\"hljs-string\">\"*\"</span>, <span class=\"hljs-string\">\"-\"</span>)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"replace: \" + replace)<span class=\"hljs-comment\">;</span>\n<br></code></pre></div><p>결과값: A-B-C-D</p><p><br><br></p><p><br><br></p><p><strong>replaceAll:</strong>정규표현식을 지정한 문자로 바꿔서 출력한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"AB CD\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">replaceAll</span> = str.replaceAll(<span class=\"hljs-string\">\"\\\\p{Space}\"</span>, <span class=\"hljs-string\">\"*\"</span>)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"replaceAll: \" + replaceAll)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값: AB*CD</p><p><br><br></p><p><strong>split:</strong>지정한 문자로 문자열을 나눌수 있다.(배열로 반환)</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"A:B:C:D:abcd\"</span><span class=\"hljs-comment\">;</span>\nString<span class=\"hljs-section\">[]</span> <span class=\"hljs-attr\">split</span> = str.split(<span class=\"hljs-string\">\":\"</span>)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"split: \" + split<span class=\"hljs-section\">[1]</span>)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:B</p><p><br><br></p><p><strong>substring:</strong>문자열에 지정한 범위에 속하는 문자열을 반환한다.(시작범위에 값은 포함하고, 끝나는 범위에 값은 포함하지않는다.)</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"ABCDEF\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">substring</span> = str.substring(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"substring: \" + substring)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:AB</p><p><br><br></p><p><strong>toLowerCase:&nbsp;</strong>문자열에 대문자를 소문자로 변환한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"abcDEF\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">toLowerCase</span> = str.toLowerCase()<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"toLowerCase: \" + toLowerCase)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:abcdef</p><p><br><br></p><p><strong>toUpperCase:</strong>문자열에 소문자를 대문자로 변환한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"abcDEF\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">toUppercase</span> = str.toUpperCase()<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"toUppercase: \" + toUppercase)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:ABCDEF</p><p><br><br></p><p><strong>toString:</strong>문자열을 그대로 반환해준다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"1234\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">toString</span> = str.toString()<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"toString: \" + toString)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:1234</p><p><br><br></p><p><strong>trim:</strong>문자열에 공백을 없에준다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">s</span> = <span class=\"hljs-string\">\" &nbsp; &nbsp; java java java &nbsp; &nbsp; \"</span><span class=\"hljs-comment\">;</span>\nString v<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-attr\">v</span> = s.trim()<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"trim:\" + v)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:java java java</p><p><br><br></p><p><strong>valueOf:</strong>지정한 개체의 원시 값을 반환</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">12345</span>;\nlong l = <span class=\"hljs-number\">1L</span>;\n<span class=\"hljs-built_in\">char</span> c = <span class=\"hljs-character\">\'1\'</span>;\n<span class=\"hljs-module-access hljs-module hljs-identifier\">System</span><span class=\"hljs-module-access hljs-module\">.</span>out.println(<span class=\"hljs-string\">\"valueOf: \"</span> + <span class=\"hljs-module-access hljs-module hljs-identifier\">String</span><span class=\"hljs-module-access hljs-module\">.</span>valueOf (i));\n<span class=\"hljs-module-access hljs-module hljs-identifier\">System</span><span class=\"hljs-module-access hljs-module\">.</span>out.println(<span class=\"hljs-string\">\"valueOf: \"</span> + <span class=\"hljs-module-access hljs-module hljs-identifier\">String</span><span class=\"hljs-module-access hljs-module\">.</span>valueOf (l));\n<span class=\"hljs-module-access hljs-module hljs-identifier\">System</span><span class=\"hljs-module-access hljs-module\">.</span>out.println(<span class=\"hljs-string\">\"valueOf: \"</span> + <span class=\"hljs-module-access hljs-module hljs-identifier\">String</span><span class=\"hljs-module-access hljs-module\">.</span>valueOf (c));</code></pre></div><p>결과값:</p><p>valueOf: 12345</p><p>valueOf: 1</p><p>valueOf: 1</p><p><br><br></p><p><strong>compareTo:</strong>두개의 String를 앞에서부터 순사적으로 비교하다가 틀린부분이 있으면 비교하는 String에 캐릭터값을 반환한다.(대소문자를 구별)</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-attribute\">String</span> str<span class=\"hljs-number\">1</span> = <span class=\"hljs-string\">\"A\"</span>;\n<span class=\"hljs-attribute\">String</span> str<span class=\"hljs-number\">2</span> = <span class=\"hljs-string\">\"B\"</span>;\n<span class=\"hljs-attribute\">int</span> compareTo = str<span class=\"hljs-number\">1</span>.compareTo(str<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-attribute\">if</span>(compareTo &gt; <span class=\"hljs-number\">0</span>){\n       <span class=\"hljs-attribute\">System</span>.out.println(str<span class=\"hljs-number\">1</span> + <span class=\"hljs-string\">\" &gt; \"</span> +str<span class=\"hljs-number\">2</span>);\n} <span class=\"hljs-attribute\">else</span> if (compareTo == <span class=\"hljs-number\">0</span>){\n       <span class=\"hljs-attribute\">System</span>.out.println(str<span class=\"hljs-number\">1</span> + <span class=\"hljs-string\">\" = \"</span> +str<span class=\"hljs-number\">2</span>);\n} <span class=\"hljs-attribute\">else</span>{\n       <span class=\"hljs-attribute\">System</span>.out.println(str<span class=\"hljs-number\">1</span> + <span class=\"hljs-string\">\" &lt; \"</span> +str<span class=\"hljs-number\">2</span>);\n}</code></pre></div><p>결과값:</p><p>A &lt; B</p><p><br><br></p><p><strong>contains:</strong>두개의 String을 비교해서 비교대상 String을 포함하고 있으면true, 다르면 false를 반환한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str1</span> = <span class=\"hljs-string\">\"abcd\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">str2</span> = <span class=\"hljs-string\">\"c\"</span><span class=\"hljs-comment\">;</span>\nboolean <span class=\"hljs-attr\">contains</span> = str1.contains(str2)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"contains: \" + contains)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:true</p><p><br><br></p><p><strong>charAt:</strong>지정한 index번째에 문자를 반환한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"charAt\"</span><span class=\"hljs-comment\">;</span>\nchar <span class=\"hljs-attr\">charAt</span> = str.charAt(<span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"charAt: \" + charAt)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:a</p><p><br><br></p><p><strong>concat:</strong>문자와 문자를 결합해준다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str1</span> = <span class=\"hljs-string\">\"Han\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">str2</span> = <span class=\"hljs-string\">\"SeeJin\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">concat</span> = str1.concat(str2)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"concat: \" + concat)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:HanSeeJin</p><p><br><br></p><p><strong>format:</strong>서식문자열을 이용해서 서식화된 문자열을 반환한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">int <span class=\"hljs-attr\">i</span> = <span class=\"hljs-number\">123456789</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">str</span> = String.format(<span class=\"hljs-string\">\"%,d\"</span>, i)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"format: \" + str)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:123,456,789</p><p><br><br></p><p><strong>matches:</strong>지정한 정규 표현과 일치 할때 true를 반환한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">int <span class=\"hljs-attr\">i</span> = <span class=\"hljs-number\">123456</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">str1</span> = String.format(<span class=\"hljs-string\">\"%,d\"</span>, i)<span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">str2</span> = <span class=\"hljs-string\">\"123456\"</span><span class=\"hljs-comment\">;</span>\nboolean <span class=\"hljs-attr\">matches</span> = str1.matches(str2)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"matches: \" + matches)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:false</p><p><br><br></p><p><strong>replaceFirst:</strong>문자열에 지정한 문자\" \"가 있으면 첫번째만 새로지정한 문자\" \"로 바꿔서 출력한다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">String <span class=\"hljs-attr\">str</span> = <span class=\"hljs-string\">\"Aman\"</span><span class=\"hljs-comment\">;</span>\nString <span class=\"hljs-attr\">replaceFirst</span> = str.replaceFirst(<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-string\">\"super\"</span>)<span class=\"hljs-comment\">;</span>\nSystem.out.println(\"replaceFirst: \" + replaceFirst)<span class=\"hljs-comment\">;</span></code></pre></div><p>결과값:superman</p><p><br></p>','2021-05-20 05:17:59.812000','JAVA 문자열 관련 함수 정리한거...','dovvn',1),(36,'<h3><strong>Stack이란?</strong></h3><p>자료 구조 중 하나인&nbsp;Stack의&nbsp;사전적 정의는 \'쌓다\', \'더미\'입니다. 상자에 물건을 쌓아 올리듯이 데이터를 쌓는 자료 구조라고 할 수 있습니다. Stack의 가장 큰 특징은 나중에 들어간 것이 먼저 나오는 (Last In First Out)의 형태를 띈다는 것입니다. 이 방식을 가진 자료구조인 Stack을 활용하여 다양한 문제를 해결할 수 있습니다. 자바에서 Stack은 java.util.Stack을 import하면 바로 사용할 수 있습니다.</p><p>&nbsp;</p><p><br></p><img src=\"https://blog.kakaocdn.net/dn/YhtxB/btqHsbZTFED/DhCPI65pmzfsqETjti138k/img.jpg\" contenteditable=\"false\" draggable=\"true\"><p><br></p><h3><strong>Stack의 특징</strong></h3><p><strong>1.&nbsp;</strong>먼저 들어간 자료가 나중에 나옴&nbsp;LIFO(Last In First Out) 구조<br><strong>2.</strong>&nbsp;시스템 해킹에서 버퍼오버플로우 취약점을 이용한 공격을 할 때 스택 메모리의 영역에서 함&nbsp;<br><strong>3.</strong>&nbsp;인터럽트처리, 수식의 계산, 서브루틴의 복귀 번지 저장 등에 쓰임<br><strong>4.</strong>&nbsp;그래프의 깊이 우선 탐색(DFS)에서 사용<br><strong>5.</strong>&nbsp;재귀적(Recursion) 함수를 호출 할 때 사용</p><p>&nbsp;</p><h2><strong>&nbsp;Stack 사용법&nbsp;</strong></h2><h3><strong>Stack 선언</strong></h3><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-keyword\">import</span> java.util.<span class=\"hljs-built_in\">Stack</span>; <span class=\"hljs-comment\">//import</span>\n<span class=\"hljs-built_in\">Stack</span>&lt;<span class=\"hljs-built_in\">Integer</span>&gt; <span class=\"hljs-built_in\">stack</span> = <span class=\"hljs-literal\">new</span> <span class=\"hljs-built_in\">Stack</span>&lt;&gt;(); <span class=\"hljs-comment\">//int형 스택 선언</span>\n<span class=\"hljs-built_in\">Stack</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; <span class=\"hljs-built_in\">stack</span> = <span class=\"hljs-literal\">new</span> <span class=\"hljs-built_in\">Stack</span>&lt;&gt;(); <span class=\"hljs-comment\">//char형 스택 선언</span></code></pre></div><p>자바에서 stack을 선언하려면 &lt;stack&gt;import java.util.Stack 을 import 한 뒤&nbsp;Stack&lt;Element&gt;&nbsp;stack&nbsp;=&nbsp;new&nbsp;Stack&lt;&gt;();과 같은 형식으로 선언하면 됩니다.&nbsp;</p><p>&nbsp;</p><h3><strong>Stack 값 추가</strong></h3><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-built_in\">Stack</span>&lt;<span class=\"hljs-built_in\">Integer</span>&gt; <span class=\"hljs-built_in\">stack</span> = <span class=\"hljs-literal\">new</span> <span class=\"hljs-built_in\">Stack</span>&lt;&gt;(); <span class=\"hljs-comment\">//int형 스택 선언</span>\n<span class=\"hljs-built_in\">stack</span>.push(<span class=\"hljs-number\">1</span>);     <span class=\"hljs-comment\">// stack에 값 1 추가</span>\n<span class=\"hljs-built_in\">stack</span>.push(<span class=\"hljs-number\">2</span>);     <span class=\"hljs-comment\">// stack에 값 2 추가</span>\n<span class=\"hljs-built_in\">stack</span>.push(<span class=\"hljs-number\">3</span>);     <span class=\"hljs-comment\">// stack에 값 3 추가</span></code></pre></div><p>Stack에 값을 추가하고 싶다면 push(value)라는 메소드를 활용하면 됩니다.&nbsp;Stack에 위의 예제와 같이 값을 계속해서 추가해나간다면 아래 그림처럼 데이터가 쌓이게 됩니다.</p><p><br></p><img src=\"https://blog.kakaocdn.net/dn/cbrGNm/btqHsbZTFF4/qJgrCMjCTFd1d6uU7EV4k0/img.png\" contenteditable=\"false\" draggable=\"true\"><p><br></p><h3><strong>Stack 값 삭제</strong></h3><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-built_in\">Stack</span>&lt;<span class=\"hljs-built_in\">Integer</span>&gt; <span class=\"hljs-built_in\">stack</span> = <span class=\"hljs-literal\">new</span> <span class=\"hljs-built_in\">Stack</span>&lt;&gt;(); <span class=\"hljs-comment\">//int형 스택 선언</span>\n<span class=\"hljs-built_in\">stack</span>.push(<span class=\"hljs-number\">1</span>);     <span class=\"hljs-comment\">// stack에 값 1 추가</span>\n<span class=\"hljs-built_in\">stack</span>.push(<span class=\"hljs-number\">2</span>);     <span class=\"hljs-comment\">// stack에 값 2 추가</span>\n<span class=\"hljs-built_in\">stack</span>.push(<span class=\"hljs-number\">3</span>);     <span class=\"hljs-comment\">// stack에 값 3 추가</span>\n<span class=\"hljs-built_in\">stack</span>.pop();       <span class=\"hljs-comment\">// stack에 값 제거</span>\n<span class=\"hljs-built_in\">stack</span>.clear();     <span class=\"hljs-comment\">// stack의 전체 값 제거 (초기화)</span></code></pre></div><p>&nbsp;스택에서 값을 제거하고싶다면 pop()이라는 메서드를 사용하면 됩니다. pop을 하면 가장 위쪽에 있는 원소의 값이 아래 그림과 같이 제거됩니다. 스택의 값을 모두 제거하고싶다면 clear()라는 메서드를 사용하면 됩니다.</p><p><br></p><img src=\"https://blog.kakaocdn.net/dn/cru4A7/btqHra73O8h/Q2fkHsFA9NJFxsD5n1AKN0/img.png\" contenteditable=\"false\" draggable=\"true\"><p><br></p><p>&nbsp;</p><h3><strong>Stack의 가장 상단의 값 출력</strong></h3><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-built_in\">Stack</span>&lt;<span class=\"hljs-built_in\">Integer</span>&gt; <span class=\"hljs-built_in\">stack</span> = <span class=\"hljs-literal\">new</span> <span class=\"hljs-built_in\">Stack</span>&lt;&gt;(); <span class=\"hljs-comment\">//int형 스택 선언</span>\n<span class=\"hljs-built_in\">stack</span>.push(<span class=\"hljs-number\">1</span>);     <span class=\"hljs-comment\">// stack에 값 1 추가</span>\n<span class=\"hljs-built_in\">stack</span>.push(<span class=\"hljs-number\">2</span>);     <span class=\"hljs-comment\">// stack에 값 2 추가</span>\n<span class=\"hljs-built_in\">stack</span>.push(<span class=\"hljs-number\">3</span>);     <span class=\"hljs-comment\">// stack에 값 3 추가</span>\n<span class=\"hljs-built_in\">stack</span>.peek();     <span class=\"hljs-comment\">// stack의 가장 상단의 값 출력</span></code></pre></div><p>스택의 가장 위에 있는 값을 출력하고 싶다면 peek()라는 함수를 사용하면 됩니다. 아래 그림과 같이 가장 마지막에 들어간 값이 출력됩니다.</p><p><br></p><img src=\"https://blog.kakaocdn.net/dn/HfKZA/btqHgqLjLJG/mk3ViUTmahCubC86UCptK1/img.png\" contenteditable=\"false\" draggable=\"true\"><p><br></p><p>&nbsp;</p><h3><strong>Stack의 기타 메서드</strong></h3><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">Stack&lt;Integer&gt; stack =<span class=\"hljs-built_in\"> new </span>Stack&lt;&gt;(); //int형 스택 선언\nstack.push(1);     // stack에 값 1 추가\nstack.push(2);     // stack에 값 2 추가\nstack.size();      // stack의 크기 출력<span class=\"hljs-keyword\"> :</span> 2\nstack.empty();     // stack이 비어있는제<span class=\"hljs-built_in\"> check </span>(비어있다면 true)\nstack.contains(1) // stack에 1이 있는지<span class=\"hljs-built_in\"> check </span>(있다면 true)</code></pre></div><p>그 밖에도 stack에는 크기를 구하는 size()메서드와 stack이 비어있는지 확인하는 empty() 메서드(비어있다면 true, 그렇지 않다면 false를 return) stack의 값을 search하는 contains(int value)함수가 있습니다.</p>','2021-05-20 05:20:04.137000',' 자바 Stack 클래스 사용법 정리','jihyeong',1),(37,'<h1><strong>파이썬 인터프리터</strong></h1><p>&nbsp; - 대화형 모드로 동작</p><p><br></p><img src=\"https://blog.kakaocdn.net/dn/bbYQFp/btqEQ78d0Ld/LmZLm1AIgc5x6vVW2PyQIk/img.png\" contenteditable=\"false\" draggable=\"true\"><p><br></p><p>&nbsp;</p><p>&nbsp;</p><hr contenteditable=\"false\"><h4><strong>문자열 연산</strong>&nbsp;: 불변</h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p># 문자열 연산<br>&gt;&gt;&gt; word = \'Python\'<br>&gt;&gt;&gt; word[0]<br>\'P\'<br>&gt;&gt;&gt; word[-2]<br>\'o\'<br>&gt;&gt;&gt; word[:2]<br>\'Py\'<br>&gt;&gt;&gt; word[2:5]<br>\'tho\'<br>&gt;&gt;&gt; 3 * word[0] + word[1:4] + \'~~~\' + word[4:]<br>\'PPPyth~~~on\'<br>&gt;&gt;&gt; len(word)<br>6</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/cy4tSm/btqEQuQlaLG/t6bGh9paxjQEsIy7MhRkOk/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><h4>&nbsp;</h4><hr contenteditable=\"false\"><h4><strong>if 문</strong></h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;x&nbsp;=&nbsp;int(input(\"Please&nbsp;enter&nbsp;an&nbsp;integer:&nbsp;\"))<br>Please&nbsp;enter&nbsp;an&nbsp;integer:&nbsp;42<br>&gt;&gt;&gt;&nbsp;if&nbsp;x&nbsp;&lt;&nbsp;0:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x = 0<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(\'Negative changed to zero\')<br>...&nbsp; &nbsp; &nbsp;elif x == 0:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(\'Zero\')<br>...&nbsp; &nbsp; &nbsp;elif x == 1:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(\'Single\')<br>...&nbsp; &nbsp; &nbsp;else:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(\'More\')<br>...<br>More</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/cMVVL9/btqEQuiyMwd/2MNdXdVMSbWy2bCBzES4B1/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><h4><strong>for 문</strong></h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;words&nbsp;=&nbsp;[\'cat\',&nbsp;\'window\',&nbsp;\'defenestrate\']<br>&gt;&gt;&gt;&nbsp;for&nbsp;w&nbsp;in&nbsp;words:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(w, len(w))<br>...<br>cat&nbsp;3<br>window&nbsp;6<br>defenestrate 12</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/qyUei/btqEQuW8xPQ/Ku2x4dRz4TEnE366jd33nK/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;for&nbsp;n&nbsp;in&nbsp;range(2,&nbsp;10):<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for x in range(2, n):<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if n % x == 0:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(n, \'equals\', x, \'*\', n//x)<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(n, \'is a prime number\')<br>...<br>2&nbsp;is&nbsp;a&nbsp;prime&nbsp;number<br>3&nbsp;is&nbsp;a&nbsp;prime&nbsp;number<br>4&nbsp;equals&nbsp;2&nbsp;*&nbsp;2<br>5&nbsp;is&nbsp;a&nbsp;prime&nbsp;number<br>6&nbsp;equals&nbsp;2&nbsp;*&nbsp;3<br>7&nbsp;is&nbsp;a&nbsp;prime&nbsp;number<br>8&nbsp;equals&nbsp;2&nbsp;*&nbsp;4<br>9&nbsp;equals&nbsp;3&nbsp;*&nbsp;3</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/cRk3Sg/btqESGO9ZwQ/flKzNaZetmzB0Dhw08cJYK/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><p>&nbsp;</p><hr contenteditable=\"false\"><h4><strong>리스트 연산</strong></h4><p>&nbsp; - Compound 데이터 타입 중 대표적<br>&nbsp; - 가변인 시퀀스형<br>&nbsp; - 대괄호나 list 함수를 이용하여 생성</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt; squares = [1, 4, 9, 16]<br>&gt;&gt;&gt;&nbsp;squares&nbsp;<br>[1, 4, 9, 16]<br>&gt;&gt;&gt;&nbsp;squares[2]<br>9<br>&gt;&gt;&gt;&nbsp;squares&nbsp;+ [36, 49]<br>[1,&nbsp;4,&nbsp;9,&nbsp;16,&nbsp;36,&nbsp;49]<br>&gt;&gt;&gt;&nbsp;squares.append(50)<br>&gt;&gt;&gt; len(squares)<br>5<br>&gt;&gt;&gt; x = [squares,&nbsp;squares]<br>&gt;&gt;&gt; x[0]<br>[1,&nbsp;4,&nbsp;9,&nbsp;16,&nbsp;50]<br>&gt;&gt;&gt; x[0][1]<br>4</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/svanh/btqERr6vB7W/7z7jtvZrWDVL0lqJPmvbT1/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;lst&nbsp;=&nbsp;list(\'abcde\')<br>&gt;&gt;&gt;&nbsp;lst<br>[\'a\',&nbsp;\'b\',&nbsp;\'c\',&nbsp;\'d\',&nbsp;\'e\']</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/JFRb1/btqESgEwUOF/QkYGfqf9GNZpvFOdNQPqGk/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><h4>&nbsp;</h4><p>&nbsp;</p><h4><strong>리스트 메소드</strong></h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>append(x)</p></td><td colspan=\"1\" rowspan=\"1\"><p>리스트의 끝에 항목 추가.&nbsp;a[len(a):]&nbsp;=&nbsp;[x]&nbsp;와 동일.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>extend(iterable)</p></td><td colspan=\"1\" rowspan=\"1\"><p>리스트의 끝에 이터러블의 모든 항목을 추가.&nbsp;a[len(a):]&nbsp;=&nbsp;iterable&nbsp;와 동일</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>insert(i,&nbsp;x)</p></td><td colspan=\"1\" rowspan=\"1\"><p>주어진 위치에 항목을 삽입. 첫 번째 인자는 삽입 위치(인덱스). 두 번째 인자는 삽입할 값.<br>a.insert(len(a),&nbsp;x)와&nbsp;a.append(x)&nbsp;와 동일함.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>remove(x)</p></td><td colspan=\"1\" rowspan=\"1\"><p>리스트에서 값이&nbsp;x&nbsp;인&nbsp;첫 번째 항목을 삭제.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>pop([i])</p></td><td colspan=\"1\" rowspan=\"1\"><p>리스트에서 주어진 위치에 있는 항목을 삭제하고, 그 항목을 return.<br>인덱스를 지정하지 않으면&nbsp;리스트의 마지막 항목을 삭제하고 return.<br><br></p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>clear()</p></td><td colspan=\"1\" rowspan=\"1\"><p>리스트의 모든 항목을 삭제.&nbsp;del&nbsp;a[:]&nbsp;와 동일</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>index(x[,&nbsp;start[,&nbsp;end]])</p></td><td colspan=\"1\" rowspan=\"1\"><p>리스트에 있는 항목 중 값이 x 와 같은 첫 번째 항목의 인덱스를 return.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>count(x)</p></td><td colspan=\"1\" rowspan=\"1\"><p>리스트에서&nbsp;x&nbsp;의 전체 건수를 return.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>list.sort(key=None,&nbsp;reverse=False)</p></td><td colspan=\"1\" rowspan=\"1\"><p>리스트의 항목을 정렬.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>reverse()</p></td><td colspan=\"1\" rowspan=\"1\"><p>리스트의 요소의 순서를 역으로 변경.</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>copy()</p></td><td colspan=\"1\" rowspan=\"1\"><p>리스트의 사본 반환.&nbsp;a[:]&nbsp;와 동일.</p></td></tr></tbody></table></div><p>&nbsp;</p><p>&nbsp;</p><h4><strong>리스트 컴프리헨션 (Comprehension)</strong></h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt; squares = [x**2 for x in range(10)]&nbsp;<br>&gt;&gt;&gt;&nbsp;squares&nbsp;<br>[0,&nbsp;1,&nbsp;4,&nbsp;9,&nbsp;16,&nbsp;25,&nbsp;36,&nbsp;49,&nbsp;64,&nbsp;81]</p></td><td colspan=\"1\" rowspan=\"3\"><img src=\"https://blog.kakaocdn.net/dn/bif5xK/btqESHaxx4c/ooQw14UcQiNrC3i4sKPTWK/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;squares&nbsp;=&nbsp;list(map(lambda&nbsp;x:&nbsp;x**2,&nbsp;range(10)))&nbsp;<br>&gt;&gt;&gt;&nbsp;squares&nbsp;<br>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt; squares = []&nbsp;<br>&gt;&gt;&gt;&nbsp;for&nbsp;x&nbsp;in&nbsp;range(10):&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; squares.append(x**2)<br>...&nbsp;<br>&gt;&gt;&gt;&nbsp;squares&nbsp;<br>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&nbsp;</p></td></tr></tbody></table></div><p>&nbsp;</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;[(x,&nbsp;y)&nbsp;for&nbsp;x&nbsp;in&nbsp;[1,2,3]&nbsp;for&nbsp;y&nbsp;in&nbsp;[3,1,4]&nbsp;if&nbsp;x&nbsp;!=&nbsp;y]<br>[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</p></td><td colspan=\"1\" rowspan=\"2\"><img src=\"https://blog.kakaocdn.net/dn/KRrsm/btqESWrMCE4/kee2OHgvZw57Nw1Sf3d4MK/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;combs&nbsp;=&nbsp;[]&nbsp;<br>&gt;&gt;&gt;&nbsp;for&nbsp;x&nbsp;in&nbsp;[1,2,3]:&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for y in [3,1,4]:&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if x != y:&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; combs.append((x,&nbsp;y))<br>...<br>&gt;&gt;&gt;&nbsp;combs<br>[(1,&nbsp;3),&nbsp;(1,&nbsp;4),&nbsp;(2,&nbsp;3),&nbsp;(2,&nbsp;1),&nbsp;(2,&nbsp;4),&nbsp;(3,&nbsp;1),&nbsp;(3,&nbsp;4)]</p></td></tr></tbody></table></div><p>&nbsp;</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;matrix&nbsp;=&nbsp;[<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[1, 2, 3, 4],<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[5, 6, 7, 8],<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[9, 10, 11, 12],<br>...&nbsp;]<br>&gt;&gt;&gt;&nbsp;[[row[i]&nbsp;for&nbsp;row&nbsp;in&nbsp;matrix]&nbsp;for&nbsp;i&nbsp;in&nbsp;range(4)]<br>[[1,&nbsp;5,&nbsp;9],&nbsp;[2,&nbsp;6,&nbsp;10],&nbsp;[3,&nbsp;7,&nbsp;11],&nbsp;[4,&nbsp;8,&nbsp;12]]</p></td><td colspan=\"1\" rowspan=\"4\"><img src=\"https://blog.kakaocdn.net/dn/cvMzAe/btqETmX6xGs/9v9DA9c1o5l2jHV7MXTHd0/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;transposed&nbsp;=&nbsp;[]<br>&gt;&gt;&gt;&nbsp;for&nbsp;i&nbsp;in&nbsp;range(4):<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transposed.append([row[i]&nbsp;for&nbsp;row&nbsp;in&nbsp;matrix])<br>...<br>&gt;&gt;&gt;&nbsp;transposed<br>[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;transposed&nbsp;=&nbsp;[]<br>&gt;&gt;&gt;&nbsp;for&nbsp;i&nbsp;in&nbsp;range(4):<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;transposed_row = []<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for row in matrix:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;transposed_row.append(row[i])<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;transposed.append(transposed_row)<br>...<br>&gt;&gt;&gt;&nbsp;transposed<br>[[1,&nbsp;5,&nbsp;9],&nbsp;[2,&nbsp;6,&nbsp;10],&nbsp;[3,&nbsp;7,&nbsp;11],&nbsp;[4,&nbsp;8,&nbsp;12]]</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;list(zip(*matrix))<br>[(1,&nbsp;5,&nbsp;9),&nbsp;(2,&nbsp;6,&nbsp;10),&nbsp;(3,&nbsp;7,&nbsp;11),&nbsp;(4,&nbsp;8,&nbsp;12)]</p></td></tr></tbody></table></div><p>&nbsp;</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;vec&nbsp;=&nbsp;[[1,&nbsp;2,&nbsp;3],&nbsp;[4,&nbsp;5,&nbsp;6],&nbsp;[7,&nbsp;8,&nbsp;9]]<br>&gt;&gt;&gt;&nbsp;[num&nbsp;for&nbsp;elem&nbsp;in&nbsp;vec&nbsp;for&nbsp;num&nbsp;in&nbsp;elem]<br>[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;8,&nbsp;9]</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/btqEZs/btqETW5r34Q/f56quVVF5aU0hv8jTvnEJ0/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><p>&nbsp;</p><h4><strong>튜플</strong></h4><p>&nbsp; - 불변인 시퀀스형.<br>&nbsp; - 괄호나 tuple 함수를 사용하여 생성.</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;tu&nbsp;=&nbsp;12345,&nbsp;54321,&nbsp;\'hello!\'<br>&gt;&gt;&gt;&nbsp;tu<br>(12345,&nbsp;54321,&nbsp;\'hello!\')<br>&gt;&gt;&gt;&nbsp;tu[0]<br>12345<br>&gt;&gt;&gt;&nbsp;v1,&nbsp;v2,&nbsp;v3&nbsp;=&nbsp;tu<br>&gt;&gt;&gt;&nbsp;v1<br>12345<br>&gt;&gt;&gt;&nbsp;v2<br>54321<br>&gt;&gt;&gt;&nbsp;v3<br>\'hello!\'</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/zNtHl/btqETBAK4w4/g62gDV93UOZdnPhpZq4gHk/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;tu&nbsp;=&nbsp;tuple(\'abcde\')<br>&gt;&gt;&gt;&nbsp;tu<br>(\'a\',&nbsp;\'b\',&nbsp;\'c\',&nbsp;\'d\',&nbsp;\'e\')</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/dpJybt/btqET7eDfGJ/Sjkbb710rjePVUGwo5SKZ0/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><h4><strong>집합</strong></h4><p>&nbsp; - 중복 없는 유일한 값들이 순서에 상관없이 저장되는 컬렉션.<br>&nbsp; - 중괄호{}나 set() 함수를 사용하여 생성.</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt; chr1 = {\'a\', \'z\', \'z\', \'r\', \'d\', \'j\', \'d\'}<br>&gt;&gt;&gt;&nbsp;chr1<br>{\'j\',&nbsp;\'d\',&nbsp;\'r\',&nbsp;\'z\',&nbsp;\'a\'}<br>&gt;&gt;&gt;&nbsp;chr2&nbsp;=&nbsp;set(\'arojxg\')<br>&gt;&gt;&gt;&nbsp;chr2<br>{\'j\',&nbsp;\'o\',&nbsp;\'g\',&nbsp;\'r\',&nbsp;\'x\',&nbsp;\'a\'}<br>&gt;&gt;&gt;&nbsp;chr1&nbsp;-&nbsp;chr2<br>{\'z\',&nbsp;\'d\'}<br>&gt;&gt;&gt;&nbsp;chr1&nbsp;&amp;&nbsp;chr2<br>{\'j\',&nbsp;\'r\',&nbsp;\'a\'}<br>&gt;&gt;&gt;&nbsp;chr1&nbsp;|&nbsp;chr2<br>{\'j\',&nbsp;\'o\',&nbsp;\'d\',&nbsp;\'x\',&nbsp;\'r\',&nbsp;\'z\',&nbsp;\'g\',&nbsp;\'a\'}<br>&gt;&gt;&gt;&nbsp;chr1&nbsp;^&nbsp;chr2<br>{\'o\',&nbsp;\'x\',&nbsp;\'d\',&nbsp;\'z\',&nbsp;\'g\'}</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/cbGWga/btqETnW1myO/5V5181WSlkRNUJqzIYdVV1/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;a&nbsp;=&nbsp;{x&nbsp;for&nbsp;x&nbsp;in&nbsp;\'abracadabra\'&nbsp;if&nbsp;x&nbsp;not&nbsp;in&nbsp;\'abc\'}&nbsp;<br>&gt;&gt;&gt;&nbsp;a&nbsp;<br>{\'r\',&nbsp;\'d\'}</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/4IuXu/btqETYP7Y8M/jelKCwjTwmXU9H6W23FGNK/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><p>&nbsp;</p><h4><strong>딕셔너리</strong></h4><p>&nbsp; - 매핑 데이터 형. 가변형 임.<br>&nbsp; - {키:값} 쌍의 형태로 관리되며, 키로 인덱싱함.<br>&nbsp; - 중괄호{}나 dict() 함수를 사용하여 생성.&nbsp;</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;tel&nbsp;=&nbsp;{\'jack\':&nbsp;4098,&nbsp;\'sape\':&nbsp;4139}<br>&gt;&gt;&gt;&nbsp;tel[\'guido\']&nbsp;=&nbsp;4127<br>&gt;&gt;&gt;&nbsp;tel<br>{\'jack\':&nbsp;4098,&nbsp;\'sape\':&nbsp;4139,&nbsp;\'guido\':&nbsp;4127}<br>&gt;&gt;&gt;&nbsp;tel[\'jack\']<br>4098<br>&gt;&gt;&gt;&nbsp;list(tel)<br>[\'jack\',&nbsp;\'sape\',&nbsp;\'guido\']<br>&gt;&gt;&gt;&nbsp;sorted(tel)<br>[\'guido\',&nbsp;\'jack\',&nbsp;\'sape\']<br><br><br></p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/SGl0v/btqEUGBbKml/dV5KDEGF7FmIXMKknKd3K0/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;{x:&nbsp;x**2&nbsp;for&nbsp;x&nbsp;in&nbsp;(2,&nbsp;4,&nbsp;6)}<br>{2:&nbsp;4,&nbsp;4:&nbsp;16,&nbsp;6:&nbsp;36}</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/AsFYK/btqESHhGiib/8vgS7zrUugq1AelHTm9vh0/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><p>&nbsp;</p><hr contenteditable=\"false\"><h4><strong>사용자 함수&nbsp;</strong></h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;def&nbsp;fib(n):&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; \"\"\"Print a Fibonacci series up to n. &lt;-- Docstring\"\"\"<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a, b = 0, 1&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while a &lt; n:&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(a, end=\' \')&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a, b = b, a+b&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print()&nbsp;<br>...&nbsp;<br>&gt;&gt;&gt;&nbsp;<br>&gt;&gt;&gt;&nbsp;fib(2000)&nbsp;<br>0&nbsp;1&nbsp;1&nbsp;2&nbsp;3&nbsp;5&nbsp;8&nbsp;13&nbsp;21&nbsp;34&nbsp;55&nbsp;89&nbsp;144&nbsp;233&nbsp;377&nbsp;610&nbsp;987&nbsp;1597</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/exlrCz/btqESXb9OHa/pJ9WGjV0t6CqoNwqs3cyK0/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;def&nbsp;fib2(n,&nbsp;a=0,&nbsp;b=1):&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"\"\"Return a list containing the Fibonacci series up to n.\"\"\"&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result = []&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n1, n2 = a, b&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while n1 &lt; n:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result.append(n1)<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;n1, n2 = n2, n1+n2&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return result&nbsp;<br>...&nbsp;<br>&gt;&gt;&gt; f100 = fib2(100)&nbsp;<br>&gt;&gt;&gt;&nbsp;f100&nbsp;<br>[0,&nbsp;1,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5,&nbsp;8,&nbsp;13,&nbsp;21,&nbsp;34,&nbsp;55,&nbsp;89]</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/bj1XVJ/btqERQSDzGO/PaXTyKGqF1hbVkNwG3SXs1/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;def&nbsp;cheeseshop(kind,&nbsp;<em>arguments,&nbsp;</em>*keywords):&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(\"-- Do you have any\", kind, \"?\")&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(\"-- I\'m sorry, we\'re all out of\", kind)&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for arg in arguments:&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(arg)&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(\"-\" * 40)&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for kw in keywords:&nbsp;<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(kw, \":\", keywords[kw])&nbsp;<br>...<br>&gt;&gt;&gt;&nbsp;cheeseshop(\"Limburger\",&nbsp;\"It\'s&nbsp;very&nbsp;runny,&nbsp;sir.\",&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"It\'s&nbsp;really&nbsp;very,&nbsp;VERY&nbsp;runny,&nbsp;sir.\",&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shopkeeper=\"Michael&nbsp;Palin\",&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client=\"John&nbsp;Cleese\",&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sketch=\"Cheese&nbsp;Shop&nbsp;Sketch\")&nbsp;<br>--&nbsp;Do&nbsp;you&nbsp;have&nbsp;any&nbsp;Limburger&nbsp;?&nbsp;<br>--&nbsp;I\'m&nbsp;sorry,&nbsp;we\'re&nbsp;all&nbsp;out&nbsp;of&nbsp;Limburger&nbsp;<br>It\'s&nbsp;very&nbsp;runny,&nbsp;sir.&nbsp;<br>It\'s&nbsp;really&nbsp;very,&nbsp;VERY&nbsp;runny,&nbsp;sir.&nbsp;<br>----------------------------------------&nbsp;<br>shopkeeper&nbsp;:&nbsp;Michael&nbsp;Palin&nbsp;<br>client&nbsp;:&nbsp;John&nbsp;Cleese&nbsp;<br>sketch&nbsp;:&nbsp;Cheese&nbsp;Shop&nbsp;Sketch</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/eHcj7E/btqESgwJFNE/jDrGDXj507KBHqJknUEoBk/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><p>&nbsp;</p><hr contenteditable=\"false\"><h4><strong>모듈</strong></h4><p>&nbsp; - 함수, 클래스, 변수가 저장된 파일. import 하여 사용.<br>&nbsp; - 파일명 형식 : [패키지명\\]모듈명.py<br>&nbsp; - 모듈 검색 경로<br>&nbsp; &nbsp; &nbsp;1) 내장 모듈 검색<br>&nbsp; &nbsp; &nbsp;2) sys.path<br>&nbsp; &nbsp; &nbsp; &nbsp; . 입력 스크립트를 포함하는 디렉터리 (또는 파일이 지정되지 않았을 때는 현재 디렉터리).<br>&nbsp; &nbsp; &nbsp; &nbsp; . PYTHONPATH (디렉터리 이름들의 목록, 셸 변수 PATH 와 같은 문법).<br>&nbsp; &nbsp; &nbsp; &nbsp; . 설치 의존적인 기본값</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"2\" rowspan=\"1\"><p>${PYTHONPATH}\\pkg\\fibo.py<br><br></p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p><em>#&nbsp;Fibonacci&nbsp;numbers&nbsp;module</em><br><br>def fib(n):&nbsp;&nbsp;&nbsp;&nbsp;<em>#&nbsp;write&nbsp;Fibonacci&nbsp;series&nbsp;up&nbsp;to&nbsp;n</em><br>&nbsp;&nbsp;&nbsp;&nbsp;a,&nbsp;b&nbsp;=&nbsp;0,&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;a&nbsp;&lt;&nbsp;n:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(a,&nbsp;end=\'&nbsp;\')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a,&nbsp;b&nbsp;=&nbsp;b,&nbsp;a+b<br>&nbsp;&nbsp;&nbsp;&nbsp;print()<br><br>def&nbsp;fib2(n):&nbsp;&nbsp;<em>&nbsp;#&nbsp;return&nbsp;Fibonacci&nbsp;series&nbsp;up&nbsp;to&nbsp;n</em><br>&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;[]<br>&nbsp;&nbsp;&nbsp;&nbsp;a,&nbsp;b&nbsp;=&nbsp;0,&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;a&nbsp;&lt;&nbsp;n:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.append(a)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a,&nbsp;b&nbsp;=&nbsp;b,&nbsp;a+b<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result<br><br>if <strong>name</strong> == \"__main__\":&nbsp;&nbsp;<em>#__main__ : executed by script</em><br>&nbsp;&nbsp;&nbsp;&nbsp;import&nbsp;sys&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;fib(int(sys.argv[1]))</p></td><td colspan=\"1\" rowspan=\"1\"><p>&nbsp;</p><img src=\"https://blog.kakaocdn.net/dn/biRy6a/btqETXSs0WC/fYFH5uHVuLlNEU3kvxp7c1/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p># 패키지명 : pkg, 모듈명 : fibo<br><br>&gt;&gt;&gt;&nbsp;import&nbsp;pkg.fibo<br>&gt;&gt;&gt;&nbsp;pkg.fibo.fib(1000)<br>0&nbsp;1&nbsp;1&nbsp;2&nbsp;3&nbsp;5&nbsp;8&nbsp;13&nbsp;21&nbsp;34&nbsp;55&nbsp;89&nbsp;144&nbsp;233&nbsp;377&nbsp;610&nbsp;987<br>&gt;&gt;&gt;&nbsp;pkg.fibo.fib2(100)<br>[0,&nbsp;1,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5,&nbsp;8,&nbsp;13,&nbsp;21,&nbsp;34,&nbsp;55,&nbsp;89]<br>&gt;&gt;&gt;&nbsp;pkg.fibo.__name__<br>\'pkg.fibo\'</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/ceNUm9/btqEVJFCYiP/HSi1L1o31mNY7KPR768i4K/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;from&nbsp;pkg.fibo&nbsp;import&nbsp;fib,&nbsp;fib2<br>&gt;&gt;&gt;&nbsp;fib(500)<br>0&nbsp;1&nbsp;1&nbsp;2&nbsp;3&nbsp;5&nbsp;8&nbsp;13&nbsp;21&nbsp;34&nbsp;55&nbsp;89&nbsp;144&nbsp;233&nbsp;377<br>&gt;&gt;&gt;&nbsp;fib2(50)<br>[0,&nbsp;1,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5,&nbsp;8,&nbsp;13,&nbsp;21,&nbsp;34]</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/bvcbI5/btqEVIUew0y/NnnKZn7wRmIlDui5HJ9fd0/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;- 모듈을 스크립트로 실행</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>D:\\90_Workspace_Python\\pkg&gt;python&nbsp;fibo.py&nbsp;50</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/IrKUv/btqETJ7UxSf/FakRUGoG7SEhbPuNg1Ar9k/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><p>&nbsp;</p><hr contenteditable=\"false\"><h4><strong>클래스</strong></h4><p>&nbsp; -&nbsp;파이썬 클래스는 객체 지향형 프로그래밍의 모든 표준 기능들(클래스 상속, 매서드 재정의 등)을 제공</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"2\" rowspan=\"1\"><p>${PYTHONPATH}\\myclass.py</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>class&nbsp;MyClass:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;<strong>init</strong>(self,&nbsp;msg):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(\"Init&nbsp;message&nbsp;of&nbsp;MyClass\")<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.__msg&nbsp;=&nbsp;msg<br><br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;setmsg(self,&nbsp;msg):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.__msg&nbsp;=&nbsp;msg<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;printmsg(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(self.__msg)<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;getmsg(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;self.__msg<br><br><br>class&nbsp;MyClassSub(MyClass):<br><br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;<strong>init</strong>(self,&nbsp;msg):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(\"Init&nbsp;message&nbsp;of&nbsp;MyClassSub\")<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super().__init__(msg)<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;printmsg(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(\"Message&nbsp;is&nbsp;\\\"{}\\\"\".format(super().getmsg()))<br><br><br></p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/bjCWmr/btqEX9jzdbd/S2gl4LYzFPKxG3fSmiJjfK/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;from&nbsp;myclass&nbsp;import&nbsp;MyClass,&nbsp;MyClassSub<br>&gt;&gt;&gt;&nbsp;m&nbsp;=&nbsp;MyClass(\'test...\')<br>Init&nbsp;message&nbsp;of&nbsp;MyClass<br>&gt;&gt;&gt;&nbsp;m.printmsg()<br>test...<br>&gt;&gt;&gt;&nbsp;m.getmsg()<br>\'test...\'<br>&gt;&gt;&gt;&nbsp;m.setmsg(\'new&nbsp;message\')<br>&gt;&gt;&gt;&nbsp;m.printmsg()<br>new&nbsp;message<br>&gt;&gt;&gt;&nbsp;m.getmsg()<br>\'new&nbsp;message\'<br>&gt;&gt;&gt;&nbsp;ms&nbsp;=&nbsp;MyClassSub(\'Sub&nbsp;Message\')<br>Init&nbsp;message&nbsp;of&nbsp;MyClassSub<br>Init&nbsp;message&nbsp;of&nbsp;MyClass<br>&gt;&gt;&gt;&nbsp;ms.printmsg()<br>Message&nbsp;is&nbsp;\"Sub&nbsp;Message\"<br>&gt;&gt;&gt;&nbsp;ms.getmsg()<br>\'Sub Message\'</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/bIGEka/btqEW3jQB8m/lK3XJqkQnLlzGLPHZcqpWK/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp; - <strong>init()</strong> : 클래스의 생성자 실행 시&nbsp;자동으로&nbsp;init__()&nbsp;를 호출.&nbsp;</p><h4>&nbsp;</h4><p>&nbsp;</p><hr contenteditable=\"false\"><h4><strong>입출력</strong></h4><p>&nbsp; - 포맷 문자열 리터럴(formatted string literal) 또는 f-문자열 (f-string)<br>&nbsp; &nbsp; &nbsp;. \'f\' 나 \'F\' 를 앞에 붙인 문자열 리터럴<br>&nbsp; &nbsp; &nbsp;. 치환 필드 포함 가능<br>&nbsp; &nbsp; &nbsp;. 중괄호 {} 로 구분되는 표현식<br>&nbsp; &nbsp; &nbsp;. 실행시간에 계산되는 표현식</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;year&nbsp;=&nbsp;2020<br>&gt;&gt;&gt;&nbsp;event&nbsp;=&nbsp;\'Referendum\'<br>&gt;&gt;&gt;&nbsp;f\'Results&nbsp;of&nbsp;the&nbsp;<strong>{year}&nbsp;{event}</strong>\'<br>\'Results&nbsp;of&nbsp;the&nbsp;2020&nbsp;Referendum\'</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/oJrwc/btqEVXLBuSW/fADNldyCv0QUsixmIJsWN0/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;yes_votes&nbsp;=&nbsp;42_572_654<br>&gt;&gt;&gt;&nbsp;no_votes&nbsp;=&nbsp;43_132_495<br>&gt;&gt;&gt;&nbsp;percentage&nbsp;=&nbsp;yes_votes&nbsp;/&nbsp;(yes_votes&nbsp;+&nbsp;no_votes)<br>&gt;&gt;&gt;&nbsp;\'<strong>{:-9}</strong>&nbsp;YES&nbsp;votes&nbsp;<strong>{:2.2%}</strong>\'.format(yes_votes,&nbsp;percentage)<br>\'&nbsp;42572654&nbsp;YES&nbsp;votes&nbsp;49.67%\'</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/ccCkP2/btqEXJFz2yu/8PeJPkYUCgctEoRBC8xvOk/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;import&nbsp;math<br>&gt;&gt;&gt;&nbsp;print(f\'The&nbsp;value&nbsp;of&nbsp;pi&nbsp;is&nbsp;approximately&nbsp;<strong>{math.pi:.3f}</strong>.\')<br>The&nbsp;value&nbsp;of&nbsp;pi&nbsp;is&nbsp;approximately&nbsp;3.142.</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/clReVr/btqEVVtJgqK/B3muUj7sWKoLa5GAKUomVk/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;table&nbsp;=&nbsp;{\'Sjoerd\':&nbsp;4127,&nbsp;\'Jack\':&nbsp;4098,&nbsp;\'Dcab\':&nbsp;7678}<br>&gt;&gt;&gt;&nbsp;for&nbsp;name,&nbsp;phone&nbsp;in&nbsp;table.items():<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(f\'<strong>{name:10}</strong>&nbsp;==&gt;&nbsp;<strong>{phone:10d}</strong>\')<br>...<br>Sjoerd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4127<br>Jack&nbsp; &nbsp; &nbsp; &nbsp; ==&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4098<br>Dcab&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7678</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/xnoOZ/btqEYapqrru/kVAlYfOYKgjlkZtfMQrtu1/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;print(\'We&nbsp;are&nbsp;the&nbsp;{}&nbsp;who&nbsp;say&nbsp;\"{}!\"\'.format(\'knights\',&nbsp;\'Ni\'))<br>We&nbsp;are&nbsp;the&nbsp;knights&nbsp;who&nbsp;say&nbsp;\"Ni!\"</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/FkyKX/btqEYZAYnnN/Hq0pHTdQFQmmi5BEkDUvlK/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;print(\'{0}&nbsp;and&nbsp;{1}\'.format(\'spam\',&nbsp;\'eggs\'))<br>spam&nbsp;and&nbsp;eggs<br>&gt;&gt;&gt;&nbsp;print(\'{1}&nbsp;and&nbsp;{0}\'.format(\'spam\',&nbsp;\'eggs\'))<br>eggs&nbsp;and&nbsp;spam</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/4goK5/btqEW4J1IMT/0avWf1AB7tA4EgoN7AbBF0/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;print(\'This&nbsp;{food}&nbsp;is&nbsp;{adjective}.\'.format(<br>...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;food=\'spam\',&nbsp;adjective=\'absolutely&nbsp;horrible\'))<br>This&nbsp;spam&nbsp;is&nbsp;absolutely&nbsp;horrible.</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/doVUOK/btqEVWMXcKo/xAlBDNyiBiEDZU5IS6NSDK/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;print(\'The&nbsp;story&nbsp;of&nbsp;{0},&nbsp;{1},&nbsp;and&nbsp;{other}.\'.format(\'Bill\',&nbsp;\'Manfred\',&nbsp;other=\'Georg\'))<br>The&nbsp;story&nbsp;of&nbsp;Bill,&nbsp;Manfred,&nbsp;and&nbsp;Georg.</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/skojV/btqEXJyPMD6/BZqj189vdFMwomhD7yM0M1/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;table&nbsp;=&nbsp;{\'Sjoerd\':&nbsp;4127,&nbsp;\'Jack\':&nbsp;4098,&nbsp;\'Dcab\':&nbsp;8637678}<br>&gt;&gt;&gt;&nbsp;print(\'Jack:&nbsp;{0[Jack]:d};&nbsp;Sjoerd:&nbsp;{0[Sjoerd]:d};&nbsp;\'<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'Dcab: {0[Dcab]:d}\'.format(table))<br>Jack:&nbsp;4098;&nbsp;Sjoerd:&nbsp;4127;&nbsp;Dcab:&nbsp;8637678</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/bxjTKm/btqEXIUfkNS/rJCzdK6RhNBiG3cHwO6U4k/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;for&nbsp;x&nbsp;in&nbsp;range(1,&nbsp;6):<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(repr(x).rjust(2), repr(x*x).rjust(3), end=\' \')<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(repr(x*x*x).rjust(4))<br>...<br>&nbsp;1&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;1<br>&nbsp;2&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;8<br>&nbsp;3&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;27<br>&nbsp;4&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;64<br>&nbsp;5&nbsp;&nbsp;25&nbsp;&nbsp;125</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/kIVrp/btqEXIGHJIt/koy5Iii9Ivh7hkJhaZq5v1/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><p>&nbsp;</p><h4><strong>파일 입출력</strong></h4><p>&nbsp; - open(filename, mode)<br>&nbsp; &nbsp; . mode : r (readonly, 기본 값), w (writeonly), a (append), r+ (read and write), b (binary mode)</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"2\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;f&nbsp;=&nbsp;open(\'d:\\\\testfile\',&nbsp;\'r+\')<br>&gt;&gt;&gt;&nbsp;read_data&nbsp;=&nbsp;f.read()<br>&gt;&gt;&gt;&nbsp;read_data<br>\'This&nbsp;is&nbsp;the&nbsp;first&nbsp;line&nbsp;of&nbsp;the&nbsp;file.\\nSecond&nbsp;line&nbsp;of&nbsp;the&nbsp;file\\n\'<br>&gt;&gt;&gt;&nbsp;f.readline()<br>\'\'<br>&gt;&gt;&gt;&nbsp;f.seek(0)<br>0<br>&gt;&gt;&gt;&nbsp;f.readline()<br>\'This&nbsp;is&nbsp;the&nbsp;first&nbsp;line&nbsp;of&nbsp;the&nbsp;file.\\n\'<br>&gt;&gt;&gt;&nbsp;f.readline()<br>\'Second&nbsp;line&nbsp;of&nbsp;the&nbsp;file\\n\'<br>&gt;&gt;&gt;&nbsp;f.readline()<br>\'\'<br>&gt;&gt;&gt;&nbsp;f.write(\'This&nbsp;is&nbsp;a&nbsp;test\\n\')<br>15<br>&gt;&gt;&gt;&nbsp;f.seek(0)<br>0<br>&gt;&gt;&gt;&nbsp;f.read()<br>\'This&nbsp;is&nbsp;the&nbsp;first&nbsp;line&nbsp;of&nbsp;the&nbsp;file.\\nSecond&nbsp;line&nbsp;of&nbsp;the&nbsp;file\\nThis&nbsp;is&nbsp;a&nbsp;test\\n\'<br>&gt;&gt;&gt;&nbsp;f.closed<br>False</p></td></tr><tr><td colspan=\"2\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/4v9v1/btqEYaCZ3kC/QzcPqoGci5oI3Ce5ZWfbt1/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><p>&nbsp;</p><hr contenteditable=\"false\"><h4><strong>예외 처리</strong></h4><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p>&gt;&gt;&gt;&nbsp;import&nbsp;sys<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&nbsp;try:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;f = open(\'myfile.txt\')<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;s = f.readline()<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i = int(s.strip())<br>...&nbsp;except&nbsp;OSError&nbsp;as&nbsp;err:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(\"OS error: {0}\".format(err))<br>...&nbsp;except&nbsp;ValueError:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(\"Could not convert data to an integer.\")<br>...&nbsp;except:<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print(\"Unexpected error:\", sys.exc_info()[0])<br>...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;raise<br>...<br>OS&nbsp;error:&nbsp;[Errno&nbsp;2]&nbsp;No&nbsp;such&nbsp;file&nbsp;or&nbsp;directory:&nbsp;\'myfile.txt\'</p></td><td colspan=\"1\" rowspan=\"1\"><img src=\"https://blog.kakaocdn.net/dn/XOByG/btqEWCNJ654/sLC2lTBUFUNm8nQCRWmLn0/img.png\" contenteditable=\"false\" draggable=\"true\"></td></tr></tbody></table></div><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr contenteditable=\"false\"><h4><strong>파이썬 스타일 가이드</strong></h4><p>&nbsp;</p><p>PEP 8 -- Style Guide for Python Code</p><p>The official home of the Python Programming Language</p><p>www.python.org</p><p>&nbsp;</p><div class=\"tableWrapper\"><table style=\"min-width: 25px;\"><colgroup><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><ul><li><p>들여쓰기 단위 : 공백 4칸. 탭 사용 불가.</p></li><li><p>한 줄 길이 : 최대 79자.</p></li><li><p>함수, 클래스, 함수 내의 큰 코드 블록 사이는 빈 줄을 넣어 구분.</p></li><li><p>가능하다면, 주석은 별도의 줄로 입력.</p></li><li><p>DocString 사용을 권장.</p></li><li><p>연산자들 앞/뒤와 콤마 뒤에는 공백 입력.<br>괄호 바로 안쪽에는 공백 불가.<br>예) a&nbsp;=&nbsp;f(1,&nbsp;2)&nbsp;+&nbsp;g(3,&nbsp;4)</p></li><li><p>명명 규칙<br>. 상수 :&nbsp;UPPER_CASE_WITH_UNDERSCORES.<br>.&nbsp;패키지&nbsp;:&nbsp;짧은 소문자 이름 권고. 밑줄은 사용 불가.<br>. 모듈 : 짧은 소문자 이름 권고. 밑줄은 사용가능하지만 지양할 것.<br>. 클래스 :&nbsp;UpperCamelCase.<br>. 함수와 메소드 :&nbsp;lowercase_with_underscores.<br>. 메소드의 첫 번째 인수는 항상&nbsp;self를 사용.<br>. 클래스 메소드의 첫 번째 인수에는 항상 cls를 사용.</p></li><li><p>파이썬의 배포판 코드는 항상 UTF-8이나 파이썬2의 ASCII를 사용할 것.</p></li></ul></td></tr></tbody></table></div><p><br></p>','2021-05-20 05:21:26.578000','Python 개념 정리','jihyeong',1),(38,'<h2><strong>파이썬 tuple이란?</strong></h2><blockquote><p>\"<strong>튜플이란 셀수 있는 수량의 순서있는 열거이다</strong>\" 라고&nbsp;위키 백과에 나와있네요.</p></blockquote><p><strong>튜플의 모양</strong>은 아래와 같습니다.<br><strong>t1 = ()<br>t2 = (5, )<br>t3 = (5, 6, 4, 5)</strong><br>이런식으로 튜플을 만들 수 있습니다.<br>리스트에서는 대괄호 \"[, ]\"를 이용해서 리스트를 만들었다면<br><strong>튜플에서는&nbsp;소괄호 \"(, )\"를 이용</strong>해서 튜플을 만들 수 있습니다.<br><br></p><p>비어있는 튜플을 만들려면 t1 = () 처럼 비어있는 소괄호를 넣으면 됩니다.</p><p>눈치가 빠르신 분들은 이미 눈치를 채셨겠지만,<br><strong>값이 1개만 들어있는 튜플을 만들때에는 t2 = (1, )</strong>&nbsp;처럼 값을 하나 넣고 콤마(,)를 넣어주어야 합니다. 튜플의 규칙이죠.</p><p>또 튜플은 set자료형이랑 달리 중복된 값을 넣을 수 있습니다. t3을 보면 5가 두번 있는것을 볼 수 있죠. 튜플은 내부의&nbsp;값이 중복되도 상관없습니다.</p><p><br><br></p><p><strong>튜플의 특징</strong></p><p>튜플에서 가장 중요한 특징은&nbsp;<strong>\"값이 변하지 않는다\"&nbsp;</strong>라는 특징인데요.<br>리스트에서는 값을 변경할수 있지만,&nbsp;<strong>튜플은 내부의 값을 변경하거나 삭제 할 수 없습니다.</strong><br><br></p><p><br></p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-attr\">a</span> = (<span class=\"hljs-string\">\'b\'</span>, <span class=\"hljs-string\">\'l\'</span>, <span class=\"hljs-string\">\'o\'</span>, <span class=\"hljs-string\">\'g\'</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>)\n \n<span class=\"hljs-comment\"># 요소 값 변경 불가능 ERROR </span>\n<span class=\"hljs-comment\"># a[0] = 10 </span>\n \n<span class=\"hljs-comment\"># 요소 값 삭제 불가능 ERROR</span>\n<span class=\"hljs-comment\"># del a[0]</span>\n </code></pre></div><p>a[0] = 10 을 이용해서 요소 값을 변경하려 하면 에러가 발생하고<br>del a[0] 을 이용해서 요소의 값을 삭제하려 해도 에러가 발생합니다.</p><p>이렇게, 튜플의 내부 값은 한번 정하면 변하지 않습니다.</p><p>아 물론 튜플 자체는 삭제 가능합니다. 튜플전체 삭제 del a 이건 가능입니다.</p><p><br><br></p><p>위에서 배운&nbsp;<strong>튜플의 특징에 대해서 요약 정리</strong>를 해보면 아래와 같습니다.<br><strong>특징1) 소괄호 이용해서 생성 \"(, )\"<br>특징2) 비어있는 튜플은 ()<br>특징3) 값이 하나만 있는 튜플은 (5, ) 콤마 하나 꼭 붙여야함<br>특징4) 값이 중복될 수 있다.<br>특징5) 튜플의 요소 값은 변경하거나 삭제할 수 없다.</strong></p><p><br></p>','2021-05-20 05:22:58.715000','파이썬 튜플(tuple)에 대해서','jihyeong',1),(39,'<h1>줄바꿈 자동 적용</h1><blockquote><p>Ctrl + Shift + F</p></blockquote><h1>들여쓰기 자동 수정</h1><blockquote><p>WIN(Ctrl+I), MAC(Command+I)</p></blockquote><h1>블록 선택(다중 열 선택 모드)</h1><blockquote><p>Alt + Shift + A</p></blockquote><p>블록 모드가 되면 마우스 커서가 십자 모양이 된다. 이때 편집할 부분 골라서 하면 됨</p>','2021-05-20 05:23:42.417000','자바 꿀팁 모음','jihyeong',1),(40,'<div class=\"tableWrapper\"><table style=\"min-width: 25px;\"><colgroup><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><h1><strong>이클립스 자주사용하는 단축키 총 모음</strong></h1></td></tr></tbody></table></div><p>가장 많이 사용하는 핵심 단축키 1, 2 순위는</p><p>컨트롤 + 스페이스바 (자동완성도구)</p><p>컨트롤 + 1 (일부러 에러발생하여 쉽게 빠르게 만들기)</p><p>3순위 정도는 alt + shfit + s (조금 더 편한 자동완성도구 모음)<br><br></p><h2>이클립스 자주 사용하는 단축키 모음 정리</h2><p><br></p><p>alt + shift + n // 생성(프로젝트, 소스폴더, 패키지, 클래스 등)</p><p><br><br></p><p>ctrl + spacebar // 자동완성, 자동 import</p><p><br><br></p><p>ctrl + shift + c // 주석 처리</p><p><br><br></p><p>ctrl + c, v // 복사, 붙여넣기 이 부분은 설명 생략</p><p><br><br></p><p>ctrl + d // 코드 삭제</p><p><br><br></p><p>ctrl + z // 실행취소</p><p>ctrl + y // 실행 취소 이전으로</p><p><br><br></p><p>ctrl + shift와 마우스 더블클릭(3번클릭) 활용</p><p>alt 활용, ctrl + alt 활용</p><p><br><br></p><p>alt + shift + R // 이름 재 정의</p><p><br><br></p><p>ctrl + o // 변수, 함수, 클래스 쉽게 확인 후 이동</p><p><br></p><p>ctrl + L // 해당 줄 이동하기</p><p><br><br></p><p>F7 // 코드창으로 포커스 잡기 ( 확인 )</p><p><br><br></p><p>ctrl + shfit + F // 코드 포맷 형식 맞추기!</p><p><br></p><p>ctrl + s // 저장</p><p><br><br></p><p>ctrl + w // 열린 클래스 닫기</p><p><br></p><p>ctrl + e // 열린 클래스 쉽게 이동하기</p><p><br><br></p><p>ctrl + shift + E // ctrl + e 단축키가 창이 오픈된 형태인데</p><p>잘 안쓴다. 보통 ctrl + e 이걸로 많이 사용한다.</p><p><br><br></p><p>ctrl + shift + R // 클래스 열기</p><p><br><br></p><p>ctrl + + // 글씨크기 크게</p><p>ctrl + - // 글씨크기 작게</p><p><br><br></p><p>ctrl + F11 // 컴파일</p><p><br><br></p><p>alt + shift + s // 자동 완성 업그레이드 버전</p><p><br><br></p><p>ctrl + shift + L // 단축키 모음</p><p><br><br></p><p>ctlr + 1 // 에러처리</p><p><br><br></p><p>Ctrl + F // 찾기 또는 찾아바꾸기</p><p><br></p>','2021-05-20 05:24:58.826000','이클립스 활용 팁 자주사용하는 단축키 총 모음','hyeji',1),(41,'<p>포인터를 잘하면 C언어를 잘 다룬다고 할 수 있을 정도로 어렵기도하고 중요한 부분이기도 하다.</p><p>&nbsp;</p><hr contenteditable=\"false\"><h1><strong>1. 포인터란?</strong></h1><blockquote><p>포인터는 메모리의 주소를 담은 공간이다. 보통 변수에 값을 저장해 왔지만, 포인터변수의 경우는 변수의 값이 아닌 그 값의 메모리 주소를 담고 있는 변수이다.</p></blockquote><p><br></p><img src=\"https://t1.daumcdn.net/cfile/tistory/996A36395A783C863C\" contenteditable=\"false\" draggable=\"true\" class=\"\"><p><br></p><p>&nbsp;</p><p><strong>&nbsp;</strong></p><hr contenteditable=\"false\"><p><strong>&nbsp;</strong><br><br></p><h1><strong>2. 포인터 변수의 선언 &amp; 초기화</strong></h1><blockquote><p>포인터변수를 사용 하기 위해서는 보통 변수를 선언하고 초기화 하듯이 포인터변수도 해줘야 한다.</p></blockquote><blockquote><p>다만&nbsp;*를 사용해야만 하는 차이가 존재한다.</p></blockquote><p>&nbsp;</p><p><strong>int* pointer = NULL;</strong></p><p>&nbsp;</p><p>포인터를 초기화 할때는 무조건 NULL을 이용해서 해야 한다.</p><p>&nbsp;</p><p>&nbsp;</p><hr contenteditable=\"false\"><p>&nbsp;<br><br></p><h1><strong>3. 포인터 변수의 사용</strong></h1><blockquote><p>&amp; 은 메모리주소를 알고 싶을때 사용하고, * 은 특정한 메모리 주소의 데이터 값을 알고 싶을때 사용한다.</p></blockquote><p>&nbsp;</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-comment\">#include &lt;stdio.h&gt;</span>\n \n<span class=\"hljs-keyword\">int</span> main(void) {\n \n    <span class=\"hljs-regexp\">//</span> 일반 변수\n    <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">40</span>;\n \n    <span class=\"hljs-regexp\">//</span> 포인터 변수 선언과 초기화\n    <span class=\"hljs-keyword\">int</span>* numPointer = NULL;\n    \n    <span class=\"hljs-regexp\">//</span> num의 주소를 numPointer 포인터변수에 저장\n    numPointer = &amp;num; \n \n \n    <span class=\"hljs-regexp\">//</span> 일반 변수 num의 값 출력\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"num = %d\\n\"</span>, num);\n \n    <span class=\"hljs-regexp\">//</span> num의 주소 값 출력\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"&amp;num = %x\\n\"</span>, &amp;num);\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"numPointer = %x\\n\"</span>, numPointer);\n \n    <span class=\"hljs-regexp\">//</span> numPointer가 가지고 있는 주소의 데이터 값\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"*numPointer = %d\\n\"</span>, *numPointer);\n \n    <span class=\"hljs-regexp\">//</span> numPointer의 주소\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"&amp;numPointer = %x\\n\"</span>, &amp;numPointer);\n \n    <span class=\"hljs-regexp\">//</span> numPointer의 주소의 값의 값\n    <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"**&amp;numPointer = %d\\n\"</span>, **&amp;numPointer);\n \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n​</code></pre></div><p>&nbsp;</p><p><br></p><img src=\"https://t1.daumcdn.net/cfile/tistory/9978F0465A783DDE15\" contenteditable=\"false\" draggable=\"true\"><p><br></p>','2021-05-20 05:27:28.170000','C언어 :: 포인터란(Pointer)','hyeji',1),(42,'<p>그래프를 탐색하는 방법에는 크게&nbsp;<strong>깊이 우선 탐색(DFS)</strong>과&nbsp;<strong>너비 우선 탐색(BFS)</strong>이 있습니다.</p><p>&nbsp;</p><p>?여기서 그래프란,&nbsp;<strong>정점(node)과 그 정점을 연결하는 간선(edge)으로 이루어진 자료구조의 일종</strong>을 말하며,</p><p>그래프를 탐색한다는 것은&nbsp;<strong>하나의 정점으로부터 시작하여 차례대로 모든 정점들을 한 번씩 방문하는 것</strong>을 말합니다.</p><p><br><em>그래프와 트리의 차이가 궁금하다면? ??</em><br><br></p><p>더보기</p><p>&nbsp;</p><h1><strong>1. 깊이 우선 탐색 (DFS, Depth-First Search)</strong></h1><h4><strong>:&nbsp;최대한 깊이 내려간 뒤, 더이상 깊이 갈 곳이 없을 경우 옆으로 이동</strong></h4><p><br></p><img src=\"https://blog.kakaocdn.net/dn/xC9Vq/btqB8n5A25K/GyOf4iwqu8euOyhwtFuyj1/img.gif\" contenteditable=\"false\" draggable=\"true\"><p>출처&nbsp;https://developer-mac.tistory.com/64</p><p><br></p><p>&nbsp;</p><h2><strong>? 깊이 우선 탐색의 개념</strong></h2><p>루트 노드(혹은 다른 임의의 노드)에서 시작해서&nbsp;다음 분기(branch)로 넘어가기 전에</p><p><strong>해당 분기를 완벽하게 탐색</strong>하는 방식을 말합니다.</p><p>&nbsp;</p><p>예를 들어, 미로찾기를 할 때 최대한 한 방향으로 갈 수 있을 때까지 쭉 가다가</p><p>더 이상 갈 수 없게 되면 다시 가장 가까운 갈림길로 돌아와서</p><p>그 갈림길부터 다시 다른 방향으로 탐색을 진행하는 것이 깊이 우선 탐색 방식이라고 할 수 있습니다.</p><p>&nbsp;</p><p>1. 모든 노드를 방문하고자 하는 경우에 이 방법을 선택함</p><p>2. 깊이 우선 탐색(DFS)이 너비 우선 탐색(BFS)보다&nbsp;<strong>좀 더 간단함</strong></p><p>3. 검색 속도 자체는 너비 우선 탐색(BFS)에 비해서&nbsp;<strong>느림</strong></p><p>&nbsp;</p><h4><strong>2. 너비 우선 탐색 (BFS, Breadth-First Search)</strong></h4><h4><strong>: 최대한 넓게 이동한 다음, 더 이상 갈 수 없을 때 아래로 이동</strong></h4><p>&nbsp;</p><p><br></p><img src=\"https://blog.kakaocdn.net/dn/c305k7/btqB5E2hI4r/ea7vFo08tkDYo4c8wkfVok/img.gif\" contenteditable=\"false\" draggable=\"true\"><p>출처&nbsp;https://developer-mac.tistory.com/64</p><p><br></p><p><strong>&nbsp;</strong></p><h2><strong>? 너비 우선 탐색의 개념</strong></h2><p>루트 노드(혹은 다른 임의의 노드)에서 시작해서&nbsp;<strong>인접한 노드를 먼저</strong>&nbsp;<strong>탐색</strong>하는 방법으로,</p><p>시작 정점으로부터 가까운 정점을 먼저 방문하고 멀리 떨어져 있는 정점을 나중에 방문하는 순회 방법입니다.</p><p>&nbsp;</p><p>주로 두 노드 사이의&nbsp;<strong>최단 경로</strong>를 찾고 싶을 때 이 방법을 선택합니다.</p><p>ex) 지구 상에 존재하는 모든 친구 관계를 그래프로 표현한 후 Sam과 Eddie사이에 존재하는 경로를 찾는 경우</p><p>&nbsp;</p><p>* 깊이 우선 탐색의 경우 - 모든 친구 관계를 다 살펴봐야 할지도 모름</p><p>* 너비 우선 탐색의 경우 -&nbsp;Sam과&nbsp;가까운 관계부터 탐색</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p><strong>3. 깊이 우선 탐색(DFS) 과 너비 우선 탐색(BFS) 비교</strong></p><p>&nbsp;</p><p><br></p><img src=\"https://blog.kakaocdn.net/dn/cQYkI8/btqB8oDsMGe/EEYm0cKGYhxTR0kJhGiJPK/img.gif\" contenteditable=\"false\" draggable=\"true\"><p>출처 https://namu.wiki/w/BFS</p><p><br></p><p>&nbsp;</p><div class=\"tableWrapper\"><table style=\"min-width: 50px;\"><colgroup><col><col></colgroup><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p><strong>DFS(깊이우선탐색)</strong></p></td><td colspan=\"1\" rowspan=\"1\"><p><strong>BFS(너비우선탐색)</strong></p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>현재 정점에서 갈 수 있는 점들까지 들어가면서 탐색</p></td><td colspan=\"1\" rowspan=\"1\"><p>현재 정점에 연결된 가까운 점들부터 탐색</p></td></tr><tr><td colspan=\"1\" rowspan=\"1\"><p>스택 또는 재귀함수로 구현</p></td><td colspan=\"1\" rowspan=\"1\"><p>큐를 이용해서 구현</p></td></tr></tbody></table></div><p><strong>?DFS와 BFS의 시간복잡도</strong></p><p>두 방식 모두 조건 내의 모든 노드를 검색한다는 점에서 시간 복잡도는 동일합니다.</p><p>DFS와 BFS 둘 다 다음 노드가 방문하였는지를 확인하는 시간과 각 노드를 방문하는 시간을 합하면 됩니다.</p><p>&nbsp;</p><p>N은 노드, E는 간선일 때</p><blockquote><p>인접 리스트 : O(N+E)<br>인접 행렬 : O(N²)</p></blockquote><p>일반적으로 E(간선)의 크기가 N²에 비해 상대적으로 적기 때문에</p><p>인접 리스트 방식이 효율적임</p><p>&nbsp;</p><p>&nbsp;</p><p>더보기</p><p>​</p><h4><strong>3. 깊이 우선 탐색(DFS)과 너비 우선 탐색(BFS) 활용한 문제 유형/응용</strong></h4><p>DFS, BFS은 특징에 따라 사용에 더 적합한 문제 유형들이 있습니다.</p><p>​</p><p>1) 그래프의&nbsp;<strong>모든 정점을 방문</strong>하는 것이 주요한 문제</p><p>단순히 모든 정점을 방문하는 것이 중요한 문제의 경우 DFS, BFS 두 가지 방법 중 어느 것을 사용하셔도 상관없습니다.</p><p>둘 중 편한 것을 사용하시면 됩니다.</p><p>​</p><p>2)&nbsp;<strong>경로의 특징</strong>을 저장해둬야 하는 문제</p><p>예를 들면 각 정점에 숫자가 적혀있고 a부터 b까지 가는 경로를 구하는데 경로에 같은 숫자가 있으면 안 된다는 문제 등, 각각의 경로마다 특징을 저장해둬야 할 때는 DFS를 사용합니다. (BFS는 경로의 특징을 가지지 못합니다)</p><p>&nbsp;</p><p>3)&nbsp;<strong>최단거리</strong>&nbsp;구해야 하는 문제</p><p>미로 찾기 등 최단거리를 구해야 할 경우,&nbsp;BFS가 유리합니다.</p><p>왜냐하면 깊이 우선 탐색으로 경로를 검색할 경우&nbsp;<em>처음으로 발견되는 해답이 최단거리가 아닐 수 있지만,&nbsp;</em><br>너비 우선 탐색으로 현재 노드에서&nbsp;가까운 곳부터 찾기 때문에경로를 탐색 시 먼저 찾아지는 해답이 곧 최단거리기 때문입니다.</p><p>&nbsp;</p><p>이밖에도&nbsp;</p><p>- 검색 대상 그래프가 정말 크다면 DFS를 고려<br>- 검색대상의 규모가 크지 않고, 검색 시작 지점으로부터 원하는 대상이 별로 멀지 않다면 BFS</p><p>&nbsp;</p><h4><strong>4. DFS와 BFS을 사용한 JAVA코드</strong></h4><p>&nbsp;</p><p><strong>DFS 알고리즘</strong>에 경우 두 가지 방법으로 풀 수 있는데,</p><p>첫 번째로&nbsp;<strong>스택</strong>을 이용하는 것</p><p>두 번째로&nbsp;<strong>재귀함수</strong>를재귀 함수를 이용하는 것인데, 재귀 함수를 이용하는 것이 가장 보편적이고 짧은 코드를 작성할 수 있다.</p><p>&nbsp;</p><p>재귀 함수란 함수 내부에서 함수가 자기 자신을 또다시 호출하는 함수를 의미합니다.</p><p>이러한 재귀 호출은 자기가 자신을 계속해서 호출하므로, 끝없이 반복되기 때문에</p><p>함수 내에&nbsp;<strong>재귀 호출을 중단하도록 조건이 변경될 명령문을 반드시&nbsp;포함</strong>해야 합니다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-comment\">/* 인접 리스트 이용 */</span>\n<span class=\"hljs-keyword\">class</span> Graph {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> V;\n  <span class=\"hljs-keyword\">private</span> LinkedList&lt;Integer&gt; adj<span class=\"hljs-literal\">[]</span>;\n \n  <span class=\"hljs-constructor\">Graph(</span><span class=\"hljs-constructor hljs-params\">int</span><span class=\"hljs-constructor\"> </span><span class=\"hljs-constructor hljs-params\">v</span><span class=\"hljs-constructor\">)</span> {\n      V = v;\n      adj = <span class=\"hljs-keyword\">new</span> LinkedList<span class=\"hljs-literal\">[</span><span class=\"hljs-literal hljs-identifier\">v</span><span class=\"hljs-literal\">]</span>;\n      <span class=\"hljs-comment\">// 인접 리스트 초기화</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;v; ++i)\n          adj<span class=\"hljs-literal\">[</span><span class=\"hljs-literal hljs-identifier\">i</span><span class=\"hljs-literal\">]</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">LinkedList()</span>;\n  }\n  void add<span class=\"hljs-constructor\">Edge(</span><span class=\"hljs-constructor hljs-params\">int</span><span class=\"hljs-constructor\"> </span><span class=\"hljs-constructor hljs-params\">v</span><span class=\"hljs-constructor\">, </span><span class=\"hljs-constructor hljs-params\">int</span><span class=\"hljs-constructor\"> </span><span class=\"hljs-constructor hljs-params\">w</span><span class=\"hljs-constructor\">)</span> { adj<span class=\"hljs-literal\">[</span><span class=\"hljs-literal hljs-identifier\">v</span><span class=\"hljs-literal\">]</span>.add(w); }\n   \n  <span class=\"hljs-comment\">/* DFS */</span>\n  void <span class=\"hljs-constructor\">DFS(</span><span class=\"hljs-constructor hljs-params\">int</span><span class=\"hljs-constructor\"> </span><span class=\"hljs-constructor hljs-params\">v</span><span class=\"hljs-constructor\">)</span> {\n      boolean visited<span class=\"hljs-literal\">[]</span> = <span class=\"hljs-keyword\">new</span> boolean<span class=\"hljs-literal\">[V]</span>;\n \n      <span class=\"hljs-comment\">// v를 시작 노드로 DFSUtil 재귀 호출</span>\n      <span class=\"hljs-constructor\">DFSUtil(</span><span class=\"hljs-constructor hljs-params\">v</span><span class=\"hljs-constructor\">, </span><span class=\"hljs-constructor hljs-params\">visited</span><span class=\"hljs-constructor\">)</span>;\n  }\n  \n  <span class=\"hljs-comment\">/* DFS에 의해 사용되는 함수 */</span>\n  void <span class=\"hljs-constructor\">DFSUtil(</span><span class=\"hljs-constructor hljs-params\">int</span><span class=\"hljs-constructor\"> </span><span class=\"hljs-constructor hljs-params\">v</span><span class=\"hljs-constructor\">, </span><span class=\"hljs-constructor hljs-params\">boolean</span><span class=\"hljs-constructor\"> </span><span class=\"hljs-constructor hljs-params\">visited</span><span class=\"hljs-constructor\">[])</span> {\n      <span class=\"hljs-comment\">// 현재 노드를 방문한 것으로 표시하고 값을 출력</span>\n      visited<span class=\"hljs-literal\">[</span><span class=\"hljs-literal hljs-identifier\">v</span><span class=\"hljs-literal\">]</span> = <span class=\"hljs-literal\">true</span>;\n      <span class=\"hljs-module-access hljs-module hljs-identifier\">System</span><span class=\"hljs-module-access hljs-module\">.</span>out.print(v + <span class=\"hljs-string\">\" \"</span>);\n \n      <span class=\"hljs-comment\">// 방문한 노드와 인접한 모든 노드를 가져온다.</span>\n      Iterator&lt;Integer&gt; it = adj<span class=\"hljs-literal\">[</span><span class=\"hljs-literal hljs-identifier\">v</span><span class=\"hljs-literal\">]</span>.<span class=\"hljs-built_in\">list</span><span class=\"hljs-constructor\">Iterator()</span>;\n      <span class=\"hljs-keyword\">while</span> (it.has<span class=\"hljs-constructor\">Next()</span>) {\n          <span class=\"hljs-built_in\">int</span> n = it.next<span class=\"hljs-literal\">()</span>;\n          <span class=\"hljs-comment\">// 방문하지 않은 노드면 해당 노드를 시작 노드로 다시 DFSUtil 호출</span>\n          <span class=\"hljs-keyword\">if</span> (!visited<span class=\"hljs-literal\">[</span><span class=\"hljs-literal hljs-identifier\">n</span><span class=\"hljs-literal\">]</span>)\n              <span class=\"hljs-constructor\">DFSUtil(</span><span class=\"hljs-constructor hljs-params\">n</span><span class=\"hljs-constructor\">, </span><span class=\"hljs-constructor hljs-params\">visited</span><span class=\"hljs-constructor\">)</span>;\n      }\n  }\n\n}</code></pre></div><p>&nbsp;</p><p><strong>BFS 알고리즘</strong>은 큐(Queue)를 사용해서 문제를 해결하면 됩니다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">class Graph {\n  private int V;\n  private LinkedList&lt;Integer&gt; adj[]<span class=\"hljs-comment\">;</span>\n \n  Graph(<span class=\"hljs-name hljs-builtin-name\">int</span> v) {\n    V = v;\n    adj = new LinkedList[v]<span class=\"hljs-comment\">;</span>\n    for (<span class=\"hljs-name hljs-builtin-name\">int</span> i=0; i&lt;v; ++i)\n      adj[i] = new LinkedList()<span class=\"hljs-comment\">;</span>\n  }\n \n  void addEdge(<span class=\"hljs-name hljs-builtin-name\">int</span> v, int w) { adj[v].add(<span class=\"hljs-name\">w</span>)<span class=\"hljs-comment\">; }</span>\n \n  /* BFS */\n  void BFS(<span class=\"hljs-name hljs-builtin-name\">int</span> s) {\n    boolean visited[] = new boolean[V]<span class=\"hljs-comment\">; //방문여부 확인용 변수</span>\n    LinkedList&lt;Integer&gt; queue = new LinkedList&lt;Integer&gt;()<span class=\"hljs-comment\">; //연결리스트 생성</span>\n \n    visited[s] = <span class=\"hljs-literal\">true</span><span class=\"hljs-comment\">;</span>\n    queue.add(<span class=\"hljs-name\">s</span>)<span class=\"hljs-comment\">;</span>\n \n    while (<span class=\"hljs-name\">queue.size</span>() != <span class=\"hljs-number\">0</span>) {\n      // 방문한 노드를 큐에서 추출(<span class=\"hljs-name\">dequeue</span>)하고 값을 출력\n      s = queue.poll()<span class=\"hljs-comment\">;</span>\n      System.out.print(<span class=\"hljs-name\">s</span> + <span class=\"hljs-string\">\" \"</span>)<span class=\"hljs-comment\">;</span>\n \n      // 방문한 노드와 인접한 모든 노드를 가져온다.\n      Iterator&lt;Integer&gt; i = adj[s].listIterator()<span class=\"hljs-comment\">;</span>\n      while (<span class=\"hljs-name\">i.hasNext</span>()) {\n        int n = i.next()<span class=\"hljs-comment\">;</span>\n        \n        // 방문하지 않은 노드면 방문한 것으로 표시하고 큐에 삽입(<span class=\"hljs-name\">enqueue</span>)\n        if (<span class=\"hljs-name\">!visited</span>[n]) {\n          visited[n] = <span class=\"hljs-literal\">true</span><span class=\"hljs-comment\">;</span>\n          queue.add(<span class=\"hljs-name\">n</span>)<span class=\"hljs-comment\">;</span>\n        }\n      }\n    }\n  }\n}\n<br></code></pre></div><p><br><br></p>','2021-05-20 05:29:25.348000','깊이 우선 탐색(DFS) 과 너비 우선 탐색(BFS)','hyeji',1),(43,'<p>오늘 배운 큐에 대해서 정리를 해봤습니다 ?</p><p><br></p><h1><strong>Queue</strong></h1><p>Queue는 자료구조의 스택과 반대의 구조라고 생각하면 된다. 큐는 FIFO(First In First Out)의 형태를 가지게 됩니다. 가장 먼저 들어온 데이터가 가장 먼저 나가는 구조를 말한다.</p><p><br></p><img src=\"https://blog.kakaocdn.net/dn/cPffuk/btqRxZQDdZN/miYr65640TgaOvLVjJ9xp0/img.png\" contenteditable=\"false\" draggable=\"true\"><p><br></p><ul><li><p>Enqueue : 큐 맨 뒤에 데이터를 추가</p></li><li><p>Dequeue : 큐 맨 앞쪽의 데이터를 삭제</p></li></ul><h4><strong>특징</strong></h4><ol><li><p>큐의 한쪽 끝은 Front로 정하여 삭제연산만 수행한다.</p></li><li><p>다른 한쪽 끝은 Rear로 정하여 삽입연삼나 수행한다.</p></li><li><p>그래프 넓이 우선 탐색(BFS)에서 사용된다.</p></li><li><p>컴퓨터 버퍼에서 주로 사용, 마구 입력이 되었으나 처리를 하지 못할 때, 버퍼(큐)를 만들어 대기 시킨다. 먼저 들어온 입력먼저 처리</p></li></ol><hr contenteditable=\"false\"><h1><strong>Java로 큐를 구현</strong></h1><p>먼저 자바에서 제공해주는 Queue클래스를 이용해 Queue를 구현해보자.</p><p>자바에서는 스택을 클래스로 구현하여 제공하지만 큐는 Queue인터페이스만 있고 별도의 클래스가 없다. 그래서 Queue인터페이스를 구현한 클래스들을 사용해야 한다. 이 구조가 잘 이해가지 않는다면 디자인 패턴중 생성패턴을 공부해보길 바란다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-keyword\">import</span> java.util.LinkedList;\n<span class=\"hljs-keyword\">import</span> java.util.Queue;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">Main</span><span class=\"hljs-class\"> {</span>\n\n    <span class=\"hljs-function hljs-keyword\">public</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-keyword\">static</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-keyword\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">main</span><span class=\"hljs-function hljs-params\">(</span><span class=\"hljs-function hljs-params hljs-keyword\">String</span><span class=\"hljs-function hljs-params\">[] args)</span><span class=\"hljs-function\"> </span>{\n        Queue&lt;Integer&gt; queue = <span class=\"hljs-keyword\">new</span> LinkedList&lt;Integer&gt;();\n\n        queue.<span class=\"hljs-built_in\">offer</span>(<span class=\"hljs-number\">1</span>);\n        queue.<span class=\"hljs-built_in\">offer</span>(<span class=\"hljs-number\">2</span>);\n        queue.<span class=\"hljs-built_in\">offer</span>(<span class=\"hljs-number\">3</span>);\n        queue.<span class=\"hljs-built_in\">offer</span>(<span class=\"hljs-number\">4</span>);\n        queue.<span class=\"hljs-built_in\">offer</span>(<span class=\"hljs-number\">5</span>);\n\n        <span class=\"hljs-keyword\">while</span>(!queue.<span class=\"hljs-built_in\">isEmpty</span>()) {\n            System.out.<span class=\"hljs-built_in\">println</span>(queue.<span class=\"hljs-built_in\">poll</span>());\n        }\n\n    }\n\n}</code></pre></div><h5>출력결과</h5><p><br></p><img src=\"https://blog.kakaocdn.net/dn/qQzW7/btqRAk76uCH/kYDZAIQkbVur6KWpHYtgoK/img.png\" contenteditable=\"false\" draggable=\"true\"><p><br></p><p><br>큐 인터페이스를 이용하면 간단하게 구현할수 있다. 하지만 큐를 만들줄도 알아야 한다.</p><h3><strong>배열을 이용해서 Queue 구현</strong></h3><ul><li><p>queuelsEmpty() : 큐 안이 비었는지 판단하는 함수</p></li><li><p>queueIsFull() : 배열의 최대크기를 벗어나면 안되기에 큐에 더이상 들어갈 공간이 없는지 판단하는 함수</p></li><li><p>size() : queue에 현재 들어가 있는 데이터의 개수를 return하는 함수</p></li><li><p>push(int value) : 큐 안에 데이터를 집어넣는 함수</p></li><li><p>peek() : 큐 안의 데이터들중 가장 먼저 나오는 데이터를 return 하는 함수</p></li><li><p>pop() : 큐 안의 데이터들 중 가장 먼저 나올수 있는 데이터를 return 하고 삭제하는 함수</p></li></ul><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">ArrayQueue</span><span class=\"hljs-class\"> {</span>\n    <span class=\"hljs-keyword\">int</span> MAX = <span class=\"hljs-number\">1000</span>;\n    <span class=\"hljs-keyword\">int</span> front;    <span class=\"hljs-comment\">//머리 쪽에 위치할 index값, pop할때 참조하는 index</span>\n    <span class=\"hljs-keyword\">int</span> rear;    <span class=\"hljs-comment\">//꼬리 쪽에 위치할 index값, push할때 참조하는 index</span>\n    <span class=\"hljs-keyword\">int</span> [] queue;\n    <span class=\"hljs-function hljs-keyword\">public</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">ArrayQueue</span><span class=\"hljs-function hljs-params\">()</span><span class=\"hljs-function\"> </span>{\n        front = rear = <span class=\"hljs-number\">0</span>;    <span class=\"hljs-comment\">//초기값 0</span>\n        queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[MAX]; <span class=\"hljs-comment\">//배열 생성</span>\n    }\n\n    <span class=\"hljs-function hljs-keyword\">public</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-keyword\">boolean</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">queueisEmpty</span><span class=\"hljs-function hljs-params\">()</span><span class=\"hljs-function\"> </span>{ <span class=\"hljs-comment\">//queue에 아무것도 들어있지 않은지 판단하는 함수</span>\n        <span class=\"hljs-keyword\">return</span> front == rear;\n    }\n    <span class=\"hljs-function hljs-keyword\">public</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-keyword\">boolean</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">queueisFull</span><span class=\"hljs-function hljs-params\">()</span><span class=\"hljs-function\"> </span>{    <span class=\"hljs-comment\">//queue가 가득 차 공간이 없는지 판단하는 함수</span>\n        <span class=\"hljs-keyword\">if</span>(rear == MAX<span class=\"hljs-number\">-1</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span> \n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-function hljs-keyword\">public</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-keyword\">int</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">size</span><span class=\"hljs-function hljs-params\">()</span><span class=\"hljs-function\"> </span>{ <span class=\"hljs-comment\">//queue에 현재 들어가 있는 데이터의 개수를 return</span>\n        <span class=\"hljs-keyword\">return</span> front-rear;\n    }\n    <span class=\"hljs-function hljs-keyword\">public</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-keyword\">void</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">push</span><span class=\"hljs-function hljs-params\">(</span><span class=\"hljs-function hljs-params hljs-keyword\">int</span><span class=\"hljs-function hljs-params\"> value)</span><span class=\"hljs-function\"> </span>{\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">queueisFull</span>()) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"Queue is Full\"</span>);\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        queue[rear++] = value; <span class=\"hljs-comment\">//rear가 위치한 곳에 값을 넣어주고 rear를 증가시킨다.</span>\n    }\n    <span class=\"hljs-function hljs-keyword\">public</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-keyword\">int</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">pop</span><span class=\"hljs-function hljs-params\">()</span><span class=\"hljs-function\"> </span>{\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">queueisEmpty</span>()) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"Queue is Empty\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n        }\n        <span class=\"hljs-keyword\">int</span> popValue = queue[front++];\n        <span class=\"hljs-keyword\">return</span> popValue;\n    }\n    <span class=\"hljs-function hljs-keyword\">public</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-keyword\">int</span><span class=\"hljs-function\"> </span><span class=\"hljs-function hljs-title\">peek</span><span class=\"hljs-function hljs-params\">()</span><span class=\"hljs-function\"> </span>{\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">queueisEmpty</span>()) {\n            System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"Queue is Empty\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n        }\n        <span class=\"hljs-keyword\">int</span> popValue = queue[front];\n        <span class=\"hljs-keyword\">return</span> popValue;\n    }\n}</code></pre></div><p>배열로 구현한 Queue는 push pop이 간단하지만 배열의 크기가 유한해 큐의 크기가 다 차버리면 사용할수 없다. 그러면 LinkedList로 Queue를 구현해야 한다.</p><h3><strong>LinkedList을 이용해서 Queue 구현</strong></h3><p>똑같이 Node를 이용해서 Queue를 구현한다. 값이 들어갈 Node와 Queue를 관리할 NodeManager 클래스를 만들면 된다.</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">QueueNode</span><span class=\"hljs-class\"> </span>{\n    int value; <span class=\"hljs-comment\">//값을 넣음</span>\n    QueueNode queueNode; <span class=\"hljs-comment\">//다음 노드를 가리킴</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function hljs-title\">QueueNode</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-params\">int value</span><span class=\"hljs-function\">)</span> {\n        <span class=\"hljs-built_in\">this</span>.value = value;\n        queueNode = <span class=\"hljs-literal\">null</span>;\n    }\n    <span class=\"hljs-keyword\">public</span> int <span class=\"hljs-function hljs-title\">getValue</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span> {\n        <span class=\"hljs-keyword\">return</span> value;\n    }\n    <span class=\"hljs-keyword\">public</span> QueueNode <span class=\"hljs-function hljs-title\">getNextNode</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span> {\n        <span class=\"hljs-keyword\">return</span> queueNode;\n    }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-function hljs-title\">setNextNode</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-params\">QueueNode queueNode</span><span class=\"hljs-function\">)</span> {\n        <span class=\"hljs-built_in\">this</span>.queueNode = queueNode;\n    }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">QueueNodeManager</span>{ <span class=\"hljs-comment\">//큐의 기능을 만들 클래스</span>\n    QueueNode front,rear;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function hljs-title\">QueueNodeManager</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span> {\n        front = rear = <span class=\"hljs-literal\">null</span>;\n    }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-function hljs-title\">queueisEmpty</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span> {\n        <span class=\"hljs-keyword\">if</span>(front == <span class=\"hljs-literal\">null</span>  &amp;&amp; rear == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }<span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-function hljs-title\">push</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-params\">int value</span><span class=\"hljs-function\">)</span> {\n        QueueNode queueNode = <span class=\"hljs-keyword\">new</span> QueueNode(value);\n        <span class=\"hljs-keyword\">if</span>(queueisEmpty()) {    <span class=\"hljs-comment\">//큐안에 데이터가 없으면 첫번째 Node에 front와 rear를 연결</span>\n            front = rear = queueNode;\n        }<span class=\"hljs-keyword\">else</span> {\n            front.setNextNode(queueNode); <span class=\"hljs-comment\">//큐 안에 데이터가 있으면 front를 다음 노드에 연결 후 front의 값을 마지막 노드로 삽입</span>\n            front = queueNode;\n        }\n    }\n    <span class=\"hljs-keyword\">public</span> QueueNode <span class=\"hljs-function hljs-title\">pop</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span> {\n        <span class=\"hljs-keyword\">if</span>(queueisEmpty()) {\n            System.out.println(<span class=\"hljs-string\">\"Queue is Empty\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }<span class=\"hljs-keyword\">else</span> {\n            QueueNode popNode = rear;\n            rear = rear.getNextNode();\n            <span class=\"hljs-keyword\">return</span> popNode;\n        }\n    }\n    <span class=\"hljs-keyword\">public</span> QueueNode <span class=\"hljs-function hljs-title\">peek</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span> {\n        <span class=\"hljs-keyword\">if</span>(queueisEmpty()) {\n            System.out.println(<span class=\"hljs-string\">\"Queue is Empty\"</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }<span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> rear;\n        }\n    }\n    <span class=\"hljs-keyword\">public</span> int <span class=\"hljs-function hljs-title\">size</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span> {\n        QueueNode front2 = front;\n        QueueNode rear2 = rear;\n        int count = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">while</span>(front2 != rear2 &amp;&amp; rear2 !=<span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">//큐가 비어있는 경우가 있을수도 있을때도 생각해야함</span>\n            count++;\n            rear2 = rear2.getNextNode();\n        }\n        <span class=\"hljs-keyword\">return</span> count;\n    }\n}\n<br></code></pre></div><p>LinkedList로 Queue를 만들게 되면 규현은 복잡하지만 큐의 크기도 무한하고 Queue안에 원하는 기능을 넣을수도 있다는 장점이 있다.</p>','2021-05-20 05:31:43.615000','JAVA로 큐(Queue)구현','hoyeon',1),(46,'<blockquote><p>\"튜플이란 셀수 있는 수량의 순서있는 열거이다\" 라고&nbsp;위키 백과에 나와있네요.</p></blockquote><p><strong>튜플의 모양</strong>은 아래와 같습니다.<strong>t1 = ()t2 = (5, )t3 = (5, 6, 4, 5)이런식으로 튜플을 만들 수 있습니다.리스트에서는 대괄호 \"[, ]\"를 이용해서 리스트를 만들었다면튜플에서는&nbsp;소괄호 \"(, )\"를 이용</strong>해서 튜플을 만들 수 있습니다.</p><p>비어있는 튜플을 만들려면 t1 = () 처럼 비어있는 소괄호를 넣으면 됩니다.</p><p>눈치가 빠르신 분들은 이미 눈치를 채셨겠지만,<strong>값이 1개만 들어있는 튜플을 만들때에는 t2 = (1, )</strong>&nbsp;처럼 값을 하나 넣고 콤마(,)를 넣어주어야 합니다. 튜플의 규칙이죠.</p><p>또 튜플은 set자료형이랑 달리 중복된 값을 넣을 수 있습니다. t3을 보면 5가 두번 있는것을 볼 수 있죠. 튜플은 내부의&nbsp;값이 중복되도 상관없습니다.</p><p><strong>튜플의 특징</strong></p><p>튜플에서 가장 중요한 특징은&nbsp;<strong>\"값이 변하지 않는다\"</strong>&nbsp;라는 특징인데요.리스트에서는 값을 변경할수 있지만,&nbsp;<strong>튜플은 내부의 값을 변경하거나 삭제 할 수 없습니다.</strong></p><div data-v-00217756=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-00217756=\"\"><code data-v-00217756=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">a = (<span class=\"hljs-string\">\'b\'</span>, <span class=\"hljs-string\">\'l\'</span>, <span class=\"hljs-string\">\'o\'</span>, <span class=\"hljs-string\">\'g\'</span>, 9, 8)\n \n<span class=\"hljs-comment\"># 요소 값 변경 불가능 ERROR </span>\n<span class=\"hljs-comment\"># a[0] = 10 </span>\n \n<span class=\"hljs-comment\"># 요소 값 삭제 불가능 ERROR</span>\n<span class=\"hljs-comment\"># del a[0]</span>\n<br></code></pre></div><p>a[0] = 10 을 이용해서 요소 값을 변경하려 하면 에러가 발생하고del a[0] 을 이용해서 요소의 값을 삭제하려 해도 에러가 발생합니다.</p><p>이렇게, 튜플의 내부 값은 한번 정하면 변하지 않습니다.</p><p>아 물론 튜플 자체는 삭제 가능합니다. 튜플전체 삭제 del a 이건 가능입니다.</p><p>위에서 배운&nbsp;<strong>튜플의 특징에 대해서 요약 정리</strong>를 해보면 아래와 같습니다.<strong>특징1) 소괄호 이용해서 생성 \"(, )\"특징2) 비어있는 튜플은 ()특징3) 값이 하나만 있는 튜플은 (5, ) 콤마 하나 꼭 붙여야함특징4) 값이 중복될 수 있다.특징5) 튜플의 요소 값은 변경하거나 삭제할 수 없다.</strong></p>','2021-05-20 18:58:23.079000','파이썬 tuple이란?','dovvn',65);
/*!40000 ALTER TABLE `info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `monthly`
--

DROP TABLE IF EXISTS `monthly`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `monthly` (
  `mon_id` int NOT NULL AUTO_INCREMENT,
  `user_id` varchar(50) NOT NULL,
  `mon_year` int NOT NULL,
  `mon_month` int NOT NULL,
  `mon_start_date` date NOT NULL,
  `mon_end_date` date NOT NULL,
  `mon_content` text NOT NULL,
  `mon_color` int NOT NULL,
  PRIMARY KEY (`mon_id`),
  KEY `monthly_ibfk_1` (`user_id`),
  CONSTRAINT `monthly_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=86 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `monthly`
--

LOCK TABLES `monthly` WRITE;
/*!40000 ALTER TABLE `monthly` DISABLE KEYS */;
INSERT INTO `monthly` VALUES (2,'dovvn',2021,4,'2021-04-14','2021-04-15','깃허브 블로그 파기?',1),(4,'dovvn',2021,5,'2021-05-01','2021-05-03','JAVA 1~3강 과제 제출',2),(11,'dovvn',2021,5,'2021-05-17','2021-05-17','Vue.js 시험일',2),(12,'dovvn',2021,5,'2021-05-20','2021-05-20','Spring 시험일',1),(13,'dovvn',2021,5,'2021-05-17','2021-05-17','Web디버깅 시험일',1),(14,'dovvn',2021,5,'2021-05-17','2021-05-20','???월말평가 시험기간???',4),(15,'dovvn',2021,5,'2021-05-18','2021-05-18','DB 시험일',0),(17,'dovvn',2021,5,'2021-05-11','2021-05-11','진이,혜지-알고스터디',1),(19,'hyeji',2021,5,'2021-05-18','2021-05-19','캘린더수정하기',3),(20,'hyeji',2021,5,'2021-05-21','2021-05-21','최종발표',0),(21,'hyeji',2021,5,'2021-05-14','2021-05-14','일정추가',0),(22,'hyeji',2021,5,'2021-05-14','2021-05-15','일정추가',3),(23,'hyeji',2021,5,'2021-05-13','2021-05-15','일정',4),(25,'hyeji',2021,5,'2021-05-14','2021-05-15','일정일정',1),(26,'hyeji',2021,5,'2021-05-14','2021-05-14','크기 테스트',2),(27,'hyeji',2021,4,'2021-04-19','2021-04-23','싸피',3),(28,'dovvn',2021,5,'2021-05-14','2021-05-14','지형,호연-토익스터디',0),(29,'dovvn',2021,5,'2021-05-21','2021-05-21','프로젝트 발표날?',2),(30,'dovvn',2021,5,'2021-05-19','2021-05-19','알고리즘 시험일',5),(31,'dovvn',2021,5,'2021-05-11','2021-05-11','자바의정석 p12 1번 질문하기',2),(32,'dovvn',2021,5,'2021-05-03','2021-05-04','http인강 듣기?',3),(33,'dovvn',2021,5,'2021-05-06','2021-05-06','3pm 멘토링?‍?',4),(34,'dovvn',2021,5,'2021-05-25','2021-05-25','진이,혜지-알고스터디',1),(35,'dovvn',2021,5,'2021-05-28','2021-05-28','지형,호연-토익스터디',0),(36,'dovvn',2021,5,'2021-05-16','2021-05-16','진이랑 도서관?',3),(37,'dovvn',2021,5,'2021-05-12','2021-05-12','혜지랑 버그수정?',5),(38,'dovvn',2021,5,'2021-05-19','2021-05-19','발표PPT 제작하기',2),(39,'dovvn',2021,5,'2021-05-08','2021-05-08','토익학원 등록',0),(40,'dovvn',2021,5,'2021-05-23','2021-05-25','JAVA 4~5강 과제제출',2),(41,'dovvn',2021,5,'2021-05-18','2021-05-20','UCC 제작',3),(42,'dovvn',2021,6,'2021-06-02','2021-06-02','자바의정석 반납',4),(43,'dovvn',2021,6,'2021-06-19','2021-06-19','토익학원 종강',3),(44,'dovvn',2021,6,'2021-06-26','2021-06-26','토익 시험?',0),(45,'dovvn',2021,6,'2021-06-14','2021-06-18','Java 6~9강 과제제출',2),(46,'dovvn',2021,6,'2021-06-15','2021-06-16','혜지랑 도서관?',1),(47,'dovvn',2021,6,'2021-06-10','2021-06-10','인프런 AWS 강의 신청',0),(48,'dovvn',2021,6,'2021-06-07','2021-06-08','DP 2문제 풀기',5),(49,'dovvn',2021,5,'2021-05-06','2021-05-06','SWEA 1249번 질문하기',1),(50,'dovvn',2021,5,'2021-05-22','2021-05-22','프로젝트 회고',5),(51,'dovvn',2021,4,'2021-04-02','2021-04-02','1일1커밋 시작!!',4),(52,'dovvn',2021,4,'2021-04-06','2021-04-09','알고리즘 보충 7PM',2),(53,'dovvn',2021,4,'2021-04-05','2021-04-07','정보처리기사 2과목 끝내기',3),(54,'dovvn',2021,4,'2021-04-12','2021-04-12',' Spring 쪽지시험',4),(55,'dovvn',2021,4,'2021-04-22','2021-04-23','서울-특강',0),(56,'hoyeon',2021,5,'2021-05-16','2021-05-20','프로젝트 마무리!',0),(57,'hoyeon',2021,5,'2021-05-09','2021-05-14','프로젝트 중간점검',1),(58,'hoyeon',2021,5,'2021-05-19','2021-05-20','UCC 마무리',2),(59,'hoyeon',2021,5,'2021-05-13','2021-05-13','영상촬영',4),(61,'hyeji',2021,5,'2021-05-21','2021-05-22','테스트',4),(63,'hyeji',2021,5,'2021-05-16','2021-05-17','잠자기',1),(65,'hyeji',2021,5,'2021-05-21','2021-05-22','테스트1',0),(67,'hoyeon',2021,5,'2021-05-20','2021-05-20','UCC 제출',5),(71,'hyeji',2021,5,'2021-05-09','2021-05-10','추가확인',3),(72,'hyeji',2021,5,'2021-05-09','2021-05-10','날짜확인',4),(73,'ssafy',2021,5,'2021-05-19','2021-05-21','JPA 인강 3~4강 듣기',4),(74,'ssafy',2021,5,'2021-05-13','2021-05-14','토익 RC 집중 공부!!',0),(75,'ssafy',2021,5,'2021-05-11','2021-05-13','JPA 인강 1~2강 듣기',2),(76,'ssafy',2021,5,'2021-05-15','2021-05-15','토익 시험',3),(77,'ssafy',2021,5,'2021-05-24','2021-05-26','백준 1일 3문제 풀기',1),(78,'ssafy',2021,5,'2021-05-03','2021-05-04','정보처리기사 필기 공부',5),(79,'ssafy',2021,5,'2021-05-05','2021-05-05','프로젝트 회의',4),(80,'admin',2021,5,'2021-05-06','2021-05-07','버그 수정',5),(81,'admin',2021,5,'2021-05-11','2021-05-14','Spring Rest API개발',2),(82,'admin',2021,5,'2021-05-17','2021-05-18','유니티 과제 제출',4),(83,'admin',2021,5,'2021-05-04','2021-05-07','정보처리기사 실기 공부',0),(84,'admin',2021,5,'2021-05-12','2021-05-12','다우니랑 카공?',1),(85,'admin',2021,5,'2021-05-20','2021-05-20','백준 알고리즘 오답노트',3);
/*!40000 ALTER TABLE `monthly` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problem`
--

DROP TABLE IF EXISTS `problem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `problem` (
  `pro_id` int NOT NULL AUTO_INCREMENT,
  `pro_content` text NOT NULL,
  `pro_date` datetime(6) NOT NULL,
  `pro_input` varchar(255) NOT NULL,
  `pro_output` varchar(255) NOT NULL,
  `pro_title` varchar(255) NOT NULL,
  `user_id` varchar(255) DEFAULT NULL,
  `room_id` int DEFAULT NULL,
  PRIMARY KEY (`pro_id`),
  KEY `FKj6t2lpcskqxjdjr5j4txsxxdp` (`user_id`),
  CONSTRAINT `FKj6t2lpcskqxjdjr5j4txsxxdp` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problem`
--

LOCK TABLES `problem` WRITE;
/*!40000 ALTER TABLE `problem` DISABLE KEYS */;
INSERT INTO `problem` VALUES (20,'문제','2021-05-20 03:08:53.241000','1','1','문제','jihyeong',54),(21,'문제입니다','2021-05-20 03:23:44.088000','간ㅏ다','가나다','충남대문제','hyeji',54),(29,'문제\n \'Dummy\' 라는 도스게임이 있다. 이 게임에는 뱀이 나와서 기어다니는데, 사과를 먹으면 뱀 길이가 늘어난다. 뱀이 이리저리 기어다니다가 벽 또는 자기자신의 몸과 부딪히면 게임이 끝난다.\n\n게임은 NxN 정사각 보드위에서 진행되고, 몇몇 칸에는 사과가 놓여져 있다. 보드의 상하좌우 끝에 벽이 있다. 게임이 시작할때 뱀은 맨위 맨좌측에 위치하고 뱀의 길이는 1 이다. 뱀은 처음에 오른쪽을 향한다.\n\n뱀은 매 초마다 이동을 하는데 다음과 같은 규칙을 따른다.\n\n먼저 뱀은 몸길이를 늘려 머리를 다음칸에 위치시킨다.\n만약 이동한 칸에 사과가 있다면, 그 칸에 있던 사과가 없어지고 꼬리는 움직이지 않는다.\n만약 이동한 칸에 사과가 없다면, 몸길이를 줄여서 꼬리가 위치한 칸을 비워준다. 즉, 몸길이는 변하지 않는다.\n사과의 위치와 뱀의 이동경로가 주어질 때 이 게임이 몇 초에 끝나는지 계산하라.\n\n입력\n첫째 줄에 보드의 크기 N이 주어진다. (2 ≤ N ≤ 100) 다음 줄에 사과의 개수 K가 주어진다. (0 ≤ K ≤ 100)\n\n다음 K개의 줄에는 사과의 위치가 주어지는데, 첫 번째 정수는 행, 두 번째 정수는 열 위치를 의미한다. 사과의 위치는 모두 다르며, 맨 위 맨 좌측 (1행 1열) 에는 사과가 없다.\n\n다음 줄에는 뱀의 방향 변환 횟수 L 이 주어진다. (1 ≤ L ≤ 100)\n\n다음 L개의 줄에는 뱀의 방향 변환 정보가 주어지는데,  정수 X와 문자 C로 이루어져 있으며. 게임 시작 시간으로부터 X초가 끝난 뒤에 왼쪽(C가 \'L\') 또는 오른쪽(C가 \'D\')로 90도 방향을 회전시킨다는 뜻이다. X는 10,000 이하의 양의 정수이며, 방향 전환 정보는 X가 증가하는 순으로 주어진다.\n\n출력\n첫째 줄에 게임이 몇 초에 끝나는지 출력한다.','2021-05-20 06:31:47.191000','6\n3\n3 4\n2 5\n5 3\n3\n3 D\n15 L\n17 D','9','뱀','dovvn',1),(30,'문제\n스타트링크에서 판매하는 어린이용 장난감 중에서 가장 인기가 많은 제품은 구슬 탈출이다. 구슬 탈출은 직사각형 보드에 빨간 구슬과 파란 구슬을 하나씩 넣은 다음, 빨간 구슬을 구멍을 통해 빼내는 게임이다.\n\n보드의 세로 크기는 N, 가로 크기는 M이고, 편의상 1×1크기의 칸으로 나누어져 있다. 가장 바깥 행과 열은 모두 막혀져 있고, 보드에는 구멍이 하나 있다. 빨간 구슬과 파란 구슬의 크기는 보드에서 1×1크기의 칸을 가득 채우는 사이즈이고, 각각 하나씩 들어가 있다. 게임의 목표는 빨간 구슬을 구멍을 통해서 빼내는 것이다. 이때, 파란 구슬이 구멍에 들어가면 안 된다.\n\n이때, 구슬을 손으로 건드릴 수는 없고, 중력을 이용해서 이리 저리 굴려야 한다. 왼쪽으로 기울이기, 오른쪽으로 기울이기, 위쪽으로 기울이기, 아래쪽으로 기울이기와 같은 네 가지 동작이 가능하다.\n\n각각의 동작에서 공은 동시에 움직인다. 빨간 구슬이 구멍에 빠지면 성공이지만, 파란 구슬이 구멍에 빠지면 실패이다. 빨간 구슬과 파란 구슬이 동시에 구멍에 빠져도 실패이다. 빨간 구슬과 파란 구슬은 동시에 같은 칸에 있을 수 없다. 또, 빨간 구슬과 파란 구슬의 크기는 한 칸을 모두 차지한다. 기울이는 동작을 그만하는 것은 더 이상 구슬이 움직이지 않을 때 까지이다.\n\n보드의 상태가 주어졌을 때, 최소 몇 번 만에 빨간 구슬을 구멍을 통해 빼낼 수 있는지 구하는 프로그램을 작성하시오.\n\n입력\n첫 번째 줄에는 보드의 세로, 가로 크기를 의미하는 두 정수 N, M (3 ≤ N, M ≤ 10)이 주어진다. 다음 N개의 줄에 보드의 모양을 나타내는 길이 M의 문자열이 주어진다. 이 문자열은 \'.\', \'#\', \'O\', \'R\', \'B\' 로 이루어져 있다. \'.\'은 빈 칸을 의미하고, \'#\'은 공이 이동할 수 없는 장애물 또는 벽을 의미하며, \'O\'는 구멍의 위치를 의미한다. \'R\'은 빨간 구슬의 위치, \'B\'는 파란 구슬의 위치이다.\n\n입력되는 모든 보드의 가장자리에는 모두 \'#\'이 있다. 구멍의 개수는 한 개 이며, 빨간 구슬과 파란 구슬은 항상 1개가 주어진다.\n\n출력\n최소 몇 번 만에 빨간 구슬을 구멍을 통해 빼낼 수 있는지 출력한다. 만약, 10번 이하로 움직여서 빨간 구슬을 구멍을 통해 빼낼 수 없으면 -1을 출력한다.','2021-05-20 06:56:17.812000','5 5\n#####\n#..B#\n#.#.#\n#RO.#\n#####','1','구슬탈출','hyeji',1),(32,'문제\n(A+B)%C는 ((A%C) + (B%C))%C 와 같을까?\n\n(A×B)%C는 ((A%C) × (B%C))%C 와 같을까?\n\n세 수 A, B, C가 주어졌을 때, 위의 네 가지 값을 구하는 프로그램을 작성하시오.\n\n입력\n첫째 줄에 A, B, C가 순서대로 주어진다. (2 ≤ A, B, C ≤ 10000)\n\n출력\n첫째 줄에 (A+B)%C, 둘째 줄에 ((A%C) + (B%C))%C, 셋째 줄에 (A×B)%C, 넷째 줄에 ((A%C) × (B%C))%C를 출력한다.','2021-05-20 07:04:07.248000','5 8 4','1\n1\n0\n0','나머지','hyeji',1),(33,'N을 입력받은 뒤, 구구단 N단을 출력하는 프로그램을 작성하시오. 출력 형식에 맞춰서 출력하면 된다.','2021-05-20 07:18:54.339000','2','2 * 1 = 2\n2 * 2 = 4\n2 * 3 = 6\n2 * 4 = 8\n2 * 5 = 10\n2 * 6 = 12\n2 * 7 = 14\n2 * 8 = 16\n2 * 9 = 18','구구단','hyeji',NULL),(35,'문제\nN을 입력받은 뒤, 구구단 N단을 출력하는 프로그램을 작성하시오. 출력 형식에 맞춰서 출력하면 된다.\n\n입력\n첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 9보다 작거나 같다.\n\n출력\n출력형식과 같게 N*1부터 N*9까지 출력한다.','2021-05-20 07:20:40.766000','2','2 * 1 = 2\n2 * 2 = 4\n2 * 3 = 6\n2 * 4 = 8\n2 * 5 = 10\n2 * 6 = 12\n2 * 7 = 14\n2 * 8 = 16\n2 * 9 = 18','구구단','dovvn',1),(36,'마법사 상어는 파이어볼과 토네이도를 조합해 파이어스톰을 시전할 수 있다. 오늘은 파이어스톰을 크기가 2N × 2N인 격자로 나누어진 얼음판에서 연습하려고 한다. 위치 (r, c)는 격자의 r행 c열을 의미하고, A[r][c]는 (r, c)에 있는 얼음의 양을 의미한다. A[r][c]가 0인 경우 얼음이 없는 것이다.\n\n파이어스톰을 시전하려면 시전할 때마다 단계 L을 결정해야 한다. 파이어스톰은 먼저 격자를 2L × 2L 크기의 부분 격자로 나눈다. 그 후, 모든 부분 격자를 시계 방향으로 90도 회전시킨다. 이후 얼음이 있는 칸 3개 또는 그 이상과 인접해있지 않은 칸은 얼음의 양이 1 줄어든다. (r, c)와 인접한 칸은 (r-1, c), (r+1, c), (r, c-1), (r, c+1)이다. 아래 그림의 칸에 적힌 정수는 칸을 구분하기 위해 적은 정수이다.\n\n마법사 상어는 파이어스톰을 총 Q번 시전하려고 한다. 모든 파이어스톰을 시전한 후, 다음 2가지를 구해보자.\n\n남아있는 얼음 A[r][c]의 합\n남아있는 얼음 중 가장 큰 덩어리가 차지하는 칸의 개수\n얼음이 있는 칸이 얼음이 있는 칸과 인접해 있으면, 두 칸을 연결되어 있다고 한다. 덩어리는 연결된 칸의 집합이다.','2021-05-20 07:24:21.891000','3 1\n1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1\n1','284\n64','마법사상어와 파이어스톰','dovvn',1),(37,'어른 상어가 마법사가 되었고, 파이어볼을 배웠다.\n\n마법사 상어가 크기가 N×N인 격자에 파이어볼 M개를 발사했다. 가장 처음에 파이어볼은 각자 위치에서 이동을 대기하고 있다. i번 파이어볼의 위치는 (ri, ci), 질량은 mi이고, 방향은 di, 속력은 si이다. 위치 (r, c)는 r행 c열을 의미한다.\n\n격자의 행과 열은 1번부터 N번까지 번호가 매겨져 있고, 1번 행은 N번과 연결되어 있고, 1번 열은 N번 열과 연결되어 있다.\n\n파이어볼의 방향은 어떤 칸과 인접한 8개의 칸의 방향을 의미하며, 정수로는 다음과 같다.\n\n마법사 상어가 모든 파이어볼에게 이동을 명령하면 다음이 일들이 일어난다.\n\n모든 파이어볼이 자신의 방향 di로 속력 si칸 만큼 이동한다.\n이동하는 중에는 같은 칸에 여러 개의 파이어볼이 있을 수도 있다.\n이동이 모두 끝난 뒤, 2개 이상의 파이어볼이 있는 칸에서는 다음과 같은 일이 일어난다.\n같은 칸에 있는 파이어볼은 모두 하나로 합쳐진다.\n파이어볼은 4개의 파이어볼로 나누어진다.\n나누어진 파이어볼의 질량, 속력, 방향은 다음과 같다.\n질량은 ⌊(합쳐진 파이어볼 질량의 합)/5⌋이다.\n속력은 ⌊(합쳐진 파이어볼 속력의 합)/(합쳐진 파이어볼의 개수)⌋이다.\n합쳐지는 파이어볼의 방향이 모두 홀수이거나 모두 짝수이면, 방향은 0, 2, 4, 6이 되고, 그렇지 않으면 1, 3, 5, 7이 된다.\n질량이 0인 파이어볼은 소멸되어 없어진다.\n마법사 상어가 이동을 K번 명령한 후, 남아있는 파이어볼 질량의 합을 구해보자.','2021-05-20 07:24:52.697000','4 2 1\n1 1 5 2 2\n1 4 7 1 6','8','마법사상어와 파이어볼','dovvn',1),(38,'피보나치 수는 0과 1로 시작한다. 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다. 그 다음 2번째 부터는 바로 앞 두 피보나치 수의 합이 된다.\n\n이를 식으로 써보면 Fn = Fn-1 + Fn-2 (n ≥ 2)가 된다.\n\nn=17일때 까지 피보나치 수를 써보면 다음과 같다.\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n\nn이 주어졌을 때, n번째 피보나치 수를 구하는 프로그램을 작성하시오.','2021-05-20 07:26:38.587000','10','55','피보나치 수','dovvn',1),(39,'수열 A가 주어졌을 때, 가장 긴 감소하는 부분 수열을 구하는 프로그램을 작성하시오.\n\n예를 들어, 수열 A = {10, 30, 10, 20, 20, 10} 인 경우에 가장 긴 감소하는 부분 수열은 A = {10, 30, 10, 20, 20, 10}  이고, 길이는 3이다.','2021-05-20 07:39:23.551000','6\n10 30 10 20 20 10','3','가장 긴 감소하는 부분 수열','dovvn',1);
/*!40000 ALTER TABLE `problem` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `qna`
--

DROP TABLE IF EXISTS `qna`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `qna` (
  `qna_id` int NOT NULL AUTO_INCREMENT,
  `qna_content` text NOT NULL,
  `qna_date` datetime(6) NOT NULL,
  `qna_title` varchar(255) NOT NULL,
  `user_id` varchar(255) DEFAULT NULL,
  `room_id` int DEFAULT NULL,
  PRIMARY KEY (`qna_id`),
  KEY `FK22kn9bnirhpqdv8ibyyo28nkr` (`user_id`),
  CONSTRAINT `FK22kn9bnirhpqdv8ibyyo28nkr` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `qna`
--

LOCK TABLES `qna` WRITE;
/*!40000 ALTER TABLE `qna` DISABLE KEYS */;
INSERT INTO `qna` VALUES (25,'<p>인터페이스가 어떻건지 아는데요<br>java api문서는 어디서 찾아야 돼는지 잘 모르겠고,<br>클래스를 정의할 때 어떤 메소드를 사용해야 하는지 모르겠어요, 도움이 필요해요 ㅠ</p><img src=\"https://kin-phinf.pstatic.net/20200525_64/15903816000719uewj_JPEG/1590381599841.jpg?type=w750\" contenteditable=\"false\" draggable=\"true\" class=\"ProseMirror-selectednode\">','2021-05-19 03:46:43.587000','Java 문제 풀다가 질문이요  ㅠㅠㅠ','dovvn',1),(26,'<p>오늘 Java수업 시작하고 진도 따라가기가 벅차네요 ㅠㅠ</p><p>다들 공부하는 책 하나씩 추천부탁드려요~~~...</p>','2021-05-19 04:46:43.587000','Java 기초 교재 추천해주세요','dovvn',1),(27,'<div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">import math\n\ndef digit_length(<span class=\"hljs-built_in\">n</span>)<span class=\"hljs-symbol\">:</span>\nreturn <span class=\"hljs-built_in\">int</span>(math.log10(<span class=\"hljs-built_in\">n</span>)) + <span class=\"hljs-number\">1</span> <span class=\"hljs-built_in\">if</span> <span class=\"hljs-built_in\">n</span> else <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-built_in\">n</span>, k = input().split()\n\n<span class=\"hljs-built_in\">n</span> = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">n</span>)\nk = <span class=\"hljs-built_in\">int</span>(k)\n\nx = <span class=\"hljs-number\">10</span> ** digit_length(<span class=\"hljs-built_in\">n</span>) * <span class=\"hljs-built_in\">n</span> + <span class=\"hljs-built_in\">n</span></code></pre></div><p><br></p><p>n을 입력 받아서 자릿수를 구하고 x는 n의 값을 반복한 것처럼 나타낸 것입니다.</p><p>예를 들면, n = 5일때 x = 55가 되고 n = 10이라면 x = 1010 이런 형태로 됩니다.</p><p>구현하려는 부분이 n과 k를 입력받고 n을 k로 나눠서 0이 될때까지 n의 자리수를 n의 값으로 늘려가면서 반복하고 싶은데요..</p><p>예를 들면</p><p>n = 2, k = 9라면</p><p>2 % 9 (false)</p><p>22 % 9 (false)</p><p>222 % 9 (false)</p><p>.</p><p>.</p><p>222222222 % 9 (나머지가 0 이므로 true)</p><p>이런 형식입니다.</p><p>아무리 반복해도 안된다면 -1로 출력하면 되는데 어떤 방법을 써야할까요?</p><p>​</p><p>제가 생각한 방법은 저 x를 k로 나눠가면서 계속 반복하는 것인데 어떤식으로 코딩을 해야할지 감이 안옵니다..</p><p>그게 아니라면 x를 문자열로 변환하고 리스트 형태로 변환하여 n의 값을 붙이고 다시 정수형으로 바꿔 k로 나눠야하는지..?</p><p>​</p><p>도움 부탁드립니다 ㅠㅠ</p><p><br></p>','2021-05-20 03:53:47.506000','파이썬 알고리즘 질문','hoyeon',1),(28,'<p>오늘 내준 자판기과제 하다가 막히는게 있네요ㅠㅠ</p><p>제가 짠 코드구요</p><div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\">import java.util.Scanner<span class=\"hljs-comment\">; </span>\npublic class Machine { \n  public static void main(String args<span class=\"hljs-section\">[]</span>){ \n    Scanner <span class=\"hljs-attr\">sc</span> = new Scanner(System.in)<span class=\"hljs-comment\">; </span>\n    String con<span class=\"hljs-comment\">; </span>\n    int money,menu,<span class=\"hljs-attr\">price</span>=<span class=\"hljs-number\">0</span>, i=<span class=\"hljs-number\">0</span>, count=<span class=\"hljs-number\">0</span><span class=\"hljs-comment\">; </span>\n    String drink<span class=\"hljs-section\">[]</span> = new String<span class=\"hljs-section\">[10]</span><span class=\"hljs-comment\">; </span>\n    String <span class=\"hljs-attr\">select</span>=<span class=\"hljs-string\">\"\"</span><span class=\"hljs-comment\">; </span>\n    int <span class=\"hljs-attr\">m1000</span>=<span class=\"hljs-number\">0</span>,m500=<span class=\"hljs-number\">0</span>,m100=<span class=\"hljs-number\">0</span>,m10=<span class=\"hljs-number\">0</span><span class=\"hljs-comment\">; </span>\n    System.out.println(\"---------------------------------------------------------\")<span class=\"hljs-comment\">; </span>\n    System.out.println(\"1.콜라(1000), 2.환타(700) 3.사이다(800) 4.물(600) 5.레쓰비(700)\")<span class=\"hljs-comment\">; </span>\n    System.out.println(\"---------------------------------------------------------\")<span class=\"hljs-comment\">; </span>\n    System.out.println()<span class=\"hljs-comment\">; </span>\n    System.out.print(\"금액을 입력하세요 : \")<span class=\"hljs-comment\">; </span>\n    <span class=\"hljs-attr\">money</span> = sc.nextInt()<span class=\"hljs-comment\">; </span>\n    for(<span class=\"hljs-attr\">i</span> = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">; i&lt;drink.length ; i++){ </span>\n      System.out.print(\"음료를 선택하세요 : \")<span class=\"hljs-comment\">; </span>\n      <span class=\"hljs-attr\">menu</span> = sc.nextInt()<span class=\"hljs-comment\">; </span>\n      switch(menu){ \n        case 1: \n        <span class=\"hljs-attr\">select</span>=<span class=\"hljs-string\">\"콜라\"</span><span class=\"hljs-comment\">; </span>\n        <span class=\"hljs-attr\">price</span>=<span class=\"hljs-number\">1000</span><span class=\"hljs-comment\">; </span>\n        break<span class=\"hljs-comment\">; </span>\n        case 2: \n        <span class=\"hljs-attr\">select</span>=<span class=\"hljs-string\">\"환타\"</span><span class=\"hljs-comment\">; </span>\n        <span class=\"hljs-attr\">price</span>=<span class=\"hljs-number\">700</span> <span class=\"hljs-comment\">; </span>\n        break<span class=\"hljs-comment\">;  </span>\n        case 3: \n        <span class=\"hljs-attr\">select</span>=<span class=\"hljs-string\">\"사이다\"</span><span class=\"hljs-comment\">; </span>\n        <span class=\"hljs-attr\">price</span>=<span class=\"hljs-number\">800</span><span class=\"hljs-comment\">; </span>\n        break<span class=\"hljs-comment\">; </span>\n        case 4: \n        <span class=\"hljs-attr\">select</span>=<span class=\"hljs-string\">\"물\"</span><span class=\"hljs-comment\">; </span>\n        <span class=\"hljs-attr\">price</span>=<span class=\"hljs-number\">600</span><span class=\"hljs-comment\">; </span>\n        case 5: \n        <span class=\"hljs-attr\">select</span>=<span class=\"hljs-string\">\"레쓰비\"</span><span class=\"hljs-comment\">; </span>\n        <span class=\"hljs-attr\">price</span>=<span class=\"hljs-number\">700</span><span class=\"hljs-comment\">; </span>\n        break<span class=\"hljs-comment\">; </span>\n        default : \n        System.out.println(\"메뉴를 다시 선택하세요(1~5)\")<span class=\"hljs-comment\">; </span>\n     }//switch \n     if(money &lt; price){ \n       System.out.println(\"잔액이 부족합니다\")<span class=\"hljs-comment\">; </span>\n       System.out.println(\"금액을 추가 하시겠습니까? (y or n)\")<span class=\"hljs-comment\">; </span>\n       <span class=\"hljs-attr\">con</span>=sc.next()<span class=\"hljs-comment\">; </span>\n       if(con.equals(\"n\")||con.equals(\"N\")) \n       break<span class=\"hljs-comment\">; </span>\n       else if(con.equals(\"y\")||con.equals(\"Y\")) { \n         System.out.print(\"금액을 입력하세요 : \")<span class=\"hljs-comment\">; </span>\n         int <span class=\"hljs-attr\">Remoney</span> = sc.nextInt()<span class=\"hljs-comment\">; </span>\n         money += Remoney<span class=\"hljs-comment\">; </span>\n         continue<span class=\"hljs-comment\">; </span>\n      } \n      }else { \n      <span class=\"hljs-attr\">money</span> = money-price<span class=\"hljs-comment\">; </span>\n      drink<span class=\"hljs-section\">[i]</span> = select<span class=\"hljs-comment\">; </span>\n      count++<span class=\"hljs-comment\">; </span>\n      System.out.println(\"남은 잔액은\"+money+\"원 입니다.\")<span class=\"hljs-comment\">; </span>\n       System.out.println(\"추가 선택하시겠습니까? (y or n)\")<span class=\"hljs-comment\">; </span>\n      <span class=\"hljs-attr\">con</span>=sc.next()<span class=\"hljs-comment\">; </span>\n      if(con.equals(\"n\")||con.equals(\"N\")) \n      break<span class=\"hljs-comment\">; </span>\n      System.out.println()<span class=\"hljs-comment\">; </span>\n   } \n}//while \nSystem.out.println(\"이용해주셔서 감사합니다\")<span class=\"hljs-comment\">; </span>\nSystem.out.println()<span class=\"hljs-comment\">; </span>\nif(drink<span class=\"hljs-section\">[i]</span>==null) \nSystem.out.println(\"뽑으신 음료수는 없으며, 거스름돈은 \"+money+\"원입니다\")<span class=\"hljs-comment\">; </span>\nelse { \n  System.out.print(\"뽑으신 음료수는 \\\'\")<span class=\"hljs-comment\">; </span>\n  for(<span class=\"hljs-attr\">i</span>=<span class=\"hljs-number\">0</span><span class=\"hljs-comment\">; i&lt;count; i++) { </span>\n    if(<span class=\"hljs-attr\">i</span> == count-<span class=\"hljs-number\">1</span>) \n    System.out.println(drink<span class=\"hljs-section\">[i]</span>+\"\\\'이며 거스름돈은 \"+money+\"원입니다\")<span class=\"hljs-comment\">; </span>\n    else \n    System.out.print(drink<span class=\"hljs-section\">[i]</span>+\", \")<span class=\"hljs-comment\">; </span>\n } \n <span class=\"hljs-attr\">m1000</span>= money / <span class=\"hljs-number\">1000</span><span class=\"hljs-comment\">; </span>\n <span class=\"hljs-attr\">m500</span>=(money%<span class=\"hljs-number\">1000</span>)/<span class=\"hljs-number\">500</span><span class=\"hljs-comment\">; </span>\n <span class=\"hljs-attr\">m100</span>=((money%<span class=\"hljs-number\">1000</span>)%<span class=\"hljs-number\">500</span>)/<span class=\"hljs-number\">100</span><span class=\"hljs-comment\">; </span>\n <span class=\"hljs-attr\">m10</span>=(((money%<span class=\"hljs-number\">1000</span>)%<span class=\"hljs-number\">500</span>)%<span class=\"hljs-number\">100</span>)/<span class=\"hljs-number\">10</span><span class=\"hljs-comment\">; </span>\n System.out.println(\"1000원\" + m1000 +\"개, 500원\" + m500 + \"개, 100원\" + m100 +\"개, 10원\" + m10 + \"개\")<span class=\"hljs-comment\">; </span>\n} \n}//main \n}//Machine </code></pre></div><p><br></p><p>이렇게 했고 처음에 돈 부족이 없다는 경우를 제외하고 실행했을 경우</p><p><br><br></p><p>---------------------------------------------------------<br>1.콜라(1000), 2.환타(700) 3.사이다(800) 4.물(600) 5.레쓰비(700)<br>---------------------------------------------------------</p><p>금액을 입력하세요 : 2000<br>음료를 선택하세요 : 1<br>남은 잔액은1000원 입니다.<br>추가 선택하시겠습니까? (y or n)<br>y</p><p>음료를 선택하세요 : 2<br>남은 잔액은300원 입니다.<br>추가 선택하시겠습니까? (y or n)<br>n<br>이용해주셔서 감사합니다</p><p>뽑으신 음료수는 \'콜라, 환타\'이며 거스름돈은 300원입니다<br>1000원0개, 500원0개, 100원3개, 10원0개</p><p><br><br></p><p>이렇게 잘 실행되고, 돈이 아예 없고 구매하지 않는 경우여도</p><p><br><br></p><p>---------------------------------------------------------<br>1.콜라(1000), 2.환타(700) 3.사이다(800) 4.물(600) 5.레쓰비(700)<br>---------------------------------------------------------</p><p>금액을 입력하세요 : 1<br>음료를 선택하세요 : 1<br>잔액이 부족합니다<br>금액을 추가 하시겠습니까? (y or n)<br>n<br>이용해주셔서 감사합니다</p><p>뽑으신 음료수는 없으며, 거스름돈은 1원입니다</p><p><br><br></p><p>이렇게 잘 실행이 됩니다.</p><p>그런데 처음에 돈이 없어서 충전을 한 뒤, 구매를 하면</p><p><br><br></p><p>---------------------------------------------------------<br>1.콜라(1000), 2.환타(700) 3.사이다(800) 4.물(600) 5.레쓰비(700)<br>---------------------------------------------------------</p><p>금액을 입력하세요 : 1<br>음료를 선택하세요 : 1<br>잔액이 부족합니다<br>금액을 추가 하시겠습니까? (y or n)<br>y<br>금액을 입력하세요 : 2000<br>음료를 선택하세요 : 1<br>남은 잔액은1001원 입니다.<br>추가 선택하시겠습니까? (y or n)<br>y</p><p>음료를 선택하세요 : 2<br>남은 잔액은301원 입니다.<br>추가 선택하시겠습니까? (y or n)<br>n<br>이용해주셔서 감사합니다</p><p>뽑으신 음료수는 \'null, 콜라\'이며 거스름돈은 301원입니다<br>1000원0개, 500원0개, 100원3개, 10원0개</p><p><br><br></p><p>이런식으로 drink[0] = null이 되어버립니다.</p><p>이걸 뭐라고 고쳐야할까요..?</p><p>1시간 고민해도 답이 안나오네요ㅠㅠ</p>','2021-05-20 03:58:38.783000','오늘 자판기 과제 모르겠어요 ㅜㅜ','hyeji',1),(34,'<p>진심 너무 재밌다ㅋㅋㅋㅋ</p><p>duddj fjlakejalkjf 너무 잘돼~~</p>','2021-05-20 04:30:59.318000','이게 자율 프로젝트인가요??','hyeji',54),(35,'<div data-v-97cd3554=\"\" data-node-view-wrapper=\"\" class=\"code-block\" style=\"white-space: normal;\"><pre data-v-97cd3554=\"\"><code data-v-97cd3554=\"\" data-node-view-content=\"\" style=\"white-space: pre-wrap;\"><span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">A</span>{\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-function hljs-title\">A</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span> { System.out.println(<span class=\"hljs-string\">\"A\"</span>); }\n}\n<span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">B</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-keyword\">extends</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">A</span>{\nPublic <span class=\"hljs-function hljs-title\">B</span><span class=\"hljs-function\">(</span><span class=\"hljs-function\">)</span> { <span class=\"hljs-built_in\">super</span>(<span class=\"hljs-number\">100</span>); }\n}\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class hljs-keyword\">class</span><span class=\"hljs-class\"> </span><span class=\"hljs-class hljs-title\">C</span><span class=\"hljs-class\"> </span>{ \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-function hljs-title\">main</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-params hljs-built_in\">String</span><span class=\"hljs-function hljs-params\"> [] args </span><span class=\"hljs-function\">)</span>{\nB b = <span class=\"hljs-keyword\">new</span> B(<span class=\"hljs-number\">11</span>);\n}\n}</code></pre></div><p>이게 오류가 나는데 왜 오류가 나는지 모르겠어요.&nbsp;</p><p>도와주세요ㅜㅜㅜㅜㅜㅜㅜ</p>','2021-05-20 04:34:04.819000','자바java 상속super클래스 질문','jihyeong',1),(36,'<img src=\"https://kin-phinf.pstatic.net/20210302_294/1614693528498XYPyy_PNG/%C0%CC%B0%C5%BE%EE%B6%BB%B0%D4%C7%AA%B3%AA%BF%E4_%A4%D0.png?type=w750\" contenteditable=\"false\" draggable=\"true\"><p>코드랑 순서 해석까지 해주시면 감사하겠습니다ㅠ_ㅠ</p><p><br><br></p><p>뭐부터해야할지모르겠어요..ㅎr..<br><br></p><p>문자열:</p><p>문자: 를 출력하기위한건알겠는데</p><p><br><br></p><p>그 다음부터 ..뭘 어떻게해야할지 모르겠네요...후..</p>','2021-05-20 04:44:53.937000','JAVA 배열 연습문제 이거 어떻게푸나요..???‍♂️','hoyeon',1),(37,'<img src=\"https://kin-phinf.pstatic.net/20210330_283/1617066161166VjAPC_JPEG/20210324_161107.jpg?type=w750\" contenteditable=\"false\" draggable=\"true\" class=\"\"><p>오늘 과제 왤케 어려운지 ㅠㅠㅠㅠ </p><p>연습문제를 풀던 도중 어떻게 답을 내야하는지 잘 몰라서 글올려여</p><p>고수님들의 도움 미리 감사요ㅠㅠㅠ</p>','2021-05-20 04:47:03.823000','자바 오늘 과제 질문질문~!!!!!!!','hoyeon',1),(39,'<h2>제목</h2><h1>제목</h1>','2021-05-20 04:55:59.288000','fdsafdsa','jihyeong',54),(40,'<p>오늘 this.변수명을 통해서 매개변수와 변수명을 구분해주는것을 배웠자나여<br><br>여기서 this뒤에 ()괄호를 묶는 이유는 모르겠고 뭘하는건지 설명부탁드릴게요 ㅠㅠ</p><p><br></p><img src=\"https://kin-phinf.pstatic.net/20210116_91/1610776234901iHajm_JPEG/1610776232793.jpeg?type=w750\" contenteditable=\"false\" draggable=\"true\" class=\"\">','2021-05-20 04:59:36.616000',' JAVA 생성자질문??‍♀️','dovvn',1),(41,'<h2>아침되니까 맵이 밝아진거 같대요 누가</h2>','2021-05-20 06:22:56.924000','유니티도 현재 시간에 따라 맵 변화가 있나요!?','hyeji',54);
/*!40000 ALTER TABLE `qna` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `room`
--

DROP TABLE IF EXISTS `room`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `room` (
  `room_id` int NOT NULL AUTO_INCREMENT,
  `room_name` varchar(255) NOT NULL,
  PRIMARY KEY (`room_id`)
) ENGINE=MyISAM AUTO_INCREMENT=68 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `room`
--

LOCK TABLES `room` WRITE;
/*!40000 ALTER TABLE `room` DISABLE KEYS */;
INSERT INTO `room` VALUES (1,'SSAFY 4기 대전 1반'),(2,'논산여자중학교'),(3,'대전중학교'),(4,'울산여고'),(6,'덕명중학교'),(48,'모여랏'),(47,'학교'),(46,'School63'),(45,'School74'),(44,'School92'),(43,'School13'),(42,'School4'),(41,'School80'),(40,'School36'),(39,'g'),(38,'School88'),(35,'School9'),(34,'School12'),(33,'School90'),(37,'School73'),(31,'우리학교'),(30,'충남대'),(36,'School42'),(28,'땡땡이중학교'),(27,'땡땡중학교'),(49,'School20'),(50,'School58'),(51,'School94'),(52,'School89'),(53,'School82'),(54,'충남대학교'),(56,'School99'),(57,'School77'),(58,'School2'),(59,'School25'),(60,'혼자있고싶어요'),(61,'School28'),(62,'School55'),(63,'School21'),(64,'School57'),(65,'SSAFY'),(66,'싸피'),(67,'SSAFY 4기 대전 1반`');
/*!40000 ALTER TABLE `room` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sms`
--

DROP TABLE IF EXISTS `sms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sms` (
  `sms_id` int NOT NULL AUTO_INCREMENT,
  `phone_number` varchar(255) NOT NULL,
  `auth_number` varchar(255) DEFAULT NULL,
  `valid` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`sms_id`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sms`
--

LOCK TABLES `sms` WRITE;
/*!40000 ALTER TABLE `sms` DISABLE KEYS */;
INSERT INTO `sms` VALUES (1,'01088888888','123123',0),(2,'01088888888','123456',0),(3,'01088888888','531010',0),(4,'01088888888','451603',1),(5,'01097037740','410537',0),(6,'01097037740','875560',0),(7,'01097037740','032272',0),(8,'01097037740','722309',0),(9,'01097037740','581642',0),(10,'01097037740','518380',0),(11,'01097037740','194702',0),(12,'01097037740','548323',0),(13,'01097037740','280289',0),(14,'01097037740','320732',0),(15,'01097037740','093536',0),(16,'01097037740','749450',0),(17,'01097037740','528348',0),(18,'01097037740','932170',0),(19,'01097037740','300342',0),(20,'01097037740','201983',0),(21,'01097037740','018451',0),(22,'01097037740','023409',0),(23,'01097037740','012843',0),(24,'01097037740','638772',0),(25,'01097037740','390860',0),(26,'01097037740','762231',0),(27,'01097037740','124178',0),(28,'01097037740','432070',0),(29,'01097037740','045910',0),(30,'01097037740','629976',0),(31,'01097037740','455999',0),(32,'01097037740','972117',0),(33,'01097037740','495834',0),(34,'01097037740','318788',0),(35,'01097037740','745276',0),(36,'01097037740','967992',0),(37,'01097037740','353048',1),(38,'01071231815','964402',0),(39,'01071231815','013781',0),(40,'01071231815','367149',1),(41,'01053068224','399026',1),(42,'01082207281','817902',1);
/*!40000 ALTER TABLE `sms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `solve`
--

DROP TABLE IF EXISTS `solve`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `solve` (
  `solve_id` int NOT NULL AUTO_INCREMENT,
  `pro_id` int DEFAULT NULL,
  `user_id` varchar(255) DEFAULT NULL,
  `room_id` int DEFAULT NULL,
  PRIMARY KEY (`solve_id`),
  KEY `FKk5hnk1n4s8os5dcxgqrqpg0yi` (`user_id`),
  KEY `FKwelmlupx8cqjrkaa0oiokqa8` (`pro_id`),
  CONSTRAINT `FKk5hnk1n4s8os5dcxgqrqpg0yi` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FKwelmlupx8cqjrkaa0oiokqa8` FOREIGN KEY (`pro_id`) REFERENCES `problem` (`pro_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `solve`
--

LOCK TABLES `solve` WRITE;
/*!40000 ALTER TABLE `solve` DISABLE KEYS */;
INSERT INTO `solve` VALUES (12,37,'hoyeon',NULL),(13,21,'jihyeong',NULL),(14,38,'hoyeon',NULL),(15,29,'dovvn',NULL),(16,29,'admin',NULL),(17,39,'admin',NULL);
/*!40000 ALTER TABLE `solve` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `user_id` varchar(255) NOT NULL,
  `user_img` text,
  `user_lank` varchar(255) NOT NULL,
  `user_nickname` varchar(255) NOT NULL,
  `user_phone` varchar(255) NOT NULL,
  `user_point` int NOT NULL,
  `user_pw` varchar(255) NOT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES ('admin','https://bts.s3.ap-northeast-2.amazonaws.com/20210520174047_ssafylogo.png','silver2','BTS','01097037740',2400,'admin123'),('aloom302','','silver2','아르미','01052611815',2300,'testest123'),('dmzmzmzr','','silver2','기호','01065871887',2300,'testest123'),('dovvn','https://bts.s3.ap-northeast-2.amazonaws.com/20210520042321_sddsdf.jpg','gold3','지니','01071231815',3250,'wjdekdns123'),('hayonleee','','gold3','하여니','01033440781',3150,'testest123'),('hihi1234',NULL,'브론즈3','hihi','01053068224',0,'12341234'),('hoyeon','https://bts.s3.ap-northeast-2.amazonaws.com/20210520042406_e4c9lgdm9c6f3.jpg','gold1','영등동야생마','01095117443',3950,'testest123'),('hyeji','https://bts.s3.ap-northeast-2.amazonaws.com/20210520042506_zzansdfdf.jpg','gold3','해지하이','01054656138',3250,'testest123'),('jihyeong','https://bts.s3.ap-northeast-2.amazonaws.com/20210520042434_IMG_3482.jpg','gold1','졍','01024722496',4600,'testest123'),('kminheuk','','gold1','미녁시','01084423679',5050,'testest123'),('knock',NULL,'브론즈3','knock','01082207281',0,'qwer1234'),('qorwjdgus8951','','silver2','정현이','01037178951',2350,'testest123'),('ssafy','https://bts.s3.ap-northeast-2.amazonaws.com/20210520174406_lecturer_16.png','bronze3','싸피생','01052611815',400,'ssafy123123'),('wlsdhr0831','','gold1','진옥이','01020457251',4500,'testest123');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `weekly`
--

DROP TABLE IF EXISTS `weekly`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `weekly` (
  `week_id` int NOT NULL AUTO_INCREMENT,
  `user_id` varchar(50) NOT NULL,
  `week_start_time` time NOT NULL,
  `week_end_time` time NOT NULL,
  `week_content` text NOT NULL,
  `week_date` date NOT NULL,
  `week_month` int NOT NULL,
  `week_year` int NOT NULL,
  PRIMARY KEY (`week_id`),
  KEY `weekly_ibfk_1` (`user_id`),
  CONSTRAINT `weekly_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `weekly`
--

LOCK TABLES `weekly` WRITE;
/*!40000 ALTER TABLE `weekly` DISABLE KEYS */;
INSERT INTO `weekly` VALUES (6,'dovvn','22:00:01','23:00:01','유니티 유튜브','2021-05-17',0,0),(7,'dovvn','15:00:01','19:00:01','친구랑 한강가기^^','2021-05-18',0,0),(17,'dovvn','20:00:00','22:00:00','영화 감상','2021-05-12',0,0),(18,'dovvn','13:00:00','15:00:00','자소서 쓰기','2021-05-13',0,0);
/*!40000 ALTER TABLE `weekly` ENABLE KEYS */;
UNLOCK TABLES;
SET @@SESSION.SQL_LOG_BIN = @MYSQLDUMP_TEMP_LOG_BIN;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-05-21 10:16:30
